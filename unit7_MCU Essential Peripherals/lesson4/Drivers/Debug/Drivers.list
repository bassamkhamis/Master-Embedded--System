
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001044  08001044  0001104c  2**0
                  CONTENTS
  4 .ARM          00000000  08001044  08001044  0001104c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001044  0800104c  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  0800104c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  0800104c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001104c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036c7  00000000  00000000  00011075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ff  00000000  00000000  0001473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000009ac  00000000  00000000  0001503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  00015b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000009cd  00000000  00000000  00015ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002087  00000000  00000000  000166ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009661  00000000  00000000  00018734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00021d95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000524  00000000  00000000  00021de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ffc 	.word	0x08000ffc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ffc 	.word	0x08000ffc

08000170 <delay_ms>:


#include "Lcd.h"
GPIO_configPin_t PinConfig;

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <LCD_clear_screen>:

void LCD_clear_screen(){
 80001aa:	b580      	push	{r7, lr}
 80001ac:	af00      	add	r7, sp, #0

//	MCAL_GPIO_WritePort(LCD_PORT, LCD_CLEAR_SCREEN);
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f000 f9bc 	bl	800052c <LCD_WRITE_COMMAND>
}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0


	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_HIGH);
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <LCD_lcd_kick+0x28>)
 80001c4:	f000 fe43 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL |= (1 << EN_SWITCH);
	delay_ms(50);
 80001c8:	2032      	movs	r0, #50	; 0x32
 80001ca:	f7ff ffd1 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_LOW);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d4:	4802      	ldr	r0, [pc, #8]	; (80001e0 <LCD_lcd_kick+0x28>)
 80001d6:	f000 fe3a 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << EN_SWITCH);
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010800 	.word	0x40010800

080001e4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	460a      	mov	r2, r1
 80001ee:	71fb      	strb	r3, [r7, #7]
 80001f0:	4613      	mov	r3, r2
 80001f2:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d108      	bne.n	800020c <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	2b0f      	cmp	r3, #15
 80001fe:	d805      	bhi.n	800020c <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000200:	79bb      	ldrb	r3, [r7, #6]
 8000202:	3b80      	subs	r3, #128	; 0x80
 8000204:	b2db      	uxtb	r3, r3
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f990 	bl	800052c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b02      	cmp	r3, #2
 8000210:	d108      	bne.n	8000224 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	2b0f      	cmp	r3, #15
 8000216:	d805      	bhi.n	8000224 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	3b40      	subs	r3, #64	; 0x40
 800021c:	b2db      	uxtb	r3, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f984 	bl	800052c <LCD_WRITE_COMMAND>
		}
	}
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <LCD_INIT>:

void LCD_INIT(){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(0x00);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
	 */
	delay_ms(20);
 8000230:	2014      	movs	r0, #20
 8000232:	f7ff ff9d 	bl	8000170 <delay_ms>
	PinConfig.GPIO_PinNumber=EN_SWITCH;
 8000236:	4b5d      	ldr	r3, [pc, #372]	; (80003ac <LCD_INIT+0x180>)
 8000238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800023c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800023e:	4b5b      	ldr	r3, [pc, #364]	; (80003ac <LCD_INIT+0x180>)
 8000240:	2204      	movs	r2, #4
 8000242:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000244:	4b59      	ldr	r3, [pc, #356]	; (80003ac <LCD_INIT+0x180>)
 8000246:	2201      	movs	r2, #1
 8000248:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800024a:	4958      	ldr	r1, [pc, #352]	; (80003ac <LCD_INIT+0x180>)
 800024c:	4858      	ldr	r0, [pc, #352]	; (80003b0 <LCD_INIT+0x184>)
 800024e:	f000 fd6f 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=RS_SWITCH;
 8000252:	4b56      	ldr	r3, [pc, #344]	; (80003ac <LCD_INIT+0x180>)
 8000254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000258:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800025a:	4b54      	ldr	r3, [pc, #336]	; (80003ac <LCD_INIT+0x180>)
 800025c:	2204      	movs	r2, #4
 800025e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000260:	4b52      	ldr	r3, [pc, #328]	; (80003ac <LCD_INIT+0x180>)
 8000262:	2201      	movs	r2, #1
 8000264:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000266:	4951      	ldr	r1, [pc, #324]	; (80003ac <LCD_INIT+0x180>)
 8000268:	4851      	ldr	r0, [pc, #324]	; (80003b0 <LCD_INIT+0x184>)
 800026a:	f000 fd61 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=RW_SWITCH;
 800026e:	4b4f      	ldr	r3, [pc, #316]	; (80003ac <LCD_INIT+0x180>)
 8000270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000274:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000276:	4b4d      	ldr	r3, [pc, #308]	; (80003ac <LCD_INIT+0x180>)
 8000278:	2204      	movs	r2, #4
 800027a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800027c:	4b4b      	ldr	r3, [pc, #300]	; (80003ac <LCD_INIT+0x180>)
 800027e:	2201      	movs	r2, #1
 8000280:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000282:	494a      	ldr	r1, [pc, #296]	; (80003ac <LCD_INIT+0x180>)
 8000284:	484a      	ldr	r0, [pc, #296]	; (80003b0 <LCD_INIT+0x184>)
 8000286:	f000 fd53 	bl	8000d30 <MCAL_GPIO_Init>


	//	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);

	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_LOW);
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	4847      	ldr	r0, [pc, #284]	; (80003b0 <LCD_INIT+0x184>)
 8000292:	f000 fddc 	bl	8000e4e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029c:	4844      	ldr	r0, [pc, #272]	; (80003b0 <LCD_INIT+0x184>)
 800029e:	f000 fdd6 	bl	8000e4e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002a8:	4841      	ldr	r0, [pc, #260]	; (80003b0 <LCD_INIT+0x184>)
 80002aa:	f000 fdd0 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);

	PinConfig.GPIO_PinNumber=GPIO_PIN0;
 80002ae:	4b3f      	ldr	r3, [pc, #252]	; (80003ac <LCD_INIT+0x180>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80002b4:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <LCD_INIT+0x180>)
 80002b6:	2204      	movs	r2, #4
 80002b8:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80002ba:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <LCD_INIT+0x180>)
 80002bc:	2201      	movs	r2, #1
 80002be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80002c0:	493a      	ldr	r1, [pc, #232]	; (80003ac <LCD_INIT+0x180>)
 80002c2:	483b      	ldr	r0, [pc, #236]	; (80003b0 <LCD_INIT+0x184>)
 80002c4:	f000 fd34 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN1;
 80002c8:	4b38      	ldr	r3, [pc, #224]	; (80003ac <LCD_INIT+0x180>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80002ce:	4b37      	ldr	r3, [pc, #220]	; (80003ac <LCD_INIT+0x180>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80002d4:	4b35      	ldr	r3, [pc, #212]	; (80003ac <LCD_INIT+0x180>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80002da:	4934      	ldr	r1, [pc, #208]	; (80003ac <LCD_INIT+0x180>)
 80002dc:	4834      	ldr	r0, [pc, #208]	; (80003b0 <LCD_INIT+0x184>)
 80002de:	f000 fd27 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN2;
 80002e2:	4b32      	ldr	r3, [pc, #200]	; (80003ac <LCD_INIT+0x180>)
 80002e4:	2204      	movs	r2, #4
 80002e6:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80002e8:	4b30      	ldr	r3, [pc, #192]	; (80003ac <LCD_INIT+0x180>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80002ee:	4b2f      	ldr	r3, [pc, #188]	; (80003ac <LCD_INIT+0x180>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80002f4:	492d      	ldr	r1, [pc, #180]	; (80003ac <LCD_INIT+0x180>)
 80002f6:	482e      	ldr	r0, [pc, #184]	; (80003b0 <LCD_INIT+0x184>)
 80002f8:	f000 fd1a 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN3;
 80002fc:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <LCD_INIT+0x180>)
 80002fe:	2208      	movs	r2, #8
 8000300:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000302:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <LCD_INIT+0x180>)
 8000304:	2204      	movs	r2, #4
 8000306:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <LCD_INIT+0x180>)
 800030a:	2201      	movs	r2, #1
 800030c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800030e:	4927      	ldr	r1, [pc, #156]	; (80003ac <LCD_INIT+0x180>)
 8000310:	4827      	ldr	r0, [pc, #156]	; (80003b0 <LCD_INIT+0x184>)
 8000312:	f000 fd0d 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN4;
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <LCD_INIT+0x180>)
 8000318:	2210      	movs	r2, #16
 800031a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <LCD_INIT+0x180>)
 800031e:	2204      	movs	r2, #4
 8000320:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <LCD_INIT+0x180>)
 8000324:	2201      	movs	r2, #1
 8000326:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000328:	4920      	ldr	r1, [pc, #128]	; (80003ac <LCD_INIT+0x180>)
 800032a:	4821      	ldr	r0, [pc, #132]	; (80003b0 <LCD_INIT+0x184>)
 800032c:	f000 fd00 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN5;
 8000330:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <LCD_INIT+0x180>)
 8000332:	2220      	movs	r2, #32
 8000334:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <LCD_INIT+0x180>)
 8000338:	2204      	movs	r2, #4
 800033a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <LCD_INIT+0x180>)
 800033e:	2201      	movs	r2, #1
 8000340:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000342:	491a      	ldr	r1, [pc, #104]	; (80003ac <LCD_INIT+0x180>)
 8000344:	481a      	ldr	r0, [pc, #104]	; (80003b0 <LCD_INIT+0x184>)
 8000346:	f000 fcf3 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN6;
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <LCD_INIT+0x180>)
 800034c:	2240      	movs	r2, #64	; 0x40
 800034e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <LCD_INIT+0x180>)
 8000352:	2204      	movs	r2, #4
 8000354:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <LCD_INIT+0x180>)
 8000358:	2201      	movs	r2, #1
 800035a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800035c:	4913      	ldr	r1, [pc, #76]	; (80003ac <LCD_INIT+0x180>)
 800035e:	4814      	ldr	r0, [pc, #80]	; (80003b0 <LCD_INIT+0x184>)
 8000360:	f000 fce6 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN7;
 8000364:	4b11      	ldr	r3, [pc, #68]	; (80003ac <LCD_INIT+0x180>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800036a:	4b10      	ldr	r3, [pc, #64]	; (80003ac <LCD_INIT+0x180>)
 800036c:	2204      	movs	r2, #4
 800036e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <LCD_INIT+0x180>)
 8000372:	2201      	movs	r2, #1
 8000374:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LCD_INIT+0x180>)
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LCD_INIT+0x184>)
 800037a:	f000 fcd9 	bl	8000d30 <MCAL_GPIO_Init>
	//DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 800037e:	200f      	movs	r0, #15
 8000380:	f7ff fef6 	bl	8000170 <delay_ms>
	LCD_clear_screen();
 8000384:	f7ff ff11 	bl	80001aa <LCD_clear_screen>
	delay_ms(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800038e:	2038      	movs	r0, #56	; 0x38
 8000390:	f000 f8cc 	bl	800052c <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000394:	2006      	movs	r0, #6
 8000396:	f000 f8c9 	bl	800052c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800039a:	2080      	movs	r0, #128	; 0x80
 800039c:	f000 f8c6 	bl	800052c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003a0:	200f      	movs	r0, #15
 80003a2:	f000 f8c3 	bl	800052c <LCD_WRITE_COMMAND>

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000001c 	.word	0x2000001c
 80003b0:	40010800 	.word	0x40010800

080003b4 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	PinConfig.GPIO_PinNumber=GPIO_PIN0;
 80003b8:	4b5a      	ldr	r3, [pc, #360]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80003be:	4b59      	ldr	r3, [pc, #356]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80003c4:	4957      	ldr	r1, [pc, #348]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003c6:	4858      	ldr	r0, [pc, #352]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80003c8:	f000 fcb2 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN1;
 80003cc:	4b55      	ldr	r3, [pc, #340]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80003d2:	4b54      	ldr	r3, [pc, #336]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80003d8:	4952      	ldr	r1, [pc, #328]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003da:	4853      	ldr	r0, [pc, #332]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80003dc:	f000 fca8 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN2;
 80003e0:	4b50      	ldr	r3, [pc, #320]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80003e6:	4b4f      	ldr	r3, [pc, #316]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80003ec:	494d      	ldr	r1, [pc, #308]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003ee:	484e      	ldr	r0, [pc, #312]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80003f0:	f000 fc9e 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN3;
 80003f4:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 80003fa:	4b4a      	ldr	r3, [pc, #296]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000400:	4948      	ldr	r1, [pc, #288]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000402:	4849      	ldr	r0, [pc, #292]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000404:	f000 fc94 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN4;
 8000408:	4b46      	ldr	r3, [pc, #280]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800040a:	2210      	movs	r2, #16
 800040c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800040e:	4b45      	ldr	r3, [pc, #276]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000410:	2201      	movs	r2, #1
 8000412:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000414:	4943      	ldr	r1, [pc, #268]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000416:	4844      	ldr	r0, [pc, #272]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000418:	f000 fc8a 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN5;
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800041e:	2220      	movs	r2, #32
 8000420:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000422:	4b40      	ldr	r3, [pc, #256]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000424:	2201      	movs	r2, #1
 8000426:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000428:	493e      	ldr	r1, [pc, #248]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800042a:	483f      	ldr	r0, [pc, #252]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 800042c:	f000 fc80 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN6;
 8000430:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000432:	2240      	movs	r2, #64	; 0x40
 8000434:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000438:	2201      	movs	r2, #1
 800043a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800043c:	4939      	ldr	r1, [pc, #228]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800043e:	483a      	ldr	r0, [pc, #232]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000440:	f000 fc76 	bl	8000d30 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN7;
 8000444:	4b37      	ldr	r3, [pc, #220]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800044c:	2201      	movs	r2, #1
 800044e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000450:	4934      	ldr	r1, [pc, #208]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000452:	4835      	ldr	r0, [pc, #212]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000454:	f000 fc6c 	bl	8000d30 <MCAL_GPIO_Init>
	//	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);

	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_HIGH);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045e:	4832      	ldr	r0, [pc, #200]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000460:	f000 fcf5 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL |= (1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046a:	482f      	ldr	r0, [pc, #188]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 800046c:	f000 fcef 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RS_SWITCH);

	LCD_lcd_kick();
 8000470:	f7ff fea2 	bl	80001b8 <LCD_lcd_kick>

		PinConfig.GPIO_PinNumber=GPIO_PIN0;
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000476:	2201      	movs	r2, #1
 8000478:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800047c:	2204      	movs	r2, #4
 800047e:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000480:	4928      	ldr	r1, [pc, #160]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000482:	4829      	ldr	r0, [pc, #164]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000484:	f000 fc54 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN1;
 8000488:	4b26      	ldr	r3, [pc, #152]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800048a:	2202      	movs	r2, #2
 800048c:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800048e:	4b25      	ldr	r3, [pc, #148]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000490:	2204      	movs	r2, #4
 8000492:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000494:	4923      	ldr	r1, [pc, #140]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000496:	4824      	ldr	r0, [pc, #144]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000498:	f000 fc4a 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN2;
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800049e:	2204      	movs	r2, #4
 80004a0:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004a4:	2204      	movs	r2, #4
 80004a6:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004a8:	491e      	ldr	r1, [pc, #120]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004aa:	481f      	ldr	r0, [pc, #124]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80004ac:	f000 fc40 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN3;
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004bc:	4919      	ldr	r1, [pc, #100]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004be:	481a      	ldr	r0, [pc, #104]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80004c0:	f000 fc36 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN4;
 80004c4:	4b17      	ldr	r3, [pc, #92]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004c6:	2210      	movs	r2, #16
 80004c8:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004cc:	2204      	movs	r2, #4
 80004ce:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004d0:	4914      	ldr	r1, [pc, #80]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004d2:	4815      	ldr	r0, [pc, #84]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80004d4:	f000 fc2c 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN5;
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004da:	2220      	movs	r2, #32
 80004dc:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004e4:	490f      	ldr	r1, [pc, #60]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80004e8:	f000 fc22 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN6;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004ee:	2240      	movs	r2, #64	; 0x40
 80004f0:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004f8:	490a      	ldr	r1, [pc, #40]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 80004fa:	480b      	ldr	r0, [pc, #44]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 80004fc:	f000 fc18 	bl	8000d30 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN7;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 8000508:	2204      	movs	r2, #4
 800050a:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800050c:	4905      	ldr	r1, [pc, #20]	; (8000524 <LCD_check_lcd_isbusy+0x170>)
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 8000510:	f000 fc0e 	bl	8000d30 <MCAL_GPIO_Init>

//		DataDir_LCD_PORT |= (0xFF<<DATA_shift);


	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <LCD_check_lcd_isbusy+0x174>)
 800051c:	f000 fc97 	bl	8000e4e <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000001c 	.word	0x2000001c
 8000528:	40010800 	.word	0x40010800

0800052c <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000536:	f7ff ff3d 	bl	80003b4 <LCD_check_lcd_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 8000542:	f000 fc76 	bl	8000e32 <MCAL_GPIO_WritePort>
	//		LCD_PORT = command;
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 800054e:	f000 fc7e 	bl	8000e4e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <LCD_WRITE_COMMAND+0x44>)
 800055a:	f000 fc78 	bl	8000e4e <MCAL_GPIO_WritePin>
	//		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fe06 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000564:	f7ff fe28 	bl	80001b8 <LCD_lcd_kick>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
	//		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010800 	.word	0x40010800

08000574 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, character);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <LCD_WRITE_CHAR+0x40>)
 8000586:	f000 fc54 	bl	8000e32 <MCAL_GPIO_WritePort>
	//		LCD_PORT = character;

	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <LCD_WRITE_CHAR+0x40>)
 8000592:	f000 fc5c 	bl	8000e4e <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_HIGH);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <LCD_WRITE_CHAR+0x40>)
 800059e:	f000 fc56 	bl	8000e4e <MCAL_GPIO_WritePin>
	//		LCD_CTRL &= ~(1 << RW_SWITCH);
	//		LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff fde4 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80005a8:	f7ff fe06 	bl	80001b8 <LCD_lcd_kick>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_HIGH);
	//		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	//		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40010800 	.word	0x40010800

080005b8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	int count = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80005c4:	e01c      	b.n	8000600 <LCD_WRITE_STRING+0x48>
		count++;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcd 	bl	8000574 <LCD_WRITE_CHAR>
		if (count == 16)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b10      	cmp	r3, #16
 80005de:	d104      	bne.n	80005ea <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2002      	movs	r0, #2
 80005e4:	f7ff fdfe 	bl	80001e4 <LCD_GOTO_XY>
 80005e8:	e00a      	b.n	8000600 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b20      	cmp	r3, #32
 80005ee:	d107      	bne.n	8000600 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80005f0:	f7ff fddb 	bl	80001aa <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fdf4 	bl	80001e4 <LCD_GOTO_XY>
			count = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1de      	bne.n	80005c6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <IQR_Enable>:
 * @param [in] - uint8_t line contains the wire Number NVIC controller(iqr number)
 * @retval     - none
 * Note        - private function only used on this file
 */
void static IQR_Enable(uint8_t line)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	switch(line){
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d854      	bhi.n	80006ce <IQR_Enable+0xba>
 8000624:	a201      	add	r2, pc, #4	; (adr r2, 800062c <IQR_Enable+0x18>)
 8000626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062a:	bf00      	nop
 800062c:	0800066d 	.word	0x0800066d
 8000630:	0800067b 	.word	0x0800067b
 8000634:	08000689 	.word	0x08000689
 8000638:	08000697 	.word	0x08000697
 800063c:	080006a5 	.word	0x080006a5
 8000640:	080006b3 	.word	0x080006b3
 8000644:	080006b3 	.word	0x080006b3
 8000648:	080006b3 	.word	0x080006b3
 800064c:	080006b3 	.word	0x080006b3
 8000650:	080006b3 	.word	0x080006b3
 8000654:	080006c1 	.word	0x080006c1
 8000658:	080006c1 	.word	0x080006c1
 800065c:	080006c1 	.word	0x080006c1
 8000660:	080006c1 	.word	0x080006c1
 8000664:	080006c1 	.word	0x080006c1
 8000668:	080006c1 	.word	0x080006c1

	case EXTI0:
		NVIC_IQR6_EXTI0_Enable();
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <IQR_Enable+0xc8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <IQR_Enable+0xc8>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]
		break;
 8000678:	e02a      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI1:
		NVIC_IQR7_EXTI1_Enable();
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <IQR_Enable+0xc8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <IQR_Enable+0xc8>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6013      	str	r3, [r2, #0]
		break;
 8000686:	e023      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI2:
		NVIC_IQR8_EXTI2_Enable();
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <IQR_Enable+0xc8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <IQR_Enable+0xc8>)
 800068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000692:	6013      	str	r3, [r2, #0]
		break;
 8000694:	e01c      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI3:
		NVIC_IQR9_EXTI3_Enable();
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <IQR_Enable+0xc8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <IQR_Enable+0xc8>)
 800069c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a0:	6013      	str	r3, [r2, #0]
		break;
 80006a2:	e015      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI4:
		NVIC_IQR10_EXTI4_Enable();
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <IQR_Enable+0xc8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <IQR_Enable+0xc8>)
 80006aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ae:	6013      	str	r3, [r2, #0]
		break;
 80006b0:	e00e      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_IQR23_EXTI5_9_Enable();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <IQR_Enable+0xc8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <IQR_Enable+0xc8>)
 80006b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006bc:	6013      	str	r3, [r2, #0]
		break;
 80006be:	e007      	b.n	80006d0 <IQR_Enable+0xbc>
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_IQR40_EXTI10_15_Enable();
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <IQR_Enable+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <IQR_Enable+0xcc>)
 80006c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ca:	6013      	str	r3, [r2, #0]
		break;
 80006cc:	e000      	b.n	80006d0 <IQR_Enable+0xbc>
	default:
		break;
 80006ce:	bf00      	nop

	}
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000e104 	.word	0xe000e104

080006e4 <IQR_Disable>:
 * @param [in] - uint8_t line contains the wire Number NVIC controller(iqr number)
 * @retval     - none
 * Note        - private function only used on this file
 */
void static IQR_Disable(uint8_t line)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	switch(line){
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d854      	bhi.n	800079e <IQR_Disable+0xba>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <IQR_Disable+0x18>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	0800074b 	.word	0x0800074b
 8000704:	08000759 	.word	0x08000759
 8000708:	08000767 	.word	0x08000767
 800070c:	08000775 	.word	0x08000775
 8000710:	08000783 	.word	0x08000783
 8000714:	08000783 	.word	0x08000783
 8000718:	08000783 	.word	0x08000783
 800071c:	08000783 	.word	0x08000783
 8000720:	08000783 	.word	0x08000783
 8000724:	08000791 	.word	0x08000791
 8000728:	08000791 	.word	0x08000791
 800072c:	08000791 	.word	0x08000791
 8000730:	08000791 	.word	0x08000791
 8000734:	08000791 	.word	0x08000791
 8000738:	08000791 	.word	0x08000791

	case EXTI0:
		NVIC_IQR6_EXTI0_Disable();
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <IQR_Disable+0xc8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <IQR_Disable+0xc8>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
		break;
 8000748:	e02a      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI1:
		NVIC_IQR7_EXTI1_Disable();
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <IQR_Disable+0xc8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <IQR_Disable+0xc8>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6013      	str	r3, [r2, #0]
		break;
 8000756:	e023      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI2:
		NVIC_IQR8_EXTI2_Disable();
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <IQR_Disable+0xc8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <IQR_Disable+0xc8>)
 800075e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000762:	6013      	str	r3, [r2, #0]
		break;
 8000764:	e01c      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI3:
		NVIC_IQR9_EXTI3_Disable();
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <IQR_Disable+0xc8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <IQR_Disable+0xc8>)
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	6013      	str	r3, [r2, #0]
		break;
 8000772:	e015      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI4:
		NVIC_IQR10_EXTI4_Disable();
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <IQR_Disable+0xc8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <IQR_Disable+0xc8>)
 800077a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800077e:	6013      	str	r3, [r2, #0]
		break;
 8000780:	e00e      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_IQR23_EXTI5_9_Disable();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <IQR_Disable+0xc8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <IQR_Disable+0xc8>)
 8000788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800078c:	6013      	str	r3, [r2, #0]
		break;
 800078e:	e007      	b.n	80007a0 <IQR_Disable+0xbc>
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_IQR40_EXTI10_15_Disable();
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <IQR_Disable+0xcc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <IQR_Disable+0xcc>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
		break;
 800079c:	e000      	b.n	80007a0 <IQR_Disable+0xbc>
	default:
		break;
 800079e:	bf00      	nop

	}

}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e180 	.word	0xe000e180
 80007b0:	e000e184 	.word	0xe000e184

080007b4 <Local_EXTI_Update>:
 * @retval     -none
 * Note        -NO enable clock consider in this Fun
 *              User MUST Enable clock for GPIO and AFIO
 */
void Local_EXTI_Update(EXTI_pinCofig_t *EXTI_con)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

	//1- configure pin as input floating

	GPIO_configPin_t pinConfig;
	pinConfig.GPIO_PinNumber = EXTI_con->EXTI_pin.GPIO_pin;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	891b      	ldrh	r3, [r3, #8]
 80007c0:	813b      	strh	r3, [r7, #8]
	pinConfig.GPIO_Mode      =GPIO_MODE_INPUT_FLO;
 80007c2:	2301      	movs	r3, #1
 80007c4:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_con->EXTI_pin.GPIO_PORT, &pinConfig);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f107 0208 	add.w	r2, r7, #8
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 faad 	bl	8000d30 <MCAL_GPIO_Init>
	//AFIO_EXTICR1 control EXTL line [0:3]
	//AFIO_EXTICR2 control EXTL line [4:7]
	//AFIO_EXTICR3 control EXTL line [8:11]
	//AFIO_EXTICR4 control EXTL line [11:15]
	//Devided by 4 to get Index [0:3]  ex1 3/4=0, ex2 6/4=1
	uint8_t EXTI_Line_Index = (EXTI_con->EXTI_pin.EXTR_InputLineNumber) / 4;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	73fb      	strb	r3, [r7, #15]
	// modulus 4 to get position
	// AFIO_EXTICRx each pin in register take 4 bits field
	//EXTICR1[0:3], EXTICR1[4:7],EXTICR2[8:11],EXTICR3[12:15]....
	uint8_t EXTI_Line_position = ((EXTI_con->EXTI_pin.EXTR_InputLineNumber) % 4) * 4;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	f003 0303 	and.w	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	73bb      	strb	r3, [r7, #14]
	//	0010: PC[x] pin
	//	0011: PD[x] pin
	//	0100: PE[x] pin
	//	0101: PF[x] pin
	//	0110: PG[x] pin
	AFIO->EXTICR[EXTI_Line_Index] &= ~((0xf)<<EXTI_Line_position);
 80007ec:	4a5f      	ldr	r2, [pc, #380]	; (800096c <Local_EXTI_Update+0x1b8>)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	3302      	adds	r3, #2
 80007f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f6:	7bbb      	ldrb	r3, [r7, #14]
 80007f8:	210f      	movs	r1, #15
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	4618      	mov	r0, r3
 8000802:	495a      	ldr	r1, [pc, #360]	; (800096c <Local_EXTI_Update+0x1b8>)
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	4002      	ands	r2, r0
 8000808:	3302      	adds	r3, #2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[EXTI_Line_Index] |= ((AFIO_GPIO_MAPPING(EXTI_con->EXTI_pin.GPIO_PORT)&0xf)<<EXTI_Line_position);
 800080e:	4a57      	ldr	r2, [pc, #348]	; (800096c <Local_EXTI_Update+0x1b8>)
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	3302      	adds	r3, #2
 8000814:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a54      	ldr	r2, [pc, #336]	; (8000970 <Local_EXTI_Update+0x1bc>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d016      	beq.n	8000850 <Local_EXTI_Update+0x9c>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4a53      	ldr	r2, [pc, #332]	; (8000974 <Local_EXTI_Update+0x1c0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d00f      	beq.n	800084c <Local_EXTI_Update+0x98>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a51      	ldr	r2, [pc, #324]	; (8000978 <Local_EXTI_Update+0x1c4>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d008      	beq.n	8000848 <Local_EXTI_Update+0x94>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a50      	ldr	r2, [pc, #320]	; (800097c <Local_EXTI_Update+0x1c8>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d101      	bne.n	8000844 <Local_EXTI_Update+0x90>
 8000840:	2303      	movs	r3, #3
 8000842:	e006      	b.n	8000852 <Local_EXTI_Update+0x9e>
 8000844:	2300      	movs	r3, #0
 8000846:	e004      	b.n	8000852 <Local_EXTI_Update+0x9e>
 8000848:	2302      	movs	r3, #2
 800084a:	e002      	b.n	8000852 <Local_EXTI_Update+0x9e>
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <Local_EXTI_Update+0x9e>
 8000850:	2300      	movs	r3, #0
 8000852:	7bba      	ldrb	r2, [r7, #14]
 8000854:	fa03 f202 	lsl.w	r2, r3, r2
 8000858:	4844      	ldr	r0, [pc, #272]	; (800096c <Local_EXTI_Update+0x1b8>)
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	430a      	orrs	r2, r1
 800085e:	3302      	adds	r3, #2
 8000860:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	//3- Trigger selection
	//rest value
	EXTI->RTSR &=  ~(1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 8000864:	4b46      	ldr	r3, [pc, #280]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	4611      	mov	r1, r2
 800086e:	2201      	movs	r2, #1
 8000870:	408a      	lsls	r2, r1
 8000872:	43d2      	mvns	r2, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a42      	ldr	r2, [pc, #264]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000878:	400b      	ands	r3, r1
 800087a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=  ~(1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 800087c:	4b40      	ldr	r3, [pc, #256]	; (8000980 <Local_EXTI_Update+0x1cc>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	2201      	movs	r2, #1
 8000888:	408a      	lsls	r2, r1
 800088a:	43d2      	mvns	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a3c      	ldr	r2, [pc, #240]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000890:	400b      	ands	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]
	if(EXTI_con->Trigger == EXTR_RAISING)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7b1b      	ldrb	r3, [r3, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10b      	bne.n	80008b4 <Local_EXTI_Update+0x100>
	{
		EXTI->RTSR |=  (1<<(EXTI_con->EXTI_pin.EXTR_InputLineNumber));
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <Local_EXTI_Update+0x1cc>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a34      	ldr	r2, [pc, #208]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6093      	str	r3, [r2, #8]
 80008b2:	e029      	b.n	8000908 <Local_EXTI_Update+0x154>
	}
	else if(EXTI_con->Trigger == EXTR_FALLING)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7b1b      	ldrb	r3, [r3, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10b      	bne.n	80008d4 <Local_EXTI_Update+0x120>
	{
		EXTI->FTSR |=  (1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	4611      	mov	r1, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	408a      	lsls	r2, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008ce:	430b      	orrs	r3, r1
 80008d0:	60d3      	str	r3, [r2, #12]
 80008d2:	e019      	b.n	8000908 <Local_EXTI_Update+0x154>
	}
	else if(EXTI_con->Trigger == EXTR_FALLING_AND_RAISING) // Falling AND Raising
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7b1b      	ldrb	r3, [r3, #12]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d115      	bne.n	8000908 <Local_EXTI_Update+0x154>
	{
		EXTI->RTSR |=  (1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	4611      	mov	r1, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	408a      	lsls	r2, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008ee:	430b      	orrs	r3, r1
 80008f0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=  (1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <Local_EXTI_Update+0x1cc>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	4611      	mov	r1, r2
 80008fc:	2201      	movs	r2, #1
 80008fe:	408a      	lsls	r2, r1
 8000900:	4611      	mov	r1, r2
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000904:	430b      	orrs	r3, r1
 8000906:	60d3      	str	r3, [r2, #12]

	}

	//4- Fun call back

	GP_callback[EXTI_con->EXTI_pin.EXTR_InputLineNumber]=EXTI_con->p_EXTIcallback;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <Local_EXTI_Update+0x1d0>)
 8000914:	f842 3021 	str.w	r3, [r2, r1, lsl #2]



	//5-Enable EXTI AND NVIC
	if(EXTI_con->IQR_Enable == EXTI_ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7b5b      	ldrb	r3, [r3, #13]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d110      	bne.n	8000942 <Local_EXTI_Update+0x18e>
	{
		EXTI->IMR |= (1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	4611      	mov	r1, r2
 800092a:	2201      	movs	r2, #1
 800092c:	408a      	lsls	r2, r1
 800092e:	4611      	mov	r1, r2
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000932:	430b      	orrs	r3, r1
 8000934:	6013      	str	r3, [r2, #0]
		IQR_Enable(EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe6a 	bl	8000614 <IQR_Enable>
	{
		EXTI->IMR &= ~(1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
		IQR_Disable(EXTI_con->EXTI_pin.EXTR_InputLineNumber);
	}

}
 8000940:	e010      	b.n	8000964 <Local_EXTI_Update+0x1b0>
		EXTI->IMR &= ~(1<<EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	4611      	mov	r1, r2
 800094c:	2201      	movs	r2, #1
 800094e:	408a      	lsls	r2, r1
 8000950:	43d2      	mvns	r2, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <Local_EXTI_Update+0x1cc>)
 8000956:	400b      	ands	r3, r1
 8000958:	6013      	str	r3, [r2, #0]
		IQR_Disable(EXTI_con->EXTI_pin.EXTR_InputLineNumber);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fec0 	bl	80006e4 <IQR_Disable>
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010000 	.word	0x40010000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400
 8000980:	40010400 	.word	0x40010400
 8000984:	20000020 	.word	0x20000020

08000988 <MCAL_EXTI_GPIO_Init>:
 * @retval     -none
 * Note        -NO enable clock consider in this Fun
 *              User MUST Enable clock for GPIO and AFIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_pinCofig_t *EXTI_con)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	Local_EXTI_Update(EXTI_con);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff0f 	bl	80007b4 <Local_EXTI_Update>



}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <EXTI0_IRQHandler>:
//PRx: Pending bit
//0: No trigger request occurred
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is
void EXTI0_IRQHandler(void)
{  //This bit rc_w1
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <EXTI0_IRQHandler+0x1c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <EXTI0_IRQHandler+0x1c>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6153      	str	r3, [r2, #20]
	GP_callback[0]();
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <EXTI0_IRQHandler+0x20>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4798      	blx	r3
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010400 	.word	0x40010400
 80009c0:	20000020 	.word	0x20000020

080009c4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<1);
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <EXTI1_IRQHandler+0x1c>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <EXTI1_IRQHandler+0x1c>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6153      	str	r3, [r2, #20]
	GP_callback[1]();
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <EXTI1_IRQHandler+0x20>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4798      	blx	r3

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010400 	.word	0x40010400
 80009e4:	20000020 	.word	0x20000020

080009e8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<2);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <EXTI2_IRQHandler+0x1c>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <EXTI2_IRQHandler+0x1c>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6153      	str	r3, [r2, #20]
	GP_callback[2]();
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <EXTI2_IRQHandler+0x20>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4798      	blx	r3
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010400 	.word	0x40010400
 8000a08:	20000020 	.word	0x20000020

08000a0c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<3);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <EXTI3_IRQHandler+0x1c>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <EXTI3_IRQHandler+0x1c>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6153      	str	r3, [r2, #20]
	GP_callback[3]();
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <EXTI3_IRQHandler+0x20>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4798      	blx	r3
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010400 	.word	0x40010400
 8000a2c:	20000020 	.word	0x20000020

08000a30 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<4);
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <EXTI4_IRQHandler+0x1c>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <EXTI4_IRQHandler+0x1c>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6153      	str	r3, [r2, #20]
	GP_callback[4]();
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <EXTI4_IRQHandler+0x20>)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	4798      	blx	r3
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010400 	.word	0x40010400
 8000a50:	20000020 	.word	0x20000020

08000a54 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<5)){EXTI->PR |= 1<<5; GP_callback[5]();}
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <EXTI9_5_IRQHandler+0x22>
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EXTI9_5_IRQHandler+0xa4>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4798      	blx	r3
	if((EXTI->PR)& (1<<6)){EXTI->PR |= 1<<6; GP_callback[6]();}
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <EXTI9_5_IRQHandler+0x40>
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <EXTI9_5_IRQHandler+0xa4>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4798      	blx	r3
	if((EXTI->PR)& (1<<7)){EXTI->PR |= 1<<7; GP_callback[7]();}
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <EXTI9_5_IRQHandler+0x5e>
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aaa:	6153      	str	r3, [r2, #20]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <EXTI9_5_IRQHandler+0xa4>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4798      	blx	r3
	if((EXTI->PR)& (1<<8)){GP_callback[8]();EXTI->PR |= 1<<8;}
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <EXTI9_5_IRQHandler+0x7c>
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <EXTI9_5_IRQHandler+0xa4>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4798      	blx	r3
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6153      	str	r3, [r2, #20]
	if((EXTI->PR)& (1<<9)){EXTI->PR |= 1<<9; GP_callback[9]();}
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d008      	beq.n	8000aee <EXTI9_5_IRQHandler+0x9a>
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <EXTI9_5_IRQHandler+0xa0>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6153      	str	r3, [r2, #20]
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <EXTI9_5_IRQHandler+0xa4>)
 8000aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aec:	4798      	blx	r3
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010400 	.word	0x40010400
 8000af8:	20000020 	.word	0x20000020

08000afc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<10)){EXTI->PR |= 1<<10; GP_callback[10]();}
 8000b00:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d008      	beq.n	8000b1e <EXTI15_10_IRQHandler+0x22>
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6153      	str	r3, [r2, #20]
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	4798      	blx	r3
	if((EXTI->PR)& (1<<11)){EXTI->PR |= 1<<11; GP_callback[11]();}
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <EXTI15_10_IRQHandler+0x40>
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	4798      	blx	r3
	if((EXTI->PR)& (1<<12)){EXTI->PR |= 1<<12; GP_callback[12]();}
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <EXTI15_10_IRQHandler+0x5e>
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b52:	6153      	str	r3, [r2, #20]
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4798      	blx	r3
	if((EXTI->PR)& (1<<13)){EXTI->PR |= 1<<13; GP_callback[13]();}
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <EXTI15_10_IRQHandler+0x7c>
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b76:	4798      	blx	r3
	if((EXTI->PR)& (1<<14)){EXTI->PR |= 1<<14; GP_callback[14]();}
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d008      	beq.n	8000b96 <EXTI15_10_IRQHandler+0x9a>
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6153      	str	r3, [r2, #20]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b94:	4798      	blx	r3
	if((EXTI->PR)& (1<<15)){EXTI->PR |= 1<<15; GP_callback[15]();}
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <EXTI15_10_IRQHandler+0xb8>
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <EXTI15_10_IRQHandler+0xbc>)
 8000ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <EXTI15_10_IRQHandler+0xc0>)
 8000bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb2:	4798      	blx	r3

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010400 	.word	0x40010400
 8000bbc:	20000020 	.word	0x20000020

08000bc0 <get_Pin_Postion>:

#include "STM32F103x8_gpio_driver.h"



uint8_t get_Pin_Postion(uint16_t GPIO_PinNumber ){
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PinNumber){
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bd0:	f000 80a5 	beq.w	8000d1e <get_Pin_Postion+0x15e>
 8000bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bd8:	f300 80a3 	bgt.w	8000d22 <get_Pin_Postion+0x162>
 8000bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000be0:	f000 809b 	beq.w	8000d1a <get_Pin_Postion+0x15a>
 8000be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000be8:	f300 809b 	bgt.w	8000d22 <get_Pin_Postion+0x162>
 8000bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf0:	f000 8091 	beq.w	8000d16 <get_Pin_Postion+0x156>
 8000bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bf8:	f300 8093 	bgt.w	8000d22 <get_Pin_Postion+0x162>
 8000bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c00:	f000 8087 	beq.w	8000d12 <get_Pin_Postion+0x152>
 8000c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c08:	f300 808b 	bgt.w	8000d22 <get_Pin_Postion+0x162>
 8000c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c10:	d07d      	beq.n	8000d0e <get_Pin_Postion+0x14e>
 8000c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c16:	f300 8084 	bgt.w	8000d22 <get_Pin_Postion+0x162>
 8000c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c1e:	d074      	beq.n	8000d0a <get_Pin_Postion+0x14a>
 8000c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c24:	dc7d      	bgt.n	8000d22 <get_Pin_Postion+0x162>
 8000c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c2a:	d06c      	beq.n	8000d06 <get_Pin_Postion+0x146>
 8000c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c30:	dc77      	bgt.n	8000d22 <get_Pin_Postion+0x162>
 8000c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c36:	d064      	beq.n	8000d02 <get_Pin_Postion+0x142>
 8000c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3c:	dc71      	bgt.n	8000d22 <get_Pin_Postion+0x162>
 8000c3e:	2b80      	cmp	r3, #128	; 0x80
 8000c40:	d05d      	beq.n	8000cfe <get_Pin_Postion+0x13e>
 8000c42:	2b80      	cmp	r3, #128	; 0x80
 8000c44:	dc6d      	bgt.n	8000d22 <get_Pin_Postion+0x162>
 8000c46:	2b20      	cmp	r3, #32
 8000c48:	dc48      	bgt.n	8000cdc <get_Pin_Postion+0x11c>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	dd69      	ble.n	8000d22 <get_Pin_Postion+0x162>
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	2b1f      	cmp	r3, #31
 8000c52:	d866      	bhi.n	8000d22 <get_Pin_Postion+0x162>
 8000c54:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <get_Pin_Postion+0x9c>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000ce3 	.word	0x08000ce3
 8000c60:	08000ce7 	.word	0x08000ce7
 8000c64:	08000d23 	.word	0x08000d23
 8000c68:	08000ceb 	.word	0x08000ceb
 8000c6c:	08000d23 	.word	0x08000d23
 8000c70:	08000d23 	.word	0x08000d23
 8000c74:	08000d23 	.word	0x08000d23
 8000c78:	08000cef 	.word	0x08000cef
 8000c7c:	08000d23 	.word	0x08000d23
 8000c80:	08000d23 	.word	0x08000d23
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000cf3 	.word	0x08000cf3
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000d23 	.word	0x08000d23
 8000cbc:	08000d23 	.word	0x08000d23
 8000cc0:	08000d23 	.word	0x08000d23
 8000cc4:	08000d23 	.word	0x08000d23
 8000cc8:	08000d23 	.word	0x08000d23
 8000ccc:	08000d23 	.word	0x08000d23
 8000cd0:	08000d23 	.word	0x08000d23
 8000cd4:	08000d23 	.word	0x08000d23
 8000cd8:	08000cf7 	.word	0x08000cf7
 8000cdc:	2b40      	cmp	r3, #64	; 0x40
 8000cde:	d00c      	beq.n	8000cfa <get_Pin_Postion+0x13a>
 8000ce0:	e01f      	b.n	8000d22 <get_Pin_Postion+0x162>
	case GPIO_PIN0:
		return 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e01e      	b.n	8000d24 <get_Pin_Postion+0x164>
		break;
	case GPIO_PIN1:
			return 4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e01c      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN2:
			return 8;
 8000cea:	2308      	movs	r3, #8
 8000cec:	e01a      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN3:
			return 12;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	e018      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN4:
			return 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	e016      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN5:
			return 20;
 8000cf6:	2314      	movs	r3, #20
 8000cf8:	e014      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN6:
			return 24;
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	e012      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN7:
			return 28;
 8000cfe:	231c      	movs	r3, #28
 8000d00:	e010      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN8:
			return 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e00e      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN9:
			return 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	e00c      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN10:
			return 8;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	e00a      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN11:
			return 12;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	e008      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN12:
			return 16;
 8000d12:	2310      	movs	r3, #16
 8000d14:	e006      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN13:
			return 20;
 8000d16:	2314      	movs	r3, #20
 8000d18:	e004      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN14:
			return 24;
 8000d1a:	2318      	movs	r3, #24
 8000d1c:	e002      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN15:
			return 28;
 8000d1e:	231c      	movs	r3, #28
 8000d20:	e000      	b.n	8000d24 <get_Pin_Postion+0x164>
			break;


	}

	return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <MCAL_GPIO_Init>:
*              when configure the GPIO, first check TRM and data sheet of MCU and kit to know available Ports
*/


void MCAL_GPIO_Init(GPIOx_typeDef* GPIOx, GPIO_configPin_t* PinConfig)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]

	volatile uint32_t *cofigReg =NULL;  //((void *)0)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
	cofigReg = ((PinConfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d801      	bhi.n	8000d4a <MCAL_GPIO_Init+0x1a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	e001      	b.n	8000d4e <MCAL_GPIO_Init+0x1e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	60bb      	str	r3, [r7, #8]
	*cofigReg &= ~(0xf<<get_Pin_Postion(PinConfig->GPIO_PinNumber)) ; //Reset the nibble in CRL Or CRH
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <get_Pin_Postion>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	230f      	movs	r3, #15
 8000d60:	4093      	lsls	r3, r2
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	401a      	ands	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	601a      	str	r2, [r3, #0]
	uint8_t pinConfigLoc = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	789b      	ldrb	r3, [r3, #2]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d00b      	beq.n	8000d92 <MCAL_GPIO_Init+0x62>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d007      	beq.n	8000d92 <MCAL_GPIO_Init+0x62>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	d003      	beq.n	8000d92 <MCAL_GPIO_Init+0x62>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d10e      	bne.n	8000db0 <MCAL_GPIO_Init+0x80>
		//00: General purpose output push-pull (4-4=0)
		//01: General purpose output Open-drain (5-4=1)
		//10: Alternate function output Push-pull (6-4=1)
		//11: Alternate function output Open-drain (7-4=1)

		pinConfigLoc = ( ( (PinConfig->GPIO_Mode)-4 )<<2 | (PinConfig->GPIO_Output_Speed) ) & 0xf;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	3b04      	subs	r3, #4
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	78db      	ldrb	r3, [r3, #3]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b25b      	sxtb	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e02e      	b.n	8000e0e <MCAL_GPIO_Init+0xde>
		01: Floating input (reset state)
		10: Input with pull-up / pull-dow*/



			if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d10e      	bne.n	8000dd6 <MCAL_GPIO_Init+0xa6>
			{   //Pull up (set bit according to pin number)
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e01b      	b.n	8000e0e <MCAL_GPIO_Init+0xde>
			}
			else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)// Pull down (reset bit according to pin number)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	789b      	ldrb	r3, [r3, #2]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d110      	bne.n	8000e00 <MCAL_GPIO_Init+0xd0>
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	8812      	ldrh	r2, [r2, #0]
 8000de6:	43d2      	mvns	r2, r2
 8000de8:	401a      	ands	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60da      	str	r2, [r3, #12]
				pinConfigLoc = ((PinConfig->GPIO_Mode-1)<<2 | (0x00)) & 0xf;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e006      	b.n	8000e0e <MCAL_GPIO_Init+0xde>
			}
			else{
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	73fb      	strb	r3, [r7, #15]

			}

	}
// Set configuration to CRL OR CRH
(*cofigReg) |= ((pinConfigLoc) << get_Pin_Postion(PinConfig->GPIO_PinNumber)) ;
 8000e0e:	7bfc      	ldrb	r4, [r7, #15]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fed3 	bl	8000bc0 <get_Pin_Postion>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	fa04 f203 	lsl.w	r2, r4, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	601a      	str	r2, [r3, #0]


}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}

08000e32 <MCAL_GPIO_WritePort>:
* @param [in] -uint8_t value the value to be written
* @retval     -None
* Note        -The argument MUST be AS Reference
*/
void MCAL_GPIO_WritePort(GPIOx_typeDef* GPIOx,uint16_t value)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
//	GPIOx->ODR &= ~(0xff);
	GPIOx->ODR = (uint32_t)value ;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <MCAL_GPIO_WritePin>:
* @param [in] -pin number @ref GPIO_pinNumber_define
* @retval     -None
* Note        -The argument MUST be AS Reference
*/
void MCAL_GPIO_WritePin(GPIOx_typeDef* GPIOx,uint16_t PinNumber,uint8_t Pinvalue)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	807b      	strh	r3, [r7, #2]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	707b      	strb	r3, [r7, #1]

	if(GPIO_HIGH == Pinvalue){
 8000e5e:	787b      	ldrb	r3, [r7, #1]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d103      	bne.n	8000e6c <MCAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	611a      	str	r2, [r3, #16]
	}
	else {
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000e6a:	e002      	b.n	8000e72 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	615a      	str	r2, [r3, #20]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <pseudo_delay>:
#endif


GPIO_configPin_t GConfigPin;

void pseudo_delay(uint32_t time){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	e00b      	b.n	8000ea2 <pseudo_delay+0x26>
		for (j = 0; j < 255; j++);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	e002      	b.n	8000e96 <pseudo_delay+0x1a>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2bfe      	cmp	r3, #254	; 0xfe
 8000e9a:	d9f9      	bls.n	8000e90 <pseudo_delay+0x14>
	for (i = 0; i < time; i++)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d3ef      	bcc.n	8000e8a <pseudo_delay+0xe>
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <fun_callback>:



void fun_callback(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
   LCD_WRITE_STRING("EXTI9PB9 IS Released _|-");
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <fun_callback+0x1c>)
 8000ebe:	f7ff fb7b 	bl	80005b8 <LCD_WRITE_STRING>
   pseudo_delay(700);
 8000ec2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000ec6:	f7ff ffd9 	bl	8000e7c <pseudo_delay>
   LCD_clear_screen();
 8000eca:	f7ff f96e 	bl	80001aa <LCD_clear_screen>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	08001014 	.word	0x08001014

08000ed8 <GPIO_EXTI_init>:
void GPIO_EXTI_init(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

		EXTI_pinCofig_t LPinConfig;
		LPinConfig.EXTI_pin = EXTI9PB9;
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <GPIO_EXTI_init+0x30>)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LPinConfig.IQR_Enable=EXTI_ENABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	767b      	strb	r3, [r7, #25]
		LPinConfig.Trigger=EXTR_RAISING;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	763b      	strb	r3, [r7, #24]
		LPinConfig.p_EXTIcallback=fun_callback;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <GPIO_EXTI_init+0x34>)
 8000ef4:	61fb      	str	r3, [r7, #28]
		MCAL_EXTI_GPIO_Init(&LPinConfig);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd44 	bl	8000988 <MCAL_EXTI_GPIO_Init>


}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08001030 	.word	0x08001030
 8000f0c:	08000eb9 	.word	0x08000eb9

08000f10 <main>:

int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0



	RCC_GPIOA_CLK_EN();
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <main+0x48>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <main+0x48>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <main+0x48>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <main+0x48>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6193      	str	r3, [r2, #24]
    RCC_GPIOC_CLK_EN();
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <main+0x48>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <main+0x48>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6193      	str	r3, [r2, #24]




	LCD_INIT();
 8000f38:	f7ff f978 	bl	800022c <LCD_INIT>
	GPIO_EXTI_init();
 8000f3c:	f7ff ffcc 	bl	8000ed8 <GPIO_EXTI_init>
	LCD_WRITE_STRING("Hey_|-");
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <main+0x4c>)
 8000f42:	f7ff fb39 	bl	80005b8 <LCD_WRITE_STRING>
	pseudo_delay(30);
 8000f46:	201e      	movs	r0, #30
 8000f48:	f7ff ff98 	bl	8000e7c <pseudo_delay>
	LCD_clear_screen();
 8000f4c:	f7ff f92d 	bl	80001aa <LCD_clear_screen>


	while(1){


		pseudo_delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff ff93 	bl	8000e7c <pseudo_delay>
 8000f56:	e7fb      	b.n	8000f50 <main+0x40>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	0800103c 	.word	0x0800103c

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopForever+0xe>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopForever+0x16>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f8e:	f000 f811 	bl	8000fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff ffbd 	bl	8000f10 <main>

08000f96 <LoopForever>:

LoopForever:
    b LoopForever
 8000f96:	e7fe      	b.n	8000f96 <LoopForever>
  ldr   r0, =_estack
 8000f98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fa4:	0800104c 	.word	0x0800104c
  ldr r2, =_sbss
 8000fa8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fac:	20000060 	.word	0x20000060

08000fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC1_2_IRQHandler>
	...

08000fb4 <__libc_init_array>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4d0c      	ldr	r5, [pc, #48]	; (8000fec <__libc_init_array+0x38>)
 8000fba:	4c0d      	ldr	r4, [pc, #52]	; (8000ff0 <__libc_init_array+0x3c>)
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	10a4      	asrs	r4, r4, #2
 8000fc0:	42a6      	cmp	r6, r4
 8000fc2:	d109      	bne.n	8000fd8 <__libc_init_array+0x24>
 8000fc4:	f000 f81a 	bl	8000ffc <_init>
 8000fc8:	2600      	movs	r6, #0
 8000fca:	4d0a      	ldr	r5, [pc, #40]	; (8000ff4 <__libc_init_array+0x40>)
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <__libc_init_array+0x44>)
 8000fce:	1b64      	subs	r4, r4, r5
 8000fd0:	10a4      	asrs	r4, r4, #2
 8000fd2:	42a6      	cmp	r6, r4
 8000fd4:	d105      	bne.n	8000fe2 <__libc_init_array+0x2e>
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fdc:	4798      	blx	r3
 8000fde:	3601      	adds	r6, #1
 8000fe0:	e7ee      	b.n	8000fc0 <__libc_init_array+0xc>
 8000fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe6:	4798      	blx	r3
 8000fe8:	3601      	adds	r6, #1
 8000fea:	e7f2      	b.n	8000fd2 <__libc_init_array+0x1e>
 8000fec:	08001044 	.word	0x08001044
 8000ff0:	08001044 	.word	0x08001044
 8000ff4:	08001044 	.word	0x08001044
 8000ff8:	08001048 	.word	0x08001048

08000ffc <_init>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr

08001008 <_fini>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr
