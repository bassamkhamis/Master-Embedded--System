
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e30  08000e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e30  08000e30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e30  08000e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e34  08000e34  00010e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000e44  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000336b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000851  00000000  00000000  000233a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000006b8  00000000  00000000  00023bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000242b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  000243f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002087  00000000  00000000  000244e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e5d  00000000  00000000  0002656f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007dbd  00000000  00000000  000283cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00030189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  000301dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de8 	.word	0x08000de8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08000de8 	.word	0x08000de8

08000170 <Keypad_init>:



GPIO_configPin_t GConfigPin;
void Keypad_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0


	GConfigPin.GPIO_PinNumber=R0;
 8000174:	4b2f      	ldr	r3, [pc, #188]	; (8000234 <Keypad_init+0xc4>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_INPUT_PU;
 800017a:	4b2e      	ldr	r3, [pc, #184]	; (8000234 <Keypad_init+0xc4>)
 800017c:	2202      	movs	r2, #2
 800017e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000180:	492c      	ldr	r1, [pc, #176]	; (8000234 <Keypad_init+0xc4>)
 8000182:	482d      	ldr	r0, [pc, #180]	; (8000238 <Keypad_init+0xc8>)
 8000184:	f000 fc26 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=R1;
 8000188:	4b2a      	ldr	r3, [pc, #168]	; (8000234 <Keypad_init+0xc4>)
 800018a:	2202      	movs	r2, #2
 800018c:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_INPUT_PU;
 800018e:	4b29      	ldr	r3, [pc, #164]	; (8000234 <Keypad_init+0xc4>)
 8000190:	2202      	movs	r2, #2
 8000192:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000194:	4927      	ldr	r1, [pc, #156]	; (8000234 <Keypad_init+0xc4>)
 8000196:	4828      	ldr	r0, [pc, #160]	; (8000238 <Keypad_init+0xc8>)
 8000198:	f000 fc1c 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=R2;
 800019c:	4b25      	ldr	r3, [pc, #148]	; (8000234 <Keypad_init+0xc4>)
 800019e:	2208      	movs	r2, #8
 80001a0:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_INPUT_PU;
 80001a2:	4b24      	ldr	r3, [pc, #144]	; (8000234 <Keypad_init+0xc4>)
 80001a4:	2202      	movs	r2, #2
 80001a6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 80001a8:	4922      	ldr	r1, [pc, #136]	; (8000234 <Keypad_init+0xc4>)
 80001aa:	4823      	ldr	r0, [pc, #140]	; (8000238 <Keypad_init+0xc8>)
 80001ac:	f000 fc12 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=R3;
 80001b0:	4b20      	ldr	r3, [pc, #128]	; (8000234 <Keypad_init+0xc4>)
 80001b2:	2210      	movs	r2, #16
 80001b4:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_INPUT_PU;
 80001b6:	4b1f      	ldr	r3, [pc, #124]	; (8000234 <Keypad_init+0xc4>)
 80001b8:	2202      	movs	r2, #2
 80001ba:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 80001bc:	491d      	ldr	r1, [pc, #116]	; (8000234 <Keypad_init+0xc4>)
 80001be:	481e      	ldr	r0, [pc, #120]	; (8000238 <Keypad_init+0xc8>)
 80001c0:	f000 fc08 	bl	80009d4 <MCAL_GPIO_Init>
	//	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);

	GConfigPin.GPIO_PinNumber=C0;
 80001c4:	4b1b      	ldr	r3, [pc, #108]	; (8000234 <Keypad_init+0xc4>)
 80001c6:	2220      	movs	r2, #32
 80001c8:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80001ca:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Keypad_init+0xc4>)
 80001cc:	2204      	movs	r2, #4
 80001ce:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <Keypad_init+0xc4>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 80001d6:	4917      	ldr	r1, [pc, #92]	; (8000234 <Keypad_init+0xc4>)
 80001d8:	4817      	ldr	r0, [pc, #92]	; (8000238 <Keypad_init+0xc8>)
 80001da:	f000 fbfb 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=C1;
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <Keypad_init+0xc4>)
 80001e0:	2240      	movs	r2, #64	; 0x40
 80001e2:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Keypad_init+0xc4>)
 80001e6:	2204      	movs	r2, #4
 80001e8:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <Keypad_init+0xc4>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 80001f0:	4910      	ldr	r1, [pc, #64]	; (8000234 <Keypad_init+0xc4>)
 80001f2:	4811      	ldr	r0, [pc, #68]	; (8000238 <Keypad_init+0xc8>)
 80001f4:	f000 fbee 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=C2;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <Keypad_init+0xc4>)
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <Keypad_init+0xc4>)
 8000200:	2204      	movs	r2, #4
 8000202:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <Keypad_init+0xc4>)
 8000206:	2201      	movs	r2, #1
 8000208:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 800020a:	490a      	ldr	r1, [pc, #40]	; (8000234 <Keypad_init+0xc4>)
 800020c:	480a      	ldr	r0, [pc, #40]	; (8000238 <Keypad_init+0xc8>)
 800020e:	f000 fbe1 	bl	80009d4 <MCAL_GPIO_Init>

	GConfigPin.GPIO_PinNumber=C3;
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <Keypad_init+0xc4>)
 8000214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000218:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <Keypad_init+0xc4>)
 800021c:	2204      	movs	r2, #4
 800021e:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <Keypad_init+0xc4>)
 8000222:	2201      	movs	r2, #1
 8000224:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000226:	4903      	ldr	r1, [pc, #12]	; (8000234 <Keypad_init+0xc4>)
 8000228:	4803      	ldr	r0, [pc, #12]	; (8000238 <Keypad_init+0xc8>)
 800022a:	f000 fbd3 	bl	80009d4 <MCAL_GPIO_Init>
	//	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
	//	KEYPAD_PORT =0xff; //active PUR for input pins



}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000028 	.word	0x20000028
 8000238:	40010c00 	.word	0x40010c00

0800023c <Keypad_getkey>:
char Keypad_getkey()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int i,j;
	for(i=0; i<4; i++){
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0ac      	b.n	80003a2 <Keypad_getkey+0x166>


		MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_HIGH);
 8000248:	2201      	movs	r2, #1
 800024a:	2120      	movs	r1, #32
 800024c:	4859      	ldr	r0, [pc, #356]	; (80003b4 <Keypad_getkey+0x178>)
 800024e:	f000 fc50 	bl	8000af2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_HIGH);
 8000252:	2201      	movs	r2, #1
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	4857      	ldr	r0, [pc, #348]	; (80003b4 <Keypad_getkey+0x178>)
 8000258:	f000 fc4b 	bl	8000af2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_HIGH);
 800025c:	2201      	movs	r2, #1
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	4854      	ldr	r0, [pc, #336]	; (80003b4 <Keypad_getkey+0x178>)
 8000262:	f000 fc46 	bl	8000af2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C3, GPIO_HIGH);
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026c:	4851      	ldr	r0, [pc, #324]	; (80003b4 <Keypad_getkey+0x178>)
 800026e:	f000 fc40 	bl	8000af2 <MCAL_GPIO_WritePin>
		//		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));

		MCAL_GPIO_WritePin(KEYPAD_PORT, key_column[i], GPIO_LOW);
 8000272:	4a51      	ldr	r2, [pc, #324]	; (80003b8 <Keypad_getkey+0x17c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027a:	2200      	movs	r2, #0
 800027c:	4619      	mov	r1, r3
 800027e:	484d      	ldr	r0, [pc, #308]	; (80003b4 <Keypad_getkey+0x178>)
 8000280:	f000 fc37 	bl	8000af2 <MCAL_GPIO_WritePin>
		//		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
 8000284:	2300      	movs	r3, #0
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	e084      	b.n	8000394 <Keypad_getkey+0x158>

			if(!(MCAL_GPIO_ReadPin(KEYPAD_PORT, key_row[j]))){
 800028a:	4a4c      	ldr	r2, [pc, #304]	; (80003bc <Keypad_getkey+0x180>)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	4619      	mov	r1, r3
 8000296:	4847      	ldr	r0, [pc, #284]	; (80003b4 <Keypad_getkey+0x178>)
 8000298:	f000 fc42 	bl	8000b20 <MCAL_GPIO_ReadPin>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d16c      	bne.n	800037c <Keypad_getkey+0x140>
				//if(!(keypadPIN & (1<<key_row[j]))){

				while(!(MCAL_GPIO_ReadPin(KEYPAD_PORT, key_row[j])));
 80002a2:	bf00      	nop
 80002a4:	4a45      	ldr	r2, [pc, #276]	; (80003bc <Keypad_getkey+0x180>)
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	4840      	ldr	r0, [pc, #256]	; (80003b4 <Keypad_getkey+0x178>)
 80002b2:	f000 fc35 	bl	8000b20 <MCAL_GPIO_ReadPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f3      	beq.n	80002a4 <Keypad_getkey+0x68>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d85a      	bhi.n	8000378 <Keypad_getkey+0x13c>
 80002c2:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <Keypad_getkey+0x8c>)
 80002c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c8:	080002d9 	.word	0x080002d9
 80002cc:	08000301 	.word	0x08000301
 80002d0:	08000329 	.word	0x08000329
 80002d4:	08000351 	.word	0x08000351

				switch(i){

				case 0:
					if(0 == j) return '7';
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d101      	bne.n	80002e2 <Keypad_getkey+0xa6>
 80002de:	2337      	movs	r3, #55	; 0x37
 80002e0:	e064      	b.n	80003ac <Keypad_getkey+0x170>
					else if(1 == j) return '4';
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d101      	bne.n	80002ec <Keypad_getkey+0xb0>
 80002e8:	2334      	movs	r3, #52	; 0x34
 80002ea:	e05f      	b.n	80003ac <Keypad_getkey+0x170>
					else if(2 == j) return '1';
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d101      	bne.n	80002f6 <Keypad_getkey+0xba>
 80002f2:	2331      	movs	r3, #49	; 0x31
 80002f4:	e05a      	b.n	80003ac <Keypad_getkey+0x170>
					else if(3 == j) return '@';
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d141      	bne.n	8000380 <Keypad_getkey+0x144>
 80002fc:	2340      	movs	r3, #64	; 0x40
 80002fe:	e055      	b.n	80003ac <Keypad_getkey+0x170>
					break;
				case 1:
					if(0 == j) return '8';
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <Keypad_getkey+0xce>
 8000306:	2338      	movs	r3, #56	; 0x38
 8000308:	e050      	b.n	80003ac <Keypad_getkey+0x170>
					else if(1 == j) return '5';
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d101      	bne.n	8000314 <Keypad_getkey+0xd8>
 8000310:	2335      	movs	r3, #53	; 0x35
 8000312:	e04b      	b.n	80003ac <Keypad_getkey+0x170>
					else if(2 == j) return '2';
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d101      	bne.n	800031e <Keypad_getkey+0xe2>
 800031a:	2332      	movs	r3, #50	; 0x32
 800031c:	e046      	b.n	80003ac <Keypad_getkey+0x170>
					else if(3 == j) return '0';
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d12f      	bne.n	8000384 <Keypad_getkey+0x148>
 8000324:	2330      	movs	r3, #48	; 0x30
 8000326:	e041      	b.n	80003ac <Keypad_getkey+0x170>
					break;
				case 2:
					if(0 == j) return '9';
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d101      	bne.n	8000332 <Keypad_getkey+0xf6>
 800032e:	2339      	movs	r3, #57	; 0x39
 8000330:	e03c      	b.n	80003ac <Keypad_getkey+0x170>
					else if(1 == j) return '6';
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d101      	bne.n	800033c <Keypad_getkey+0x100>
 8000338:	2336      	movs	r3, #54	; 0x36
 800033a:	e037      	b.n	80003ac <Keypad_getkey+0x170>
					else if(2 == j) return '3';
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d101      	bne.n	8000346 <Keypad_getkey+0x10a>
 8000342:	2333      	movs	r3, #51	; 0x33
 8000344:	e032      	b.n	80003ac <Keypad_getkey+0x170>
					else if(3 == j) return '=';
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d11d      	bne.n	8000388 <Keypad_getkey+0x14c>
 800034c:	233d      	movs	r3, #61	; 0x3d
 800034e:	e02d      	b.n	80003ac <Keypad_getkey+0x170>
					break;
				case 3:
					if(0 == j) return '/';
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d101      	bne.n	800035a <Keypad_getkey+0x11e>
 8000356:	232f      	movs	r3, #47	; 0x2f
 8000358:	e028      	b.n	80003ac <Keypad_getkey+0x170>
					else if(1 == j) return '*';
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d101      	bne.n	8000364 <Keypad_getkey+0x128>
 8000360:	232a      	movs	r3, #42	; 0x2a
 8000362:	e023      	b.n	80003ac <Keypad_getkey+0x170>
					else if(2 == j) return '-';
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d101      	bne.n	800036e <Keypad_getkey+0x132>
 800036a:	232d      	movs	r3, #45	; 0x2d
 800036c:	e01e      	b.n	80003ac <Keypad_getkey+0x170>
					else if(3 == j) return '+';
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d10b      	bne.n	800038c <Keypad_getkey+0x150>
 8000374:	232b      	movs	r3, #43	; 0x2b
 8000376:	e019      	b.n	80003ac <Keypad_getkey+0x170>
					break;
				default:
					return 'A';
 8000378:	2341      	movs	r3, #65	; 0x41
 800037a:	e017      	b.n	80003ac <Keypad_getkey+0x170>
					break;



				}
			}
 800037c:	bf00      	nop
 800037e:	e006      	b.n	800038e <Keypad_getkey+0x152>
					break;
 8000380:	bf00      	nop
 8000382:	e004      	b.n	800038e <Keypad_getkey+0x152>
					break;
 8000384:	bf00      	nop
 8000386:	e002      	b.n	800038e <Keypad_getkey+0x152>
					break;
 8000388:	bf00      	nop
 800038a:	e000      	b.n	800038e <Keypad_getkey+0x152>
					break;
 800038c:	bf00      	nop
		for(j=0; j<4; j++){
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	3301      	adds	r3, #1
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b03      	cmp	r3, #3
 8000398:	f77f af77 	ble.w	800028a <Keypad_getkey+0x4e>
	for(i=0; i<4; i++){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b03      	cmp	r3, #3
 80003a6:	f77f af4f 	ble.w	8000248 <Keypad_getkey+0xc>
		}


	}

	return 'A';
 80003aa:	2341      	movs	r3, #65	; 0x41

}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000000 	.word	0x20000000

080003c0 <delay_ms>:


#include "Lcd.h"
GPIO_configPin_t PinConfig;

void delay_ms(uint32_t time) {
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	e00b      	b.n	80003e6 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	e002      	b.n	80003da <delay_ms+0x1a>
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2bfe      	cmp	r3, #254	; 0xfe
 80003de:	d9f9      	bls.n	80003d4 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fa      	ldr	r2, [r7, #12]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d3ef      	bcc.n	80003ce <delay_ms+0xe>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <LCD_clear_screen>:

void LCD_clear_screen(){
 80003fa:	b580      	push	{r7, lr}
 80003fc:	af00      	add	r7, sp, #0

//	MCAL_GPIO_WritePort(LCD_PORT, LCD_CLEAR_SCREEN);
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 f9bc 	bl	800077c <LCD_WRITE_COMMAND>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0


	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_HIGH);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <LCD_lcd_kick+0x28>)
 8000414:	f000 fb6d 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL |= (1 << EN_SWITCH);
	delay_ms(50);
 8000418:	2032      	movs	r0, #50	; 0x32
 800041a:	f7ff ffd1 	bl	80003c0 <delay_ms>
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_LOW);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <LCD_lcd_kick+0x28>)
 8000426:	f000 fb64 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << EN_SWITCH);
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d108      	bne.n	800045c <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2b0f      	cmp	r3, #15
 800044e:	d805      	bhi.n	800045c <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	3b80      	subs	r3, #128	; 0x80
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f990 	bl	800077c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d108      	bne.n	8000474 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000462:	79bb      	ldrb	r3, [r7, #6]
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d805      	bhi.n	8000474 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000468:	79bb      	ldrb	r3, [r7, #6]
 800046a:	3b40      	subs	r3, #64	; 0x40
 800046c:	b2db      	uxtb	r3, r3
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f984 	bl	800077c <LCD_WRITE_COMMAND>
		}
	}
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <LCD_INIT>:

void LCD_INIT(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(0x00);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
	 */
	delay_ms(20);
 8000480:	2014      	movs	r0, #20
 8000482:	f7ff ff9d 	bl	80003c0 <delay_ms>
	PinConfig.GPIO_PinNumber=EN_SWITCH;
 8000486:	4b5d      	ldr	r3, [pc, #372]	; (80005fc <LCD_INIT+0x180>)
 8000488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800048c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800048e:	4b5b      	ldr	r3, [pc, #364]	; (80005fc <LCD_INIT+0x180>)
 8000490:	2204      	movs	r2, #4
 8000492:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000494:	4b59      	ldr	r3, [pc, #356]	; (80005fc <LCD_INIT+0x180>)
 8000496:	2201      	movs	r2, #1
 8000498:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800049a:	4958      	ldr	r1, [pc, #352]	; (80005fc <LCD_INIT+0x180>)
 800049c:	4858      	ldr	r0, [pc, #352]	; (8000600 <LCD_INIT+0x184>)
 800049e:	f000 fa99 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=RS_SWITCH;
 80004a2:	4b56      	ldr	r3, [pc, #344]	; (80005fc <LCD_INIT+0x180>)
 80004a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004a8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004aa:	4b54      	ldr	r3, [pc, #336]	; (80005fc <LCD_INIT+0x180>)
 80004ac:	2204      	movs	r2, #4
 80004ae:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80004b0:	4b52      	ldr	r3, [pc, #328]	; (80005fc <LCD_INIT+0x180>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004b6:	4951      	ldr	r1, [pc, #324]	; (80005fc <LCD_INIT+0x180>)
 80004b8:	4851      	ldr	r0, [pc, #324]	; (8000600 <LCD_INIT+0x184>)
 80004ba:	f000 fa8b 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=RW_SWITCH;
 80004be:	4b4f      	ldr	r3, [pc, #316]	; (80005fc <LCD_INIT+0x180>)
 80004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80004c6:	4b4d      	ldr	r3, [pc, #308]	; (80005fc <LCD_INIT+0x180>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80004cc:	4b4b      	ldr	r3, [pc, #300]	; (80005fc <LCD_INIT+0x180>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80004d2:	494a      	ldr	r1, [pc, #296]	; (80005fc <LCD_INIT+0x180>)
 80004d4:	484a      	ldr	r0, [pc, #296]	; (8000600 <LCD_INIT+0x184>)
 80004d6:	f000 fa7d 	bl	80009d4 <MCAL_GPIO_Init>


	//	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);

	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_LOW);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e0:	4847      	ldr	r0, [pc, #284]	; (8000600 <LCD_INIT+0x184>)
 80004e2:	f000 fb06 	bl	8000af2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4844      	ldr	r0, [pc, #272]	; (8000600 <LCD_INIT+0x184>)
 80004ee:	f000 fb00 	bl	8000af2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4841      	ldr	r0, [pc, #260]	; (8000600 <LCD_INIT+0x184>)
 80004fa:	f000 fafa 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);

	PinConfig.GPIO_PinNumber=GPIO_PIN0;
 80004fe:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <LCD_INIT+0x180>)
 8000500:	2201      	movs	r2, #1
 8000502:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <LCD_INIT+0x180>)
 8000506:	2204      	movs	r2, #4
 8000508:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800050a:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <LCD_INIT+0x180>)
 800050c:	2201      	movs	r2, #1
 800050e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000510:	493a      	ldr	r1, [pc, #232]	; (80005fc <LCD_INIT+0x180>)
 8000512:	483b      	ldr	r0, [pc, #236]	; (8000600 <LCD_INIT+0x184>)
 8000514:	f000 fa5e 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN1;
 8000518:	4b38      	ldr	r3, [pc, #224]	; (80005fc <LCD_INIT+0x180>)
 800051a:	2202      	movs	r2, #2
 800051c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800051e:	4b37      	ldr	r3, [pc, #220]	; (80005fc <LCD_INIT+0x180>)
 8000520:	2204      	movs	r2, #4
 8000522:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000524:	4b35      	ldr	r3, [pc, #212]	; (80005fc <LCD_INIT+0x180>)
 8000526:	2201      	movs	r2, #1
 8000528:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800052a:	4934      	ldr	r1, [pc, #208]	; (80005fc <LCD_INIT+0x180>)
 800052c:	4834      	ldr	r0, [pc, #208]	; (8000600 <LCD_INIT+0x184>)
 800052e:	f000 fa51 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN2;
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <LCD_INIT+0x180>)
 8000534:	2204      	movs	r2, #4
 8000536:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <LCD_INIT+0x180>)
 800053a:	2204      	movs	r2, #4
 800053c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <LCD_INIT+0x180>)
 8000540:	2201      	movs	r2, #1
 8000542:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000544:	492d      	ldr	r1, [pc, #180]	; (80005fc <LCD_INIT+0x180>)
 8000546:	482e      	ldr	r0, [pc, #184]	; (8000600 <LCD_INIT+0x184>)
 8000548:	f000 fa44 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN3;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <LCD_INIT+0x180>)
 800054e:	2208      	movs	r2, #8
 8000550:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <LCD_INIT+0x180>)
 8000554:	2204      	movs	r2, #4
 8000556:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <LCD_INIT+0x180>)
 800055a:	2201      	movs	r2, #1
 800055c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800055e:	4927      	ldr	r1, [pc, #156]	; (80005fc <LCD_INIT+0x180>)
 8000560:	4827      	ldr	r0, [pc, #156]	; (8000600 <LCD_INIT+0x184>)
 8000562:	f000 fa37 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN4;
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <LCD_INIT+0x180>)
 8000568:	2210      	movs	r2, #16
 800056a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <LCD_INIT+0x180>)
 800056e:	2204      	movs	r2, #4
 8000570:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <LCD_INIT+0x180>)
 8000574:	2201      	movs	r2, #1
 8000576:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000578:	4920      	ldr	r1, [pc, #128]	; (80005fc <LCD_INIT+0x180>)
 800057a:	4821      	ldr	r0, [pc, #132]	; (8000600 <LCD_INIT+0x184>)
 800057c:	f000 fa2a 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN5;
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <LCD_INIT+0x180>)
 8000582:	2220      	movs	r2, #32
 8000584:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <LCD_INIT+0x180>)
 8000588:	2204      	movs	r2, #4
 800058a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <LCD_INIT+0x180>)
 800058e:	2201      	movs	r2, #1
 8000590:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000592:	491a      	ldr	r1, [pc, #104]	; (80005fc <LCD_INIT+0x180>)
 8000594:	481a      	ldr	r0, [pc, #104]	; (8000600 <LCD_INIT+0x184>)
 8000596:	f000 fa1d 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN6;
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <LCD_INIT+0x180>)
 800059c:	2240      	movs	r2, #64	; 0x40
 800059e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <LCD_INIT+0x180>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <LCD_INIT+0x180>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80005ac:	4913      	ldr	r1, [pc, #76]	; (80005fc <LCD_INIT+0x180>)
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <LCD_INIT+0x184>)
 80005b0:	f000 fa10 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN7;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <LCD_INIT+0x180>)
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <LCD_INIT+0x180>)
 80005bc:	2204      	movs	r2, #4
 80005be:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <LCD_INIT+0x180>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LCD_INIT+0x180>)
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <LCD_INIT+0x184>)
 80005ca:	f000 fa03 	bl	80009d4 <MCAL_GPIO_Init>
	//DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80005ce:	200f      	movs	r0, #15
 80005d0:	f7ff fef6 	bl	80003c0 <delay_ms>
	LCD_clear_screen();
 80005d4:	f7ff ff11 	bl	80003fa <LCD_clear_screen>
	delay_ms(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff fef1 	bl	80003c0 <delay_ms>
#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80005de:	2038      	movs	r0, #56	; 0x38
 80005e0:	f000 f8cc 	bl	800077c <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80005e4:	2006      	movs	r0, #6
 80005e6:	f000 f8c9 	bl	800077c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80005ea:	2080      	movs	r0, #128	; 0x80
 80005ec:	f000 f8c6 	bl	800077c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80005f0:	200f      	movs	r0, #15
 80005f2:	f000 f8c3 	bl	800077c <LCD_WRITE_COMMAND>

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	40010800 	.word	0x40010800

08000604 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	PinConfig.GPIO_PinNumber=GPIO_PIN0;
 8000608:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800060a:	2201      	movs	r2, #1
 800060c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800060e:	4b59      	ldr	r3, [pc, #356]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000610:	2201      	movs	r2, #1
 8000612:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000616:	4858      	ldr	r0, [pc, #352]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000618:	f000 f9dc 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN1;
 800061c:	4b55      	ldr	r3, [pc, #340]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800061e:	2202      	movs	r2, #2
 8000620:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000624:	2201      	movs	r2, #1
 8000626:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000628:	4952      	ldr	r1, [pc, #328]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800062a:	4853      	ldr	r0, [pc, #332]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 800062c:	f000 f9d2 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN2;
 8000630:	4b50      	ldr	r3, [pc, #320]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000632:	2204      	movs	r2, #4
 8000634:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000638:	2201      	movs	r2, #1
 800063a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800063c:	494d      	ldr	r1, [pc, #308]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800063e:	484e      	ldr	r0, [pc, #312]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000640:	f000 f9c8 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN3;
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000646:	2208      	movs	r2, #8
 8000648:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800064a:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800064c:	2201      	movs	r2, #1
 800064e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000650:	4948      	ldr	r1, [pc, #288]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000652:	4849      	ldr	r0, [pc, #292]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000654:	f000 f9be 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN4;
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800065a:	2210      	movs	r2, #16
 800065c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800065e:	4b45      	ldr	r3, [pc, #276]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000660:	2201      	movs	r2, #1
 8000662:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000664:	4943      	ldr	r1, [pc, #268]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000666:	4844      	ldr	r0, [pc, #272]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000668:	f000 f9b4 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN5;
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800066e:	2220      	movs	r2, #32
 8000670:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000672:	4b40      	ldr	r3, [pc, #256]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000674:	2201      	movs	r2, #1
 8000676:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000678:	493e      	ldr	r1, [pc, #248]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800067a:	483f      	ldr	r0, [pc, #252]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 800067c:	f000 f9aa 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN6;
 8000680:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000682:	2240      	movs	r2, #64	; 0x40
 8000684:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 8000686:	4b3b      	ldr	r3, [pc, #236]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000688:	2201      	movs	r2, #1
 800068a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800068c:	4939      	ldr	r1, [pc, #228]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800068e:	483a      	ldr	r0, [pc, #232]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000690:	f000 f9a0 	bl	80009d4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber=GPIO_PIN7;
 8000694:	4b37      	ldr	r3, [pc, #220]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_Mode=GPIO_MODE_INPUT_FLO;
 800069a:	4b36      	ldr	r3, [pc, #216]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80006a0:	4934      	ldr	r1, [pc, #208]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006a2:	4835      	ldr	r0, [pc, #212]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006a4:	f000 f996 	bl	80009d4 <MCAL_GPIO_Init>
	//	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);

	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_HIGH);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	4832      	ldr	r0, [pc, #200]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006b0:	f000 fa1f 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL |= (1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ba:	482f      	ldr	r0, [pc, #188]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006bc:	f000 fa19 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RS_SWITCH);

	LCD_lcd_kick();
 80006c0:	f7ff fea2 	bl	8000408 <LCD_lcd_kick>

		PinConfig.GPIO_PinNumber=GPIO_PIN0;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80006d0:	4928      	ldr	r1, [pc, #160]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006d2:	4829      	ldr	r0, [pc, #164]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006d4:	f000 f97e 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN1;
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006da:	2202      	movs	r2, #2
 80006dc:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80006e4:	4923      	ldr	r1, [pc, #140]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006e6:	4824      	ldr	r0, [pc, #144]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006e8:	f000 f974 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN2;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 80006f8:	491e      	ldr	r1, [pc, #120]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 80006fa:	481f      	ldr	r0, [pc, #124]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 80006fc:	f000 f96a 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN3;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000702:	2208      	movs	r2, #8
 8000704:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000708:	2204      	movs	r2, #4
 800070a:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800070c:	4919      	ldr	r1, [pc, #100]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000710:	f000 f960 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN4;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000716:	2210      	movs	r2, #16
 8000718:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800071c:	2204      	movs	r2, #4
 800071e:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000720:	4914      	ldr	r1, [pc, #80]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000722:	4815      	ldr	r0, [pc, #84]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000724:	f000 f956 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN5;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800072a:	2220      	movs	r2, #32
 800072c:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000730:	2204      	movs	r2, #4
 8000732:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000734:	490f      	ldr	r1, [pc, #60]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000738:	f000 f94c 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN6;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800073e:	2240      	movs	r2, #64	; 0x40
 8000740:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000744:	2204      	movs	r2, #4
 8000746:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 8000748:	490a      	ldr	r1, [pc, #40]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 800074c:	f000 f942 	bl	80009d4 <MCAL_GPIO_Init>

		PinConfig.GPIO_PinNumber=GPIO_PIN7;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000752:	2280      	movs	r2, #128	; 0x80
 8000754:	801a      	strh	r2, [r3, #0]
		PinConfig.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 8000758:	2204      	movs	r2, #4
 800075a:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(LCD_PORT, &PinConfig);
 800075c:	4905      	ldr	r1, [pc, #20]	; (8000774 <LCD_check_lcd_isbusy+0x170>)
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 8000760:	f000 f938 	bl	80009d4 <MCAL_GPIO_Init>

//		DataDir_LCD_PORT |= (0xFF<<DATA_shift);


	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <LCD_check_lcd_isbusy+0x174>)
 800076c:	f000 f9c1 	bl	8000af2 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000002c 	.word	0x2000002c
 8000778:	40010800 	.word	0x40010800

0800077c <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000786:	f7ff ff3d 	bl	8000604 <LCD_check_lcd_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	b29b      	uxth	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <LCD_WRITE_COMMAND+0x44>)
 8000792:	f000 f9a0 	bl	8000ad6 <MCAL_GPIO_WritePort>
	//		LCD_PORT = command;
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <LCD_WRITE_COMMAND+0x44>)
 800079e:	f000 f9a8 	bl	8000af2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <LCD_WRITE_COMMAND+0x44>)
 80007aa:	f000 f9a2 	bl	8000af2 <MCAL_GPIO_WritePin>
	//		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fe06 	bl	80003c0 <delay_ms>
	LCD_lcd_kick();
 80007b4:	f7ff fe28 	bl	8000408 <LCD_lcd_kick>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_LOW);
	//		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
	LCD_lcd_kick();
#endif
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010800 	.word	0x40010800

080007c4 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, character);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LCD_WRITE_CHAR+0x40>)
 80007d6:	f000 f97e 	bl	8000ad6 <MCAL_GPIO_WritePort>
	//		LCD_PORT = character;

	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_LOW);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <LCD_WRITE_CHAR+0x40>)
 80007e2:	f000 f986 	bl	8000af2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_HIGH);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <LCD_WRITE_CHAR+0x40>)
 80007ee:	f000 f980 	bl	8000af2 <MCAL_GPIO_WritePin>
	//		LCD_CTRL &= ~(1 << RW_SWITCH);
	//		LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fde4 	bl	80003c0 <delay_ms>
	LCD_lcd_kick();
 80007f8:	f7ff fe06 	bl	8000408 <LCD_lcd_kick>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_HIGH);
	//		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
	//		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
	LCD_lcd_kick ();
#endif
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40010800 	.word	0x40010800

08000808 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000814:	e01c      	b.n	8000850 <LCD_WRITE_STRING+0x48>
		count++;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffcd 	bl	80007c4 <LCD_WRITE_CHAR>
		if (count == 16)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b10      	cmp	r3, #16
 800082e:	d104      	bne.n	800083a <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000830:	2100      	movs	r1, #0
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff fdfe 	bl	8000434 <LCD_GOTO_XY>
 8000838:	e00a      	b.n	8000850 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b20      	cmp	r3, #32
 800083e:	d107      	bne.n	8000850 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000840:	f7ff fddb 	bl	80003fa <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000844:	2100      	movs	r1, #0
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff fdf4 	bl	8000434 <LCD_GOTO_XY>
			count = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1de      	bne.n	8000816 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <get_Pin_Postion>:

#include "STM32F103x8_gpio_driver.h"



uint8_t get_Pin_Postion(uint16_t GPIO_PinNumber ){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PinNumber){
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000874:	f000 80a5 	beq.w	80009c2 <get_Pin_Postion+0x15e>
 8000878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800087c:	f300 80a3 	bgt.w	80009c6 <get_Pin_Postion+0x162>
 8000880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000884:	f000 809b 	beq.w	80009be <get_Pin_Postion+0x15a>
 8000888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800088c:	f300 809b 	bgt.w	80009c6 <get_Pin_Postion+0x162>
 8000890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000894:	f000 8091 	beq.w	80009ba <get_Pin_Postion+0x156>
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089c:	f300 8093 	bgt.w	80009c6 <get_Pin_Postion+0x162>
 80008a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008a4:	f000 8087 	beq.w	80009b6 <get_Pin_Postion+0x152>
 80008a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ac:	f300 808b 	bgt.w	80009c6 <get_Pin_Postion+0x162>
 80008b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b4:	d07d      	beq.n	80009b2 <get_Pin_Postion+0x14e>
 80008b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ba:	f300 8084 	bgt.w	80009c6 <get_Pin_Postion+0x162>
 80008be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c2:	d074      	beq.n	80009ae <get_Pin_Postion+0x14a>
 80008c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008c8:	dc7d      	bgt.n	80009c6 <get_Pin_Postion+0x162>
 80008ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ce:	d06c      	beq.n	80009aa <get_Pin_Postion+0x146>
 80008d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d4:	dc77      	bgt.n	80009c6 <get_Pin_Postion+0x162>
 80008d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008da:	d064      	beq.n	80009a6 <get_Pin_Postion+0x142>
 80008dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e0:	dc71      	bgt.n	80009c6 <get_Pin_Postion+0x162>
 80008e2:	2b80      	cmp	r3, #128	; 0x80
 80008e4:	d05d      	beq.n	80009a2 <get_Pin_Postion+0x13e>
 80008e6:	2b80      	cmp	r3, #128	; 0x80
 80008e8:	dc6d      	bgt.n	80009c6 <get_Pin_Postion+0x162>
 80008ea:	2b20      	cmp	r3, #32
 80008ec:	dc48      	bgt.n	8000980 <get_Pin_Postion+0x11c>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dd69      	ble.n	80009c6 <get_Pin_Postion+0x162>
 80008f2:	3b01      	subs	r3, #1
 80008f4:	2b1f      	cmp	r3, #31
 80008f6:	d866      	bhi.n	80009c6 <get_Pin_Postion+0x162>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <get_Pin_Postion+0x9c>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000987 	.word	0x08000987
 8000904:	0800098b 	.word	0x0800098b
 8000908:	080009c7 	.word	0x080009c7
 800090c:	0800098f 	.word	0x0800098f
 8000910:	080009c7 	.word	0x080009c7
 8000914:	080009c7 	.word	0x080009c7
 8000918:	080009c7 	.word	0x080009c7
 800091c:	08000993 	.word	0x08000993
 8000920:	080009c7 	.word	0x080009c7
 8000924:	080009c7 	.word	0x080009c7
 8000928:	080009c7 	.word	0x080009c7
 800092c:	080009c7 	.word	0x080009c7
 8000930:	080009c7 	.word	0x080009c7
 8000934:	080009c7 	.word	0x080009c7
 8000938:	080009c7 	.word	0x080009c7
 800093c:	08000997 	.word	0x08000997
 8000940:	080009c7 	.word	0x080009c7
 8000944:	080009c7 	.word	0x080009c7
 8000948:	080009c7 	.word	0x080009c7
 800094c:	080009c7 	.word	0x080009c7
 8000950:	080009c7 	.word	0x080009c7
 8000954:	080009c7 	.word	0x080009c7
 8000958:	080009c7 	.word	0x080009c7
 800095c:	080009c7 	.word	0x080009c7
 8000960:	080009c7 	.word	0x080009c7
 8000964:	080009c7 	.word	0x080009c7
 8000968:	080009c7 	.word	0x080009c7
 800096c:	080009c7 	.word	0x080009c7
 8000970:	080009c7 	.word	0x080009c7
 8000974:	080009c7 	.word	0x080009c7
 8000978:	080009c7 	.word	0x080009c7
 800097c:	0800099b 	.word	0x0800099b
 8000980:	2b40      	cmp	r3, #64	; 0x40
 8000982:	d00c      	beq.n	800099e <get_Pin_Postion+0x13a>
 8000984:	e01f      	b.n	80009c6 <get_Pin_Postion+0x162>
	case GPIO_PIN0:
		return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e01e      	b.n	80009c8 <get_Pin_Postion+0x164>
		break;
	case GPIO_PIN1:
			return 4;
 800098a:	2304      	movs	r3, #4
 800098c:	e01c      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN2:
			return 8;
 800098e:	2308      	movs	r3, #8
 8000990:	e01a      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN3:
			return 12;
 8000992:	230c      	movs	r3, #12
 8000994:	e018      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN4:
			return 16;
 8000996:	2310      	movs	r3, #16
 8000998:	e016      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN5:
			return 20;
 800099a:	2314      	movs	r3, #20
 800099c:	e014      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN6:
			return 24;
 800099e:	2318      	movs	r3, #24
 80009a0:	e012      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN7:
			return 28;
 80009a2:	231c      	movs	r3, #28
 80009a4:	e010      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN8:
			return 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e00e      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN9:
			return 4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	e00c      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN10:
			return 8;
 80009ae:	2308      	movs	r3, #8
 80009b0:	e00a      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN11:
			return 12;
 80009b2:	230c      	movs	r3, #12
 80009b4:	e008      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN12:
			return 16;
 80009b6:	2310      	movs	r3, #16
 80009b8:	e006      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN13:
			return 20;
 80009ba:	2314      	movs	r3, #20
 80009bc:	e004      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN14:
			return 24;
 80009be:	2318      	movs	r3, #24
 80009c0:	e002      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN15:
			return 28;
 80009c2:	231c      	movs	r3, #28
 80009c4:	e000      	b.n	80009c8 <get_Pin_Postion+0x164>
			break;


	}

	return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MCAL_GPIO_Init>:
*              when configure the GPIO, first check TRM and data sheet of MCU and kit to know available Ports
*/


void MCAL_GPIO_Init(GPIOx_typeDef* GPIOx, GPIO_configPin_t* PinConfig)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]

	volatile uint32_t *cofigReg =NULL;  //((void *)0)
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
	cofigReg = ((PinConfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	d801      	bhi.n	80009ee <MCAL_GPIO_Init+0x1a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	e001      	b.n	80009f2 <MCAL_GPIO_Init+0x1e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3304      	adds	r3, #4
 80009f2:	60bb      	str	r3, [r7, #8]
	*cofigReg &= ~(0xf<<get_Pin_Postion(PinConfig->GPIO_PinNumber)) ; //Reset the nibble in CRL Or CRH
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff33 	bl	8000864 <get_Pin_Postion>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	230f      	movs	r3, #15
 8000a04:	4093      	lsls	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	601a      	str	r2, [r3, #0]
	uint8_t pinConfigLoc = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	789b      	ldrb	r3, [r3, #2]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d00b      	beq.n	8000a36 <MCAL_GPIO_Init+0x62>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d007      	beq.n	8000a36 <MCAL_GPIO_Init+0x62>
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	789b      	ldrb	r3, [r3, #2]
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d003      	beq.n	8000a36 <MCAL_GPIO_Init+0x62>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d10e      	bne.n	8000a54 <MCAL_GPIO_Init+0x80>
		//00: General purpose output push-pull (4-4=0)
		//01: General purpose output Open-drain (5-4=1)
		//10: Alternate function output Push-pull (6-4=1)
		//11: Alternate function output Open-drain (7-4=1)

		pinConfigLoc = ( ( (PinConfig->GPIO_Mode)-4 )<<2 | (PinConfig->GPIO_Output_Speed) ) & 0xf;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	78db      	ldrb	r3, [r3, #3]
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 030f 	and.w	r3, r3, #15
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e02e      	b.n	8000ab2 <MCAL_GPIO_Init+0xde>
		01: Floating input (reset state)
		10: Input with pull-up / pull-dow*/



			if((PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	789b      	ldrb	r3, [r3, #2]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d10e      	bne.n	8000a7a <MCAL_GPIO_Init+0xa6>
			{   //Pull up (set bit according to pin number)
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	8812      	ldrh	r2, [r2, #0]
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60da      	str	r2, [r3, #12]
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e01b      	b.n	8000ab2 <MCAL_GPIO_Init+0xde>
			}
			else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PD)// Pull down (reset bit according to pin number)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d110      	bne.n	8000aa4 <MCAL_GPIO_Init+0xd0>
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	43d2      	mvns	r2, r2
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60da      	str	r2, [r3, #12]
				pinConfigLoc = ((PinConfig->GPIO_Mode-1)<<2 | (0x00)) & 0xf;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	789b      	ldrb	r3, [r3, #2]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e006      	b.n	8000ab2 <MCAL_GPIO_Init+0xde>
			}
			else{
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	73fb      	strb	r3, [r7, #15]

			}

	}
// Set configuration to CRL OR CRH
(*cofigReg) |= ((pinConfigLoc) << get_Pin_Postion(PinConfig->GPIO_PinNumber)) ;
 8000ab2:	7bfc      	ldrb	r4, [r7, #15]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fed3 	bl	8000864 <get_Pin_Postion>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	fa04 f203 	lsl.w	r2, r4, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	601a      	str	r2, [r3, #0]


}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd90      	pop	{r4, r7, pc}

08000ad6 <MCAL_GPIO_WritePort>:
* @param [in] -uint8_t value the value to be written
* @retval     -None
* Note        -The argument MUST be AS Reference
*/
void MCAL_GPIO_WritePort(GPIOx_typeDef* GPIOx,uint16_t value)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	807b      	strh	r3, [r7, #2]
//	GPIOx->ODR &= ~(0xff);
	GPIOx->ODR = (uint32_t)value ;
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60da      	str	r2, [r3, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <MCAL_GPIO_WritePin>:
* @param [in] -pin number @ref GPIO_pinNumber_define
* @retval     -None
* Note        -The argument MUST be AS Reference
*/
void MCAL_GPIO_WritePin(GPIOx_typeDef* GPIOx,uint16_t PinNumber,uint8_t Pinvalue)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	807b      	strh	r3, [r7, #2]
 8000afe:	4613      	mov	r3, r2
 8000b00:	707b      	strb	r3, [r7, #1]

	if(GPIO_HIGH == Pinvalue){
 8000b02:	787b      	ldrb	r3, [r7, #1]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d103      	bne.n	8000b10 <MCAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000b08:	887a      	ldrh	r2, [r7, #2]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	611a      	str	r2, [r3, #16]
	}
	else {
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000b0e:	e002      	b.n	8000b16 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000b10:	887a      	ldrh	r2, [r7, #2]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	615a      	str	r2, [r3, #20]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <MCAL_GPIO_ReadPin>:
* @param [in] -pin number @ref GPIO_pinNumber_define
* @retval     -uint8_t GPIO_HIGH or GPIO_LOW according to the status of pin
* Note        -The argument MUST be AS Reference
*/
uint8_t MCAL_GPIO_ReadPin(GPIOx_typeDef* GPIOx, uint16_t PinNumber)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	if( ( (GPIOx->IDR)&PinNumber ) !=(uint32_t) GPIO_LOW)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	4013      	ands	r3, r2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MCAL_GPIO_ReadPin+0x1c>
	{
		return GPIO_HIGH;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <MCAL_GPIO_ReadPin+0x1e>
	}
	else{
		return GPIO_LOW;
 8000b3c:	2300      	movs	r3, #0
	}
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <pseudo_delay>:
#define EIGHT 0x00
#define NINE 0x10

GPIO_configPin_t GConfigPin;

void pseudo_delay(uint32_t time){
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e00b      	b.n	8000b6e <pseudo_delay+0x26>
		for (j = 0; j < 255; j++);
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	e002      	b.n	8000b62 <pseudo_delay+0x1a>
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2bfe      	cmp	r3, #254	; 0xfe
 8000b66:	d9f9      	bls.n	8000b5c <pseudo_delay+0x14>
	for (i = 0; i < time; i++)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d3ef      	bcc.n	8000b56 <pseudo_delay+0xe>
}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <GPIO_init>:

void GPIO_init(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0



	GConfigPin.GPIO_PinNumber=GPIO_PIN9;
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <GPIO_init+0xcc>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <GPIO_init+0xcc>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <GPIO_init+0xcc>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000b9c:	492c      	ldr	r1, [pc, #176]	; (8000c50 <GPIO_init+0xcc>)
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <GPIO_init+0xd0>)
 8000ba0:	f7ff ff18 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN10;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <GPIO_init+0xcc>)
 8000ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000baa:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <GPIO_init+0xcc>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <GPIO_init+0xcc>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000bb8:	4925      	ldr	r1, [pc, #148]	; (8000c50 <GPIO_init+0xcc>)
 8000bba:	4826      	ldr	r0, [pc, #152]	; (8000c54 <GPIO_init+0xd0>)
 8000bbc:	f7ff ff0a 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN11;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <GPIO_init+0xcc>)
 8000bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc6:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000bc8:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <GPIO_init+0xcc>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <GPIO_init+0xcc>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000bd4:	491e      	ldr	r1, [pc, #120]	; (8000c50 <GPIO_init+0xcc>)
 8000bd6:	481f      	ldr	r0, [pc, #124]	; (8000c54 <GPIO_init+0xd0>)
 8000bd8:	f7ff fefc 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN12;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <GPIO_init+0xcc>)
 8000bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be2:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <GPIO_init+0xcc>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <GPIO_init+0xcc>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000bf0:	4917      	ldr	r1, [pc, #92]	; (8000c50 <GPIO_init+0xcc>)
 8000bf2:	4818      	ldr	r0, [pc, #96]	; (8000c54 <GPIO_init+0xd0>)
 8000bf4:	f7ff feee 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN13;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <GPIO_init+0xcc>)
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <GPIO_init+0xcc>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <GPIO_init+0xcc>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000c0c:	4910      	ldr	r1, [pc, #64]	; (8000c50 <GPIO_init+0xcc>)
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <GPIO_init+0xd0>)
 8000c10:	f7ff fee0 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN14;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <GPIO_init+0xcc>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1a:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <GPIO_init+0xcc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <GPIO_init+0xcc>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000c28:	4909      	ldr	r1, [pc, #36]	; (8000c50 <GPIO_init+0xcc>)
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <GPIO_init+0xd0>)
 8000c2c:	f7ff fed2 	bl	80009d4 <MCAL_GPIO_Init>
	GConfigPin.GPIO_PinNumber=GPIO_PIN15;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <GPIO_init+0xcc>)
 8000c32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c36:	801a      	strh	r2, [r3, #0]
	GConfigPin.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <GPIO_init+0xcc>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	709a      	strb	r2, [r3, #2]
	GConfigPin.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <GPIO_init+0xcc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(KEYPAD_PORT, &GConfigPin);
 8000c44:	4902      	ldr	r1, [pc, #8]	; (8000c50 <GPIO_init+0xcc>)
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <GPIO_init+0xd0>)
 8000c48:	f7ff fec4 	bl	80009d4 <MCAL_GPIO_Init>




}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000028 	.word	0x20000028
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <main>:

int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000c5e:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <main+0xdc>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <main+0xdc>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <main+0xdc>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <main+0xdc>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 8000c76:	f7ff fc01 	bl	800047c <LCD_INIT>
	GPIO_init();
 8000c7a:	f7ff ff83 	bl	8000b84 <GPIO_init>

	unsigned char key_pressed;
	LCD_WRITE_STRING("1234");
 8000c7e:	482e      	ldr	r0, [pc, #184]	; (8000d38 <main+0xe0>)
 8000c80:	f7ff fdc2 	bl	8000808 <LCD_WRITE_STRING>
	pseudo_delay(30);
 8000c84:	201e      	movs	r0, #30
 8000c86:	f7ff ff5f 	bl	8000b48 <pseudo_delay>
	LCD_clear_screen();
 8000c8a:	f7ff fbb6 	bl	80003fa <LCD_clear_screen>


	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000c8e:	4a2b      	ldr	r2, [pc, #172]	; (8000d3c <main+0xe4>)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c96:	c303      	stmia	r3!, {r0, r1}
 8000c98:	801a      	strh	r2, [r3, #0]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	0c12      	lsrs	r2, r2, #16
 8000c9e:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <main+0xe8>)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca6:	c303      	stmia	r3!, {r0, r1}
 8000ca8:	801a      	strh	r2, [r3, #0]
 8000caa:	3302      	adds	r3, #2
 8000cac:	0c12      	lsrs	r2, r2, #16
 8000cae:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	77fb      	strb	r3, [r7, #31]
 8000cb4:	e01b      	b.n	8000cee <main+0x96>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000cb6:	7ffb      	ldrb	r3, [r7, #31]
 8000cb8:	f107 0220 	add.w	r2, r7, #32
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd7e 	bl	80007c4 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 8000cc8:	7ffb      	ldrb	r3, [r7, #31]
 8000cca:	f107 0220 	add.w	r2, r7, #32
 8000cce:	4413      	add	r3, r2
 8000cd0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <main+0xec>)
 8000cde:	f7ff fefa 	bl	8000ad6 <MCAL_GPIO_WritePort>
		pseudo_delay(100);
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f7ff ff30 	bl	8000b48 <pseudo_delay>
	for (unsigned char i = 0; i < 11; i++) {
 8000ce8:	7ffb      	ldrb	r3, [r7, #31]
 8000cea:	3301      	adds	r3, #1
 8000cec:	77fb      	strb	r3, [r7, #31]
 8000cee:	7ffb      	ldrb	r3, [r7, #31]
 8000cf0:	2b0a      	cmp	r3, #10
 8000cf2:	d9e0      	bls.n	8000cb6 <main+0x5e>
	}
	/* Loop forever */

	LCD_clear_screen();
 8000cf4:	f7ff fb81 	bl	80003fa <LCD_clear_screen>
	Keypad_init();
 8000cf8:	f7ff fa3a 	bl	8000170 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000cfc:	4812      	ldr	r0, [pc, #72]	; (8000d48 <main+0xf0>)
 8000cfe:	f7ff fd83 	bl	8000808 <LCD_WRITE_STRING>
	pseudo_delay(30);
 8000d02:	201e      	movs	r0, #30
 8000d04:	f7ff ff20 	bl	8000b48 <pseudo_delay>
	LCD_clear_screen();
 8000d08:	f7ff fb77 	bl	80003fa <LCD_clear_screen>

	while(1){


		key_pressed = Keypad_getkey();
 8000d0c:	f7ff fa96 	bl	800023c <Keypad_getkey>
 8000d10:	4603      	mov	r3, r0
 8000d12:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000d14:	7fbb      	ldrb	r3, [r7, #30]
 8000d16:	2b40      	cmp	r3, #64	; 0x40
 8000d18:	d002      	beq.n	8000d20 <main+0xc8>
 8000d1a:	2b41      	cmp	r3, #65	; 0x41
 8000d1c:	d103      	bne.n	8000d26 <main+0xce>
		case 'A':
			break;
 8000d1e:	e007      	b.n	8000d30 <main+0xd8>
		case '@':
			LCD_clear_screen();
 8000d20:	f7ff fb6b 	bl	80003fa <LCD_clear_screen>
			break;
 8000d24:	e004      	b.n	8000d30 <main+0xd8>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000d26:	7fbb      	ldrb	r3, [r7, #30]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fd4b 	bl	80007c4 <LCD_WRITE_CHAR>
			break;
 8000d2e:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000d30:	e7ec      	b.n	8000d0c <main+0xb4>
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	08000e00 	.word	0x08000e00
 8000d3c:	08000e18 	.word	0x08000e18
 8000d40:	08000e24 	.word	0x08000e24
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	08000e08 	.word	0x08000e08

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff ff6b 	bl	8000c58 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	08000e38 	.word	0x08000e38
  ldr r2, =_sbss
 8000d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d98:	20000030 	.word	0x20000030

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	2600      	movs	r6, #0
 8000da4:	4d0c      	ldr	r5, [pc, #48]	; (8000dd8 <__libc_init_array+0x38>)
 8000da6:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	42a6      	cmp	r6, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	f000 f81a 	bl	8000de8 <_init>
 8000db4:	2600      	movs	r6, #0
 8000db6:	4d0a      	ldr	r5, [pc, #40]	; (8000de0 <__libc_init_array+0x40>)
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <__libc_init_array+0x44>)
 8000dba:	1b64      	subs	r4, r4, r5
 8000dbc:	10a4      	asrs	r4, r4, #2
 8000dbe:	42a6      	cmp	r6, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc8:	4798      	blx	r3
 8000dca:	3601      	adds	r6, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd2:	4798      	blx	r3
 8000dd4:	3601      	adds	r6, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	08000e30 	.word	0x08000e30
 8000ddc:	08000e30 	.word	0x08000e30
 8000de0:	08000e30 	.word	0x08000e30
 8000de4:	08000e34 	.word	0x08000e34

08000de8 <_init>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr

08000df4 <_fini>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	bf00      	nop
 8000df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfa:	bc08      	pop	{r3}
 8000dfc:	469e      	mov	lr, r3
 8000dfe:	4770      	bx	lr
