
unit8_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000023be  00002452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  0000246c  2**0
                  ALLOC
  3 .stab         000020a0  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121b  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005727  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_12>
      34:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <main>
      8a:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MCAL_SPI_Init>:



static void (*SPI_ISR)(void);

void MCAL_SPI_Init(SPI_ConfigType* config){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <MCAL_SPI_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02

	u8 tempConfig = 0;
     cae:	19 82       	std	Y+1, r1	; 0x01
	//Set mode Master/Slave
	tempConfig |= (config->mode)<<MSTR;
     cb0:	ea 81       	ldd	r30, Y+2	; 0x02
     cb2:	fb 81       	ldd	r31, Y+3	; 0x03
     cb4:	80 81       	ld	r24, Z
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	82 95       	swap	r24
     cbc:	92 95       	swap	r25
     cbe:	90 7f       	andi	r25, 0xF0	; 240
     cc0:	98 27       	eor	r25, r24
     cc2:	80 7f       	andi	r24, 0xF0	; 240
     cc4:	98 27       	eor	r25, r24
     cc6:	98 2f       	mov	r25, r24
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	89 2b       	or	r24, r25
     ccc:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK_Polarity)<<CPOL ;// operate only IDEL low// its a bug in software (proteus)
     cce:	ea 81       	ldd	r30, Y+2	; 0x02
     cd0:	fb 81       	ldd	r31, Y+3	; 0x03
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	88 2f       	mov	r24, r24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	98 2f       	mov	r25, r24
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	89 2b       	or	r24, r25
     cea:	89 83       	std	Y+1, r24	; 0x01


	//Set CLK Phase
	tempConfig |= (config->Sampling_EDG)<<CPHA ;
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	84 81       	ldd	r24, Z+4	; 0x04
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	98 2f       	mov	r25, r24
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	89 2b       	or	r24, r25
     d04:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->order)<<DORD ;
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	85 81       	ldd	r24, Z+5	; 0x05
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	82 95       	swap	r24
     d16:	92 95       	swap	r25
     d18:	90 7f       	andi	r25, 0xF0	; 240
     d1a:	98 27       	eor	r25, r24
     d1c:	80 7f       	andi	r24, 0xF0	; 240
     d1e:	98 27       	eor	r25, r24
     d20:	98 2f       	mov	r25, r24
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	89 2b       	or	r24, r25
     d26:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK)<<SPR0 ;
     d28:	ea 81       	ldd	r30, Y+2	; 0x02
     d2a:	fb 81       	ldd	r31, Y+3	; 0x03
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	89 2b       	or	r24, r25
     d32:	89 83       	std	Y+1, r24	; 0x01

	//Set Double SPEED
	SPSR |= (config->DoubleSpedd)<<SPI2X;
     d34:	ae e2       	ldi	r26, 0x2E	; 46
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ee e2       	ldi	r30, 0x2E	; 46
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	90 81       	ld	r25, Z
     d3e:	ea 81       	ldd	r30, Y+2	; 0x02
     d40:	fb 81       	ldd	r31, Y+3	; 0x03
     d42:	86 81       	ldd	r24, Z+6	; 0x06
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24

	//Set interrupt
	tempConfig |= (config->interrupt_state)<<SPIE ;
     d48:	ea 81       	ldd	r30, Y+2	; 0x02
     d4a:	fb 81       	ldd	r31, Y+3	; 0x03
     d4c:	87 81       	ldd	r24, Z+7	; 0x07
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	96 95       	lsr	r25
     d54:	98 2f       	mov	r25, r24
     d56:	88 27       	eor	r24, r24
     d58:	97 95       	ror	r25
     d5a:	87 95       	ror	r24
     d5c:	98 2f       	mov	r25, r24
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	89 2b       	or	r24, r25
     d62:	89 83       	std	Y+1, r24	; 0x01


	//Enable SPI
	tempConfig |= (config->Enable)<<SPE;
     d64:	ea 81       	ldd	r30, Y+2	; 0x02
     d66:	fb 81       	ldd	r31, Y+3	; 0x03
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	00 24       	eor	r0, r0
     d70:	96 95       	lsr	r25
     d72:	87 95       	ror	r24
     d74:	07 94       	ror	r0
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	07 94       	ror	r0
     d7c:	98 2f       	mov	r25, r24
     d7e:	80 2d       	mov	r24, r0
     d80:	98 2f       	mov	r25, r24
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	89 2b       	or	r24, r25
     d86:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= tempConfig;
     d88:	ad e2       	ldi	r26, 0x2D	; 45
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	ed e2       	ldi	r30, 0x2D	; 45
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	90 81       	ld	r25, Z
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	89 2b       	or	r24, r25
     d96:	8c 93       	st	X, r24

}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <MCAL_SPI_SendAndReceive>:

u8 MCAL_SPI_SendAndReceive(u8 Copy_Data){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01

	PORTC ^= 0xFF;
     db0:	a5 e3       	ldi	r26, 0x35	; 53
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e5 e3       	ldi	r30, 0x35	; 53
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 95       	com	r24
     dbc:	8c 93       	st	X, r24
	SPDR = Copy_Data; //write dtat
     dbe:	ef e2       	ldi	r30, 0x2F	; 47
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	80 83       	st	Z, r24

	while( !( SPSR&(1<<SPIF) ) );
     dc6:	ee e2       	ldi	r30, 0x2E	; 46
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	88 23       	and	r24, r24
     dce:	dc f7       	brge	.-10     	; 0xdc6 <MCAL_SPI_SendAndReceive+0x22>

	return SPDR ;
     dd0:	ef e2       	ldi	r30, 0x2F	; 47
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z

}
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <MCAL_SPI_CheckForCollsion>:
u8 MCAL_SPI_CheckForCollsion(void){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62

  u8 localData = READ_BIT(SPSR, WCOL);
     de8:	ee e2       	ldi	r30, 0x2E	; 46
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	82 95       	swap	r24
     df0:	86 95       	lsr	r24
     df2:	86 95       	lsr	r24
     df4:	83 70       	andi	r24, 0x03	; 3
     df6:	81 70       	andi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01

  return localData;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <MCAL_SPI_AssignCallBack>:
void MCAL_SPI_AssignCallBack(void (*PCallBack)(void)){
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <MCAL_SPI_AssignCallBack+0x6>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01

	SPI_ISR = PCallBack;
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	90 93 7b 00 	sts	0x007B, r25
     e1a:	80 93 7a 00 	sts	0x007A, r24

}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <__vector_12>:
ISR(SPI_STC_vect){
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62

	SPI_ISR();
     e52:	e0 91 7a 00 	lds	r30, 0x007A
     e56:	f0 91 7b 00 	lds	r31, 0x007B
     e5a:	09 95       	icall

}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	bf 91       	pop	r27
     e66:	af 91       	pop	r26
     e68:	9f 91       	pop	r25
     e6a:	8f 91       	pop	r24
     e6c:	7f 91       	pop	r23
     e6e:	6f 91       	pop	r22
     e70:	5f 91       	pop	r21
     e72:	4f 91       	pop	r20
     e74:	3f 91       	pop	r19
     e76:	2f 91       	pop	r18
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <UART_Init>:
 */
#include "UART.h"
void (*GP_IRQ_CallBack)(void);

void UART_Init(void)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62

	UBRRL = 51;    // 9600 buad rate
     e8a:	e9 e2       	ldi	r30, 0x29	; 41
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	83 e3       	ldi	r24, 0x33	; 51
     e90:	80 83       	st	Z, r24

   CLEAR_BIT(UCSRA, U2X);
     e92:	ab e2       	ldi	r26, 0x2B	; 43
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e2       	ldi	r30, 0x2B	; 43
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8d 7f       	andi	r24, 0xFD	; 253
     e9e:	8c 93       	st	X, r24
   * all by default we wantn't  to config it
   *
   * */

	//Enable UART Receive and Transmit
	SET_BIT(UCSRB,TXEN);
     ea0:	aa e2       	ldi	r26, 0x2A	; 42
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ea e2       	ldi	r30, 0x2A	; 42
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	88 60       	ori	r24, 0x08	; 8
     eac:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     eae:	aa e2       	ldi	r26, 0x2A	; 42
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e2       	ldi	r30, 0x2A	; 42
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	8c 93       	st	X, r24


}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <UART_SendChar>:
void UART_SendChar(u8 Data)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
	while (!READ_BIT(UCSRA,UDRE));
     ece:	eb e2       	ldi	r30, 0x2B	; 43
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	82 95       	swap	r24
     ed6:	86 95       	lsr	r24
     ed8:	87 70       	andi	r24, 0x07	; 7
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	a1 f3       	breq	.-24     	; 0xece <UART_SendChar+0xc>
	UDR = Data;
     ee6:	ec e2       	ldi	r30, 0x2C	; 44
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	80 83       	st	Z, r24


}
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <UART_ReceiveChar>:
u8 UART_ReceiveChar(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62

	while (!READ_BIT(UCSRA,RXC));
     f00:	eb e2       	ldi	r30, 0x2B	; 43
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 23       	and	r24, r24
     f08:	dc f7       	brge	.-10     	; 0xf00 <UART_ReceiveChar+0xa>
	u8 temp = UDR;
     f0a:	ec e2       	ldi	r30, 0x2C	; 44
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	89 83       	std	Y+1, r24	; 0x01
	return temp;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <UART_SendString>:

void UART_SendString(u8 *ptr){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <UART_SendString+0x6>
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	0a c0       	rjmp	.+20     	; 0xf40 <UART_SendString+0x24>


	while(*ptr){
		UART_SendChar(*ptr);
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	80 81       	ld	r24, Z
     f32:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
		ptr++;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(u8 *ptr){


	while(*ptr){
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	80 81       	ld	r24, Z
     f46:	88 23       	and	r24, r24
     f48:	89 f7       	brne	.-30     	; 0xf2c <UART_SendString+0x10>
		UART_SendChar(*ptr);
		ptr++;
	}
	UART_SendChar(STOPCHAR);
     f4a:	8d e0       	ldi	r24, 0x0D	; 13
     f4c:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <UART_Send32>:

void UART_Send32(u32 data){
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2a 97       	sbiw	r28, 0x0a	; 10
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	2b 83       	std	Y+3, r18	; 0x03
     f70:	3c 83       	std	Y+4, r19	; 0x04
     f72:	4d 83       	std	Y+5, r20	; 0x05
     f74:	5e 83       	std	Y+6, r21	; 0x06
     f76:	6f 83       	std	Y+7, r22	; 0x07
     f78:	78 87       	std	Y+8, r23	; 0x08
     f7a:	89 87       	std	Y+9, r24	; 0x09
     f7c:	9a 87       	std	Y+10, r25	; 0x0a
	u32 *ptr = &data;
     f7e:	ce 01       	movw	r24, r28
     f80:	03 96       	adiw	r24, 0x03	; 3
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
	UART_SendChar(ptr[0]);
     f86:	e9 81       	ldd	r30, Y+1	; 0x01
     f88:	fa 81       	ldd	r31, Y+2	; 0x02
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	42 81       	ldd	r20, Z+2	; 0x02
     f90:	53 81       	ldd	r21, Z+3	; 0x03
     f92:	64 81       	ldd	r22, Z+4	; 0x04
     f94:	75 81       	ldd	r23, Z+5	; 0x05
     f96:	86 81       	ldd	r24, Z+6	; 0x06
     f98:	97 81       	ldd	r25, Z+7	; 0x07
     f9a:	82 2f       	mov	r24, r18
     f9c:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
	UART_SendChar(ptr[1]);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	38 96       	adiw	r30, 0x08	; 8
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
     fac:	42 81       	ldd	r20, Z+2	; 0x02
     fae:	53 81       	ldd	r21, Z+3	; 0x03
     fb0:	64 81       	ldd	r22, Z+4	; 0x04
     fb2:	75 81       	ldd	r23, Z+5	; 0x05
     fb4:	86 81       	ldd	r24, Z+6	; 0x06
     fb6:	97 81       	ldd	r25, Z+7	; 0x07
     fb8:	82 2f       	mov	r24, r18
     fba:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
	UART_SendChar(ptr[2]);
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	fc 01       	movw	r30, r24
     fc4:	70 96       	adiw	r30, 0x10	; 16
     fc6:	20 81       	ld	r18, Z
     fc8:	31 81       	ldd	r19, Z+1	; 0x01
     fca:	42 81       	ldd	r20, Z+2	; 0x02
     fcc:	53 81       	ldd	r21, Z+3	; 0x03
     fce:	64 81       	ldd	r22, Z+4	; 0x04
     fd0:	75 81       	ldd	r23, Z+5	; 0x05
     fd2:	86 81       	ldd	r24, Z+6	; 0x06
     fd4:	97 81       	ldd	r25, Z+7	; 0x07
     fd6:	82 2f       	mov	r24, r18
     fd8:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
	UART_SendChar(ptr[3]);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	fc 01       	movw	r30, r24
     fe2:	78 96       	adiw	r30, 0x18	; 24
     fe4:	20 81       	ld	r18, Z
     fe6:	31 81       	ldd	r19, Z+1	; 0x01
     fe8:	42 81       	ldd	r20, Z+2	; 0x02
     fea:	53 81       	ldd	r21, Z+3	; 0x03
     fec:	64 81       	ldd	r22, Z+4	; 0x04
     fee:	75 81       	ldd	r23, Z+5	; 0x05
     ff0:	86 81       	ldd	r24, Z+6	; 0x06
     ff2:	97 81       	ldd	r25, Z+7	; 0x07
     ff4:	82 2f       	mov	r24, r18
     ff6:	0e 94 61 07 	call	0xec2	; 0xec2 <UART_SendChar>
}
     ffa:	2a 96       	adiw	r28, 0x0a	; 10
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <UART_Receive32>:

u32 UART_Receive32(void){
    100c:	af 92       	push	r10
    100e:	bf 92       	push	r11
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2a 97       	sbiw	r28, 0x0a	; 10
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
   u32 *ptr, data;
   ptr = &data;
    1030:	ce 01       	movw	r24, r28
    1032:	03 96       	adiw	r24, 0x03	; 3
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
   ptr[0] = UART_ReceiveChar();
    1038:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	20 83       	st	Z, r18
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	42 83       	std	Z+2, r20	; 0x02
    1056:	53 83       	std	Z+3, r21	; 0x03
    1058:	64 83       	std	Z+4, r22	; 0x04
    105a:	75 83       	std	Z+5, r23	; 0x05
    105c:	86 83       	std	Z+6, r24	; 0x06
    105e:	97 83       	std	Z+7, r25	; 0x07
   ptr[1] = UART_ReceiveChar();
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	8c 01       	movw	r16, r24
    1066:	08 5f       	subi	r16, 0xF8	; 248
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	f8 01       	movw	r30, r16
    1080:	20 83       	st	Z, r18
    1082:	f8 01       	movw	r30, r16
    1084:	31 83       	std	Z+1, r19	; 0x01
    1086:	f8 01       	movw	r30, r16
    1088:	42 83       	std	Z+2, r20	; 0x02
    108a:	f8 01       	movw	r30, r16
    108c:	53 83       	std	Z+3, r21	; 0x03
    108e:	f8 01       	movw	r30, r16
    1090:	64 83       	std	Z+4, r22	; 0x04
    1092:	f8 01       	movw	r30, r16
    1094:	75 83       	std	Z+5, r23	; 0x05
    1096:	f8 01       	movw	r30, r16
    1098:	86 83       	std	Z+6, r24	; 0x06
    109a:	f8 01       	movw	r30, r16
    109c:	97 83       	std	Z+7, r25	; 0x07
   ptr[2] = UART_ReceiveChar();
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	8c 01       	movw	r16, r24
    10a4:	00 5f       	subi	r16, 0xF0	; 240
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	f8 01       	movw	r30, r16
    10be:	20 83       	st	Z, r18
    10c0:	f8 01       	movw	r30, r16
    10c2:	31 83       	std	Z+1, r19	; 0x01
    10c4:	f8 01       	movw	r30, r16
    10c6:	42 83       	std	Z+2, r20	; 0x02
    10c8:	f8 01       	movw	r30, r16
    10ca:	53 83       	std	Z+3, r21	; 0x03
    10cc:	f8 01       	movw	r30, r16
    10ce:	64 83       	std	Z+4, r22	; 0x04
    10d0:	f8 01       	movw	r30, r16
    10d2:	75 83       	std	Z+5, r23	; 0x05
    10d4:	f8 01       	movw	r30, r16
    10d6:	86 83       	std	Z+6, r24	; 0x06
    10d8:	f8 01       	movw	r30, r16
    10da:	97 83       	std	Z+7, r25	; 0x07
   ptr[3] = UART_ReceiveChar();
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	8c 01       	movw	r16, r24
    10e2:	08 5e       	subi	r16, 0xE8	; 232
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	f8 01       	movw	r30, r16
    10fc:	20 83       	st	Z, r18
    10fe:	f8 01       	movw	r30, r16
    1100:	31 83       	std	Z+1, r19	; 0x01
    1102:	f8 01       	movw	r30, r16
    1104:	42 83       	std	Z+2, r20	; 0x02
    1106:	f8 01       	movw	r30, r16
    1108:	53 83       	std	Z+3, r21	; 0x03
    110a:	f8 01       	movw	r30, r16
    110c:	64 83       	std	Z+4, r22	; 0x04
    110e:	f8 01       	movw	r30, r16
    1110:	75 83       	std	Z+5, r23	; 0x05
    1112:	f8 01       	movw	r30, r16
    1114:	86 83       	std	Z+6, r24	; 0x06
    1116:	f8 01       	movw	r30, r16
    1118:	97 83       	std	Z+7, r25	; 0x07

   return data;
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	4d 81       	ldd	r20, Y+5	; 0x05
    1120:	5e 81       	ldd	r21, Y+6	; 0x06
    1122:	6f 81       	ldd	r22, Y+7	; 0x07
    1124:	78 85       	ldd	r23, Y+8	; 0x08
    1126:	89 85       	ldd	r24, Y+9	; 0x09
    1128:	9a 85       	ldd	r25, Y+10	; 0x0a
    112a:	a2 2e       	mov	r10, r18
    112c:	b3 2e       	mov	r11, r19
    112e:	c4 2e       	mov	r12, r20
    1130:	d5 2e       	mov	r13, r21
    1132:	e6 2e       	mov	r14, r22
    1134:	f7 2e       	mov	r15, r23
    1136:	08 2f       	mov	r16, r24
    1138:	19 2f       	mov	r17, r25
}
    113a:	2a 2d       	mov	r18, r10
    113c:	3b 2d       	mov	r19, r11
    113e:	4c 2d       	mov	r20, r12
    1140:	5d 2d       	mov	r21, r13
    1142:	6e 2d       	mov	r22, r14
    1144:	7f 2d       	mov	r23, r15
    1146:	80 2f       	mov	r24, r16
    1148:	91 2f       	mov	r25, r17
    114a:	2a 96       	adiw	r28, 0x0a	; 10
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	08 95       	ret

0000116c <UART_ReceiveString>:

void UART_ReceiveString(u8 *ptr, u8 MAX){
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <UART_ReceiveString+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <UART_ReceiveString+0x8>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, temp;
    1180:	1a 82       	std	Y+2, r1	; 0x02
	temp = UART_ReceiveChar();
    1182:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	10 c0       	rjmp	.+32     	; 0x11aa <UART_ReceiveString+0x3e>
	while( i<MAX && temp != STOPCHAR ){
		ptr[i] = temp;
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	fc 01       	movw	r30, r24
    1196:	e2 0f       	add	r30, r18
    1198:	f3 1f       	adc	r31, r19
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	80 83       	st	Z, r24
		temp = UART_ReceiveChar();
    119e:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_ReceiveChar>
    11a2:	89 83       	std	Y+1, r24	; 0x01
		i++;
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(u8 *ptr, u8 MAX){
	u8 i = 0, temp;
	temp = UART_ReceiveChar();
	while( i<MAX && temp != STOPCHAR ){
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	98 17       	cp	r25, r24
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <UART_ReceiveString+0x4c>
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	8d 30       	cpi	r24, 0x0D	; 13
    11b6:	49 f7       	brne	.-46     	; 0x118a <UART_ReceiveString+0x1e>
		ptr[i] = temp;
		temp = UART_ReceiveChar();
		i++;
	}
	ptr[i] = '\0';
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	10 82       	st	Z, r1
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <UART_Receive_periodChech>:

u8 UART_Receive_periodChech(u8 *ptr){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <UART_Receive_periodChech+0x6>
    11e0:	0f 92       	push	r0
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01

	if(READ_BIT(UCSRA,RXC))
    11ea:	eb e2       	ldi	r30, 0x2B	; 43
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 23       	and	r24, r24
    11f2:	4c f4       	brge	.+18     	; 0x1206 <UART_Receive_periodChech+0x2c>
	{
		*ptr = UDR;
    11f4:	ec e2       	ldi	r30, 0x2C	; 44
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	e9 81       	ldd	r30, Y+1	; 0x01
    11fc:	fa 81       	ldd	r31, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
		return 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <UART_Receive_periodChech+0x2e>

	}
	else
	{
		return 0;
    1206:	1b 82       	std	Y+3, r1	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <UART_RX_Interrupt_Enable>:

void UART_RX_Interrupt_Enable(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,RXCIE);
    121e:	ab e2       	ldi	r26, 0x2B	; 43
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	eb e2       	ldi	r30, 0x2B	; 43
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	8c 93       	st	X, r24
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <UART_RX_Interrupt_Disable>:
void UART_RX_Interrupt_Disable(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,RXCIE);
    123a:	ab e2       	ldi	r26, 0x2B	; 43
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	eb e2       	ldi	r30, 0x2B	; 43
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	8c 93       	st	X, r24
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <UART_TX_Interrupt_Enable>:
void UART_TX_Interrupt_Enable(void)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,TXCIE);
    1256:	ab e2       	ldi	r26, 0x2B	; 43
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e2       	ldi	r30, 0x2B	; 43
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 64       	ori	r24, 0x40	; 64
    1262:	8c 93       	st	X, r24
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <UART_TX_Interrupt_Disable>:
void UART_TX_Interrupt_Disable(void)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,TXCIE);
    1272:	ab e2       	ldi	r26, 0x2B	; 43
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	eb e2       	ldi	r30, 0x2B	; 43
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 7b       	andi	r24, 0xBF	; 191
    127e:	8c 93       	st	X, r24
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <UART_SendNoblock>:


void UART_SendNoblock(u8 data){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	0f 92       	push	r0
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1292:	ec e2       	ldi	r30, 0x2C	; 44
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	80 83       	st	Z, r24
}
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <UART_ReceiveNoblock>:
u8 UART_ReceiveNoblock(void){
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62


	return UDR;
    12aa:	ec e2       	ldi	r30, 0x2C	; 44
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <__vector_13>:


ISR(USART_RXC_vect)
{
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	4f 93       	push	r20
    12c6:	5f 93       	push	r21
    12c8:	6f 93       	push	r22
    12ca:	7f 93       	push	r23
    12cc:	8f 93       	push	r24
    12ce:	9f 93       	push	r25
    12d0:	af 93       	push	r26
    12d2:	bf 93       	push	r27
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    12e0:	e0 91 7c 00 	lds	r30, 0x007C
    12e4:	f0 91 7d 00 	lds	r31, 0x007D
    12e8:	09 95       	icall
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_15>:

ISR(USART_TXC_vect)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    133a:	e0 91 7c 00 	lds	r30, 0x007C
    133e:	f0 91 7d 00 	lds	r31, 0x007D
    1342:	09 95       	icall
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <Keypad_init>:
char key_row[]={R0, R1, R2, R3};
char key_column[]={C0, C1, C2, C3};


void Keypad_init()
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);
    1372:	a1 e3       	ldi	r26, 0x31	; 49
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e1 e3       	ldi	r30, 0x31	; 49
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	80 7f       	andi	r24, 0xF0	; 240
    137e:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
    1380:	a1 e3       	ldi	r26, 0x31	; 49
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 6f       	ori	r24, 0xF0	; 240
    138c:	8c 93       	st	X, r24
	KEYPAD_PORT =0xff; //active PUR for input pins
    138e:	e2 e3       	ldi	r30, 0x32	; 50
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	80 83       	st	Z, r24



}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <Keypad_getkey>:
char Keypad_getkey()
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	27 97       	sbiw	r28, 0x07	; 7
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for(i=0; i<4; i++){
    13b0:	1c 82       	std	Y+4, r1	; 0x04
    13b2:	1b 82       	std	Y+3, r1	; 0x03
    13b4:	06 c1       	rjmp	.+524    	; 0x15c2 <Keypad_getkey+0x226>

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
    13b6:	a2 e3       	ldi	r26, 0x32	; 50
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e2 e3       	ldi	r30, 0x32	; 50
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 6f       	ori	r24, 0xF0	; 240
    13c2:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<key_column[i]);
    13c4:	a2 e3       	ldi	r26, 0x32	; 50
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	fc 01       	movw	r30, r24
    13d6:	e4 59       	subi	r30, 0x94	; 148
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Keypad_getkey+0x50>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Keypad_getkey+0x4c>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24

		for(j=0; j<4; j++){
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	19 82       	std	Y+1, r1	; 0x01
    13fa:	d8 c0       	rjmp	.+432    	; 0x15ac <Keypad_getkey+0x210>

			if(!(keypadPIN & (1<<key_row[j]))){
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	fc 01       	movw	r30, r24
    140c:	e8 59       	subi	r30, 0x98	; 152
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <Keypad_getkey+0x82>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <Keypad_getkey+0x7e>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f0       	breq	.+2      	; 0x142e <Keypad_getkey+0x92>
    142c:	ba c0       	rjmp	.+372    	; 0x15a2 <Keypad_getkey+0x206>

				while(!(keypadPIN & (1<<key_row[j])));
    142e:	e0 e3       	ldi	r30, 0x30	; 48
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	fc 01       	movw	r30, r24
    143e:	e8 59       	subi	r30, 0x98	; 152
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	80 81       	ld	r24, Z
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a9 01       	movw	r20, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <Keypad_getkey+0xb4>
    144c:	55 95       	asr	r21
    144e:	47 95       	ror	r20
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <Keypad_getkey+0xb0>
    1454:	ca 01       	movw	r24, r20
    1456:	81 70       	andi	r24, 0x01	; 1
    1458:	90 70       	andi	r25, 0x00	; 0
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	41 f3       	breq	.-48     	; 0x142e <Keypad_getkey+0x92>

				switch(i){
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	9f 83       	std	Y+7, r25	; 0x07
    1464:	8e 83       	std	Y+6, r24	; 0x06
    1466:	4e 81       	ldd	r20, Y+6	; 0x06
    1468:	5f 81       	ldd	r21, Y+7	; 0x07
    146a:	41 30       	cpi	r20, 0x01	; 1
    146c:	51 05       	cpc	r21, r1
    146e:	c1 f1       	breq	.+112    	; 0x14e0 <Keypad_getkey+0x144>
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	91 05       	cpc	r25, r1
    1478:	34 f4       	brge	.+12     	; 0x1486 <Keypad_getkey+0xea>
    147a:	4e 81       	ldd	r20, Y+6	; 0x06
    147c:	5f 81       	ldd	r21, Y+7	; 0x07
    147e:	41 15       	cp	r20, r1
    1480:	51 05       	cpc	r21, r1
    1482:	71 f0       	breq	.+28     	; 0x14a0 <Keypad_getkey+0x104>
    1484:	8b c0       	rjmp	.+278    	; 0x159c <Keypad_getkey+0x200>
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	82 30       	cpi	r24, 0x02	; 2
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <Keypad_getkey+0xf6>
    1490:	47 c0       	rjmp	.+142    	; 0x1520 <Keypad_getkey+0x184>
    1492:	4e 81       	ldd	r20, Y+6	; 0x06
    1494:	5f 81       	ldd	r21, Y+7	; 0x07
    1496:	43 30       	cpi	r20, 0x03	; 3
    1498:	51 05       	cpc	r21, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <Keypad_getkey+0x102>
    149c:	60 c0       	rjmp	.+192    	; 0x155e <Keypad_getkey+0x1c2>
    149e:	7e c0       	rjmp	.+252    	; 0x159c <Keypad_getkey+0x200>

				case 0:
					if(0 == j) return '7';
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	19 f4       	brne	.+6      	; 0x14ae <Keypad_getkey+0x112>
    14a8:	57 e3       	ldi	r21, 0x37	; 55
    14aa:	5d 83       	std	Y+5, r21	; 0x05
    14ac:	92 c0       	rjmp	.+292    	; 0x15d2 <Keypad_getkey+0x236>
					else if(1 == j) return '4';
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	9a 81       	ldd	r25, Y+2	; 0x02
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	19 f4       	brne	.+6      	; 0x14be <Keypad_getkey+0x122>
    14b8:	84 e3       	ldi	r24, 0x34	; 52
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	8a c0       	rjmp	.+276    	; 0x15d2 <Keypad_getkey+0x236>
					else if(2 == j) return '1';
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	19 f4       	brne	.+6      	; 0x14ce <Keypad_getkey+0x132>
    14c8:	91 e3       	ldi	r25, 0x31	; 49
    14ca:	9d 83       	std	Y+5, r25	; 0x05
    14cc:	82 c0       	rjmp	.+260    	; 0x15d2 <Keypad_getkey+0x236>
					else if(3 == j) return '@';
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	09 f0       	breq	.+2      	; 0x14da <Keypad_getkey+0x13e>
    14d8:	64 c0       	rjmp	.+200    	; 0x15a2 <Keypad_getkey+0x206>
    14da:	40 e4       	ldi	r20, 0x40	; 64
    14dc:	4d 83       	std	Y+5, r20	; 0x05
    14de:	79 c0       	rjmp	.+242    	; 0x15d2 <Keypad_getkey+0x236>
					break;
				case 1:
					if(0 == j) return '8';
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	19 f4       	brne	.+6      	; 0x14ee <Keypad_getkey+0x152>
    14e8:	58 e3       	ldi	r21, 0x38	; 56
    14ea:	5d 83       	std	Y+5, r21	; 0x05
    14ec:	72 c0       	rjmp	.+228    	; 0x15d2 <Keypad_getkey+0x236>
					else if(1 == j) return '5';
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	19 f4       	brne	.+6      	; 0x14fe <Keypad_getkey+0x162>
    14f8:	85 e3       	ldi	r24, 0x35	; 53
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	6a c0       	rjmp	.+212    	; 0x15d2 <Keypad_getkey+0x236>
					else if(2 == j) return '2';
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	91 05       	cpc	r25, r1
    1506:	19 f4       	brne	.+6      	; 0x150e <Keypad_getkey+0x172>
    1508:	92 e3       	ldi	r25, 0x32	; 50
    150a:	9d 83       	std	Y+5, r25	; 0x05
    150c:	62 c0       	rjmp	.+196    	; 0x15d2 <Keypad_getkey+0x236>
					else if(3 == j) return '0';
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	91 05       	cpc	r25, r1
    1516:	09 f0       	breq	.+2      	; 0x151a <Keypad_getkey+0x17e>
    1518:	44 c0       	rjmp	.+136    	; 0x15a2 <Keypad_getkey+0x206>
    151a:	40 e3       	ldi	r20, 0x30	; 48
    151c:	4d 83       	std	Y+5, r20	; 0x05
    151e:	59 c0       	rjmp	.+178    	; 0x15d2 <Keypad_getkey+0x236>
					break;
				case 2:
					if(0 == j) return '9';
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	19 f4       	brne	.+6      	; 0x152e <Keypad_getkey+0x192>
    1528:	59 e3       	ldi	r21, 0x39	; 57
    152a:	5d 83       	std	Y+5, r21	; 0x05
    152c:	52 c0       	rjmp	.+164    	; 0x15d2 <Keypad_getkey+0x236>
					else if(1 == j) return '6';
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	19 f4       	brne	.+6      	; 0x153e <Keypad_getkey+0x1a2>
    1538:	86 e3       	ldi	r24, 0x36	; 54
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	4a c0       	rjmp	.+148    	; 0x15d2 <Keypad_getkey+0x236>
					else if(2 == j) return '3';
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	19 f4       	brne	.+6      	; 0x154e <Keypad_getkey+0x1b2>
    1548:	93 e3       	ldi	r25, 0x33	; 51
    154a:	9d 83       	std	Y+5, r25	; 0x05
    154c:	42 c0       	rjmp	.+132    	; 0x15d2 <Keypad_getkey+0x236>
					else if(3 == j) return '=';
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	29 f5       	brne	.+74     	; 0x15a2 <Keypad_getkey+0x206>
    1558:	4d e3       	ldi	r20, 0x3D	; 61
    155a:	4d 83       	std	Y+5, r20	; 0x05
    155c:	3a c0       	rjmp	.+116    	; 0x15d2 <Keypad_getkey+0x236>
					break;
				case 3:
					if(0 == j) return '/';
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	19 f4       	brne	.+6      	; 0x156c <Keypad_getkey+0x1d0>
    1566:	5f e2       	ldi	r21, 0x2F	; 47
    1568:	5d 83       	std	Y+5, r21	; 0x05
    156a:	33 c0       	rjmp	.+102    	; 0x15d2 <Keypad_getkey+0x236>
					else if(1 == j) return '*';
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	19 f4       	brne	.+6      	; 0x157c <Keypad_getkey+0x1e0>
    1576:	8a e2       	ldi	r24, 0x2A	; 42
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	2b c0       	rjmp	.+86     	; 0x15d2 <Keypad_getkey+0x236>
					else if(2 == j) return '-';
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	91 05       	cpc	r25, r1
    1584:	19 f4       	brne	.+6      	; 0x158c <Keypad_getkey+0x1f0>
    1586:	9d e2       	ldi	r25, 0x2D	; 45
    1588:	9d 83       	std	Y+5, r25	; 0x05
    158a:	23 c0       	rjmp	.+70     	; 0x15d2 <Keypad_getkey+0x236>
					else if(3 == j) return '+';
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	83 30       	cpi	r24, 0x03	; 3
    1592:	91 05       	cpc	r25, r1
    1594:	31 f4       	brne	.+12     	; 0x15a2 <Keypad_getkey+0x206>
    1596:	4b e2       	ldi	r20, 0x2B	; 43
    1598:	4d 83       	std	Y+5, r20	; 0x05
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <Keypad_getkey+0x236>
					break;
				default:
					return 'A';
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	5d 83       	std	Y+5, r21	; 0x05
    15a0:	18 c0       	rjmp	.+48     	; 0x15d2 <Keypad_getkey+0x236>
	for(i=0; i<4; i++){

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	91 05       	cpc	r25, r1
    15b4:	0c f4       	brge	.+2      	; 0x15b8 <Keypad_getkey+0x21c>
    15b6:	22 cf       	rjmp	.-444    	; 0x13fc <Keypad_getkey+0x60>

}
char Keypad_getkey()
{
	int i,j;
	for(i=0; i<4; i++){
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	84 30       	cpi	r24, 0x04	; 4
    15c8:	91 05       	cpc	r25, r1
    15ca:	0c f4       	brge	.+2      	; 0x15ce <Keypad_getkey+0x232>
    15cc:	f4 ce       	rjmp	.-536    	; 0x13b6 <Keypad_getkey+0x1a>
		}


	}

	return 'A';
    15ce:	81 e4       	ldi	r24, 0x41	; 65
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05

}
    15d4:	27 96       	adiw	r28, 0x07	; 7
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <LCD_clear_screen>:
 *      Author: bassam
 */

#include "lcd.h"

void LCD_clear_screen(){
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <LCD_lcd_kick>:

void LCD_lcd_kick(){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	2e 97       	sbiw	r28, 0x0e	; 14
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    160e:	a8 e3       	ldi	r26, 0x38	; 56
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e8 e3       	ldi	r30, 0x38	; 56
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 60       	ori	r24, 0x08	; 8
    161a:	8c 93       	st	X, r24
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a8 e4       	ldi	r26, 0x48	; 72
    1622:	b2 e4       	ldi	r27, 0x42	; 66
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	9c 87       	std	Y+12, r25	; 0x0c
    1628:	ad 87       	std	Y+13, r26	; 0x0d
    162a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8f 83       	std	Y+7, r24	; 0x07
    1646:	98 87       	std	Y+8, r25	; 0x08
    1648:	a9 87       	std	Y+9, r26	; 0x09
    164a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <LCD_lcd_kick+0x74>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <LCD_lcd_kick+0xd4>
    16b0:	88 ec       	ldi	r24, 0xC8	; 200
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_lcd_kick+0xc2>
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <LCD_lcd_kick+0xb6>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_lcd_kick+0xfe>
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	87 7f       	andi	r24, 0xF7	; 247
    170c:	8c 93       	st	X, r24
}
    170e:	2e 96       	adiw	r28, 0x0e	; 14
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <LCD_GOTO_XY+0x6>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	39 f4       	brne	.+14     	; 0x1742 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 31       	cpi	r24, 0x10	; 16
    1738:	20 f4       	brcc	.+8      	; 0x1742 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 58       	subi	r24, 0x80	; 128
    173e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	39 f4       	brne	.+14     	; 0x1756 <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 31       	cpi	r24, 0x10	; 16
    174c:	20 f4       	brcc	.+8      	; 0x1756 <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	80 54       	subi	r24, 0x40	; 64
    1752:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
		}
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <LCD_INIT>:

void LCD_INIT(){
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	e4 97       	sbiw	r28, 0x34	; 52
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 ea       	ldi	r26, 0xA0	; 160
    177a:	b1 e4       	ldi	r27, 0x41	; 65
    177c:	89 ab       	std	Y+49, r24	; 0x31
    177e:	9a ab       	std	Y+50, r25	; 0x32
    1780:	ab ab       	std	Y+51, r26	; 0x33
    1782:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	8d a7       	std	Y+45, r24	; 0x2d
    179e:	9e a7       	std	Y+46, r25	; 0x2e
    17a0:	af a7       	std	Y+47, r26	; 0x2f
    17a2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    17a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    17a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    17a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17aa:	98 a9       	ldd	r25, Y+48	; 0x30
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_INIT+0x66>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9c a7       	std	Y+44, r25	; 0x2c
    17c2:	8b a7       	std	Y+43, r24	; 0x2b
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    17c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    17c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	69 a9       	ldd	r22, Y+49	; 0x31
    17e0:	7a a9       	ldd	r23, Y+50	; 0x32
    17e2:	8b a9       	ldd	r24, Y+51	; 0x33
    17e4:	9c a9       	ldd	r25, Y+52	; 0x34
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9c a7       	std	Y+44, r25	; 0x2c
    1804:	8b a7       	std	Y+43, r24	; 0x2b
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <LCD_INIT+0xc6>
    1808:	88 ec       	ldi	r24, 0xC8	; 200
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9a a7       	std	Y+42, r25	; 0x2a
    180e:	89 a7       	std	Y+41, r24	; 0x29
    1810:	89 a5       	ldd	r24, Y+41	; 0x29
    1812:	9a a5       	ldd	r25, Y+42	; 0x2a
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_INIT+0xb4>
    1818:	9a a7       	std	Y+42, r25	; 0x2a
    181a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8b a5       	ldd	r24, Y+43	; 0x2b
    181e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9c a7       	std	Y+44, r25	; 0x2c
    1824:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8b a5       	ldd	r24, Y+43	; 0x2b
    1828:	9c a5       	ldd	r25, Y+44	; 0x2c
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <LCD_INIT+0xa8>
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	6d a5       	ldd	r22, Y+45	; 0x2d
    1832:	7e a5       	ldd	r23, Y+46	; 0x2e
    1834:	8f a5       	ldd	r24, Y+47	; 0x2f
    1836:	98 a9       	ldd	r25, Y+48	; 0x30
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9c a7       	std	Y+44, r25	; 0x2c
    1842:	8b a7       	std	Y+43, r24	; 0x2b
    1844:	8b a5       	ldd	r24, Y+43	; 0x2b
    1846:	9c a5       	ldd	r25, Y+44	; 0x2c
    1848:	98 a7       	std	Y+40, r25	; 0x28
    184a:	8f a3       	std	Y+39, r24	; 0x27
    184c:	8f a1       	ldd	r24, Y+39	; 0x27
    184e:	98 a5       	ldd	r25, Y+40	; 0x28
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_INIT+0xf0>
    1854:	98 a7       	std	Y+40, r25	; 0x28
    1856:	8f a3       	std	Y+39, r24	; 0x27
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
*/
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    1858:	a7 e3       	ldi	r26, 0x37	; 55
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e7 e3       	ldi	r30, 0x37	; 55
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8e 60       	ori	r24, 0x0E	; 14
    1864:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    1866:	a8 e3       	ldi	r26, 0x38	; 56
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e8 e3       	ldi	r30, 0x38	; 56
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	81 7f       	andi	r24, 0xF1	; 241
    1872:	8c 93       	st	X, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e7       	ldi	r26, 0x70	; 112
    187a:	b1 e4       	ldi	r27, 0x41	; 65
    187c:	8b a3       	std	Y+35, r24	; 0x23
    187e:	9c a3       	std	Y+36, r25	; 0x24
    1880:	ad a3       	std	Y+37, r26	; 0x25
    1882:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6b a1       	ldd	r22, Y+35	; 0x23
    1886:	7c a1       	ldd	r23, Y+36	; 0x24
    1888:	8d a1       	ldd	r24, Y+37	; 0x25
    188a:	9e a1       	ldd	r25, Y+38	; 0x26
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8f 8f       	std	Y+31, r24	; 0x1f
    189e:	98 a3       	std	Y+32, r25	; 0x20
    18a0:	a9 a3       	std	Y+33, r26	; 0x21
    18a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18a6:	78 a1       	ldd	r23, Y+32	; 0x20
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_INIT+0x166>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_INIT+0x1e4>
	else if (__tmp > 65535)
    18c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18c8:	78 a1       	ldd	r23, Y+32	; 0x20
    18ca:	89 a1       	ldd	r24, Y+33	; 0x21
    18cc:	9a a1       	ldd	r25, Y+34	; 0x22
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_INIT+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6b a1       	ldd	r22, Y+35	; 0x23
    18e0:	7c a1       	ldd	r23, Y+36	; 0x24
    18e2:	8d a1       	ldd	r24, Y+37	; 0x25
    18e4:	9e a1       	ldd	r25, Y+38	; 0x26
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9e 8f       	std	Y+30, r25	; 0x1e
    1904:	8d 8f       	std	Y+29, r24	; 0x1d
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_INIT+0x1c6>
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 8f       	std	Y+28, r25	; 0x1c
    190e:	8b 8f       	std	Y+27, r24	; 0x1b
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_INIT+0x1b4>
    1918:	9c 8f       	std	Y+28, r25	; 0x1c
    191a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9e 8f       	std	Y+30, r25	; 0x1e
    1924:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1928:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_INIT+0x1a8>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <LCD_INIT+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1932:	78 a1       	ldd	r23, Y+32	; 0x20
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9e 8f       	std	Y+30, r25	; 0x1e
    1942:	8d 8f       	std	Y+29, r24	; 0x1d
    1944:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1946:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1948:	9a 8f       	std	Y+26, r25	; 0x1a
    194a:	89 8f       	std	Y+25, r24	; 0x19
    194c:	89 8d       	ldd	r24, Y+25	; 0x19
    194e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_INIT+0x1f0>
    1954:	9a 8f       	std	Y+26, r25	; 0x1a
    1956:	89 8f       	std	Y+25, r24	; 0x19
	//DataDir_LCD_PORT = 0xFF;
	_delay_ms(15);
	LCD_clear_screen();
    1958:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_clear_screen>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a8 ec       	ldi	r26, 0xC8	; 200
    1962:	b2 e4       	ldi	r27, 0x42	; 66
    1964:	8d 8b       	std	Y+21, r24	; 0x15
    1966:	9e 8b       	std	Y+22, r25	; 0x16
    1968:	af 8b       	std	Y+23, r26	; 0x17
    196a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	2b ea       	ldi	r18, 0xAB	; 171
    1976:	3a ea       	ldi	r19, 0xAA	; 170
    1978:	4a e2       	ldi	r20, 0x2A	; 42
    197a:	50 e4       	ldi	r21, 0x40	; 64
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	89 8b       	std	Y+17, r24	; 0x11
    1986:	9a 8b       	std	Y+18, r25	; 0x12
    1988:	ab 8b       	std	Y+19, r26	; 0x13
    198a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    198c:	69 89       	ldd	r22, Y+17	; 0x11
    198e:	7a 89       	ldd	r23, Y+18	; 0x12
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	1c f4       	brge	.+6      	; 0x19aa <LCD_INIT+0x24a>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	88 8b       	std	Y+16, r24	; 0x10
    19a8:	91 c0       	rjmp	.+290    	; 0x1acc <LCD_INIT+0x36c>
	else if (__tmp > 255)
    19aa:	69 89       	ldd	r22, Y+17	; 0x11
    19ac:	7a 89       	ldd	r23, Y+18	; 0x12
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	53 e4       	ldi	r21, 0x43	; 67
    19ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <LCD_INIT+0x264>
    19c2:	7b c0       	rjmp	.+246    	; 0x1aba <LCD_INIT+0x35a>
	{
		_delay_ms(__us / 1000.0);
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a e7       	ldi	r20, 0x7A	; 122
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8c 87       	std	Y+12, r24	; 0x0c
    19de:	9d 87       	std	Y+13, r25	; 0x0d
    19e0:	ae 87       	std	Y+14, r26	; 0x0e
    19e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    19e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    19e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	4a ef       	ldi	r20, 0xFA	; 250
    19f2:	54 e4       	ldi	r21, 0x44	; 68
    19f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	88 87       	std	Y+8, r24	; 0x08
    19fe:	99 87       	std	Y+9, r25	; 0x09
    1a00:	aa 87       	std	Y+10, r26	; 0x0a
    1a02:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a04:	68 85       	ldd	r22, Y+8	; 0x08
    1a06:	79 85       	ldd	r23, Y+9	; 0x09
    1a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e8       	ldi	r20, 0x80	; 128
    1a12:	5f e3       	ldi	r21, 0x3F	; 63
    1a14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a18:	88 23       	and	r24, r24
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <LCD_INIT+0x2c6>
		__ticks = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9f 83       	std	Y+7, r25	; 0x07
    1a22:	8e 83       	std	Y+6, r24	; 0x06
    1a24:	3f c0       	rjmp	.+126    	; 0x1aa4 <LCD_INIT+0x344>
	else if (__tmp > 65535)
    1a26:	68 85       	ldd	r22, Y+8	; 0x08
    1a28:	79 85       	ldd	r23, Y+9	; 0x09
    1a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3a:	18 16       	cp	r1, r24
    1a3c:	4c f5       	brge	.+82     	; 0x1a90 <LCD_INIT+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a40:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a42:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a44:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e2       	ldi	r20, 0x20	; 32
    1a4c:	51 e4       	ldi	r21, 0x41	; 65
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9f 83       	std	Y+7, r25	; 0x07
    1a64:	8e 83       	std	Y+6, r24	; 0x06
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <LCD_INIT+0x326>
    1a68:	88 ec       	ldi	r24, 0xC8	; 200
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9d 83       	std	Y+5, r25	; 0x05
    1a6e:	8c 83       	std	Y+4, r24	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <LCD_INIT+0x314>
    1a78:	9d 83       	std	Y+5, r25	; 0x05
    1a7a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	9f 83       	std	Y+7, r25	; 0x07
    1a84:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	69 f7       	brne	.-38     	; 0x1a68 <LCD_INIT+0x308>
    1a8e:	24 c0       	rjmp	.+72     	; 0x1ad8 <LCD_INIT+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a90:	68 85       	ldd	r22, Y+8	; 0x08
    1a92:	79 85       	ldd	r23, Y+9	; 0x09
    1a94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9f 83       	std	Y+7, r25	; 0x07
    1aa2:	8e 83       	std	Y+6, r24	; 0x06
    1aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa8:	9b 83       	std	Y+3, r25	; 0x03
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_INIT+0x350>
    1ab4:	9b 83       	std	Y+3, r25	; 0x03
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <LCD_INIT+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aba:	69 89       	ldd	r22, Y+17	; 0x11
    1abc:	7a 89       	ldd	r23, Y+18	; 0x12
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	88 8b       	std	Y+16, r24	; 0x10
    1acc:	88 89       	ldd	r24, Y+16	; 0x10
    1ace:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	8a 95       	dec	r24
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_INIT+0x372>
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    1ad8:	88 e3       	ldi	r24, 0x38	; 56
    1ada:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    1ade:	86 e0       	ldi	r24, 0x06	; 6
    1ae0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1ae4:	80 e8       	ldi	r24, 0x80	; 128
    1ae6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
    1aea:	8f e0       	ldi	r24, 0x0F	; 15
    1aec:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>

}
    1af0:	e4 96       	adiw	r28, 0x34	; 52
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <LCD_check_lcd_isbusy+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    1b0c:	ea e3       	ldi	r30, 0x3A	; 58
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	ea e3       	ldi	r30, 0x3A	; 58
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    1b18:	a8 e3       	ldi	r26, 0x38	; 56
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	84 60       	ori	r24, 0x04	; 4
    1b24:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    1b26:	a8 e3       	ldi	r26, 0x38	; 56
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 e3       	ldi	r30, 0x38	; 56
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8d 7f       	andi	r24, 0xFD	; 253
    1b32:	8c 93       	st	X, r24
	LCD_lcd_kick();
    1b34:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    1b38:	ea e3       	ldi	r30, 0x3A	; 58
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	ea e3       	ldi	r30, 0x3A	; 58
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    1b46:	a8 e3       	ldi	r26, 0x38	; 56
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8b 7f       	andi	r24, 0xFB	; 251
    1b52:	8c 93       	st	X, r24
	
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	2f 97       	sbiw	r28, 0x0f	; 15
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    1b74:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    1b78:	eb e3       	ldi	r30, 0x3B	; 59
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7e:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
    1b80:	a8 e3       	ldi	r26, 0x38	; 56
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e8 e3       	ldi	r30, 0x38	; 56
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	89 7f       	andi	r24, 0xF9	; 249
    1b8c:	8c 93       	st	X, r24
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e8       	ldi	r26, 0x80	; 128
    1b94:	bf e3       	ldi	r27, 0x3F	; 63
    1b96:	8b 87       	std	Y+11, r24	; 0x0b
    1b98:	9c 87       	std	Y+12, r25	; 0x0c
    1b9a:	ad 87       	std	Y+13, r26	; 0x0d
    1b9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	4a ef       	ldi	r20, 0xFA	; 250
    1bac:	54 e4       	ldi	r21, 0x44	; 68
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8f 83       	std	Y+7, r24	; 0x07
    1bb8:	98 87       	std	Y+8, r25	; 0x08
    1bba:	a9 87       	std	Y+9, r26	; 0x09
    1bbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	2c f4       	brge	.+10     	; 0x1be0 <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	3f c0       	rjmp	.+126    	; 0x1c5e <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    1be0:	6f 81       	ldd	r22, Y+7	; 0x07
    1be2:	78 85       	ldd	r23, Y+8	; 0x08
    1be4:	89 85       	ldd	r24, Y+9	; 0x09
    1be6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	4c f5       	brge	.+82     	; 0x1c4a <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	bc 01       	movw	r22, r24
    1c12:	cd 01       	movw	r24, r26
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	0f c0       	rjmp	.+30     	; 0x1c40 <LCD_WRITE_COMMAND+0xe2>
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_WRITE_COMMAND+0xd0>
    1c32:	9c 83       	std	Y+4, r25	; 0x04
    1c34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	69 f7       	brne	.-38     	; 0x1c22 <LCD_WRITE_COMMAND+0xc4>
    1c48:	14 c0       	rjmp	.+40     	; 0x1c72 <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_WRITE_COMMAND+0x10c>
    1c6e:	9a 83       	std	Y+2, r25	; 0x02
    1c70:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    1c72:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    1c76:	2f 96       	adiw	r28, 0x0f	; 15
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	2f 97       	sbiw	r28, 0x0f	; 15
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    1c9e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    1ca2:	eb e3       	ldi	r30, 0x3B	; 59
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8b 7f       	andi	r24, 0xFB	; 251
    1cb6:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    1cb8:	a8 e3       	ldi	r26, 0x38	; 56
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e8 e3       	ldi	r30, 0x38	; 56
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	82 60       	ori	r24, 0x02	; 2
    1cc4:	8c 93       	st	X, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_WRITE_CHAR+0xf0>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_WRITE_CHAR+0xde>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_WRITE_CHAR+0xd2>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_WRITE_CHAR+0x11a>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    1daa:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    1dae:	2f 96       	adiw	r28, 0x0f	; 15
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LCD_WRITE_STRING+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <LCD_WRITE_STRING+0x8>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
    1dd2:	19 82       	std	Y+1, r1	; 0x01
    1dd4:	27 c0       	rjmp	.+78     	; 0x1e24 <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    1de0:	eb 81       	ldd	r30, Y+3	; 0x03
    1de2:	fc 81       	ldd	r31, Y+4	; 0x04
    1de4:	20 81       	ld	r18, Z
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	82 2f       	mov	r24, r18
    1df2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
		if (count == 16)
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	80 31       	cpi	r24, 0x10	; 16
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	29 f4       	brne	.+10     	; 0x1e0a <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_GOTO_XY>
    1e08:	0d c0       	rjmp	.+26     	; 0x1e24 <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	80 32       	cpi	r24, 0x20	; 32
    1e10:	91 05       	cpc	r25, r1
    1e12:	41 f4       	brne	.+16     	; 0x1e24 <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    1e14:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_GOTO_XY>
			count = 0;
    1e20:	1a 82       	std	Y+2, r1	; 0x02
    1e22:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    1e24:	eb 81       	ldd	r30, Y+3	; 0x03
    1e26:	fc 81       	ldd	r31, Y+4	; 0x04
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 23       	and	r24, r24
    1e2c:	a1 f6       	brne	.-88     	; 0x1dd6 <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <LCD_custom_character>:


void LCD_custom_character(){
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	aa 97       	sbiw	r28, 0x2a	; 42
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITE_COMMAND(64);
    1e50:	80 e4       	ldi	r24, 0x40	; 64
    1e52:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(14);
    1e5c:	8e e0       	ldi	r24, 0x0E	; 14
    1e5e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1e62:	81 e1       	ldi	r24, 0x11	; 17
    1e64:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(2);
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1e6e:	84 e0       	ldi	r24, 0x04	; 4
    1e70:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1e74:	84 e0       	ldi	r24, 0x04	; 4
    1e76:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1e80:	84 e0       	ldi	r24, 0x04	; 4
    1e82:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1e86:	80 e8       	ldi	r24, 0x80	; 128
    1e88:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 e2       	ldi	r26, 0x20	; 32
    1e98:	b1 e4       	ldi	r27, 0x41	; 65
    1e9a:	8f a3       	std	Y+39, r24	; 0x27
    1e9c:	98 a7       	std	Y+40, r25	; 0x28
    1e9e:	a9 a7       	std	Y+41, r26	; 0x29
    1ea0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8b a3       	std	Y+35, r24	; 0x23
    1ebc:	9c a3       	std	Y+36, r25	; 0x24
    1ebe:	ad a3       	std	Y+37, r26	; 0x25
    1ec0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_custom_character+0xa8>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_custom_character+0x126>
	else if (__tmp > 65535)
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_custom_character+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6f a1       	ldd	r22, Y+39	; 0x27
    1efe:	78 a5       	ldd	r23, Y+40	; 0x28
    1f00:	89 a5       	ldd	r24, Y+41	; 0x29
    1f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9a a3       	std	Y+34, r25	; 0x22
    1f22:	89 a3       	std	Y+33, r24	; 0x21
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_custom_character+0x108>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	98 a3       	std	Y+32, r25	; 0x20
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f30:	98 a1       	ldd	r25, Y+32	; 0x20
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_custom_character+0xf6>
    1f36:	98 a3       	std	Y+32, r25	; 0x20
    1f38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9a a3       	std	Y+34, r25	; 0x22
    1f42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_custom_character+0xea>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <LCD_custom_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	8d 8f       	std	Y+29, r24	; 0x1d
    1f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_custom_character+0x132>
    1f72:	9e 8f       	std	Y+30, r25	; 0x1e
    1f74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


	LCD_WRITE_COMMAND(72);
    1f76:	88 e4       	ldi	r24, 0x48	; 72
    1f78:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(10);
    1f82:	8a e0       	ldi	r24, 0x0A	; 10
    1f84:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(21);
    1f88:	85 e1       	ldi	r24, 0x15	; 21
    1f8a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1f8e:	81 e1       	ldi	r24, 0x11	; 17
    1f90:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(18);
    1f94:	82 e1       	ldi	r24, 0x12	; 18
    1f96:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,3);
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	63 e0       	ldi	r22, 0x03	; 3
    1fb0:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(1);
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e2       	ldi	r26, 0x20	; 32
    1fc0:	b1 e4       	ldi	r27, 0x41	; 65
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
    1fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fca:	69 8d       	ldd	r22, Y+25	; 0x19
    1fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a ef       	ldi	r20, 0xFA	; 250
    1fd8:	54 e4       	ldi	r21, 0x44	; 68
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8d 8b       	std	Y+21, r24	; 0x15
    1fe4:	9e 8b       	std	Y+22, r25	; 0x16
    1fe6:	af 8b       	std	Y+23, r26	; 0x17
    1fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fea:	6d 89       	ldd	r22, Y+21	; 0x15
    1fec:	7e 89       	ldd	r23, Y+22	; 0x16
    1fee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	2c f4       	brge	.+10     	; 0x200c <LCD_custom_character+0x1d0>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
    200a:	3f c0       	rjmp	.+126    	; 0x208a <LCD_custom_character+0x24e>
	else if (__tmp > 65535)
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	4c f5       	brge	.+82     	; 0x2076 <LCD_custom_character+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9c 8b       	std	Y+20, r25	; 0x14
    204a:	8b 8b       	std	Y+19, r24	; 0x13
    204c:	0f c0       	rjmp	.+30     	; 0x206c <LCD_custom_character+0x230>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9a 8b       	std	Y+18, r25	; 0x12
    2054:	89 8b       	std	Y+17, r24	; 0x11
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	9a 89       	ldd	r25, Y+18	; 0x12
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_custom_character+0x21e>
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2062:	8b 89       	ldd	r24, Y+19	; 0x13
    2064:	9c 89       	ldd	r25, Y+20	; 0x14
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	69 f7       	brne	.-38     	; 0x204e <LCD_custom_character+0x212>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <LCD_custom_character+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	98 8b       	std	Y+16, r25	; 0x10
    2090:	8f 87       	std	Y+15, r24	; 0x0f
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	98 89       	ldd	r25, Y+16	; 0x10
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_custom_character+0x25a>
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_WRITE_COMMAND(80);
    209e:	80 e5       	ldi	r24, 0x50	; 80
    20a0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(20);
    20aa:	84 e1       	ldi	r24, 0x14	; 20
    20ac:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(11);
    20b0:	8b e0       	ldi	r24, 0x0B	; 11
    20b2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(27);
    20b6:	8b e1       	ldi	r24, 0x1B	; 27
    20b8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(28);
    20bc:	8c e1       	ldi	r24, 0x1C	; 28
    20be:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(40);
    20c2:	88 e2       	ldi	r24, 0x28	; 40
    20c4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,5);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	65 e0       	ldi	r22, 0x05	; 5
    20d8:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(2);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_WRITE_CHAR>
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a0 e2       	ldi	r26, 0x20	; 32
    20e8:	b1 e4       	ldi	r27, 0x41	; 65
    20ea:	8b 87       	std	Y+11, r24	; 0x0b
    20ec:	9c 87       	std	Y+12, r25	; 0x0c
    20ee:	ad 87       	std	Y+13, r26	; 0x0d
    20f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a ef       	ldi	r20, 0xFA	; 250
    2100:	54 e4       	ldi	r21, 0x44	; 68
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8f 83       	std	Y+7, r24	; 0x07
    210c:	98 87       	std	Y+8, r25	; 0x08
    210e:	a9 87       	std	Y+9, r26	; 0x09
    2110:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_custom_character+0x2f8>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_custom_character+0x376>
	else if (__tmp > 65535)
    2134:	6f 81       	ldd	r22, Y+7	; 0x07
    2136:	78 85       	ldd	r23, Y+8	; 0x08
    2138:	89 85       	ldd	r24, Y+9	; 0x09
    213a:	9a 85       	ldd	r25, Y+10	; 0x0a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_custom_character+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_custom_character+0x358>
    2176:	88 ec       	ldi	r24, 0xC8	; 200
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9c 83       	std	Y+4, r25	; 0x04
    217c:	8b 83       	std	Y+3, r24	; 0x03
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_custom_character+0x346>
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_custom_character+0x33a>
    219c:	14 c0       	rjmp	.+40     	; 0x21c6 <LCD_custom_character+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	9a 83       	std	Y+2, r25	; 0x02
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	9a 81       	ldd	r25, Y+2	; 0x02
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_custom_character+0x382>
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    21c6:	aa 96       	adiw	r28, 0x2a	; 42
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <main>:
#define  SCK           7

u8 arr[]={0x01,0x12,0x23,0x34,0x45,0x56,0x67,0x78,0x89,0x90};

int main()
{
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	67 97       	sbiw	r28, 0x17	; 23
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigType config;
	config.CLK = SPI_Fosc4;
    21f0:	19 8a       	std	Y+17, r1	; 0x11
	config.DoubleSpedd = SPI_DOUBLE_SPEDD_DISABLE;
    21f2:	1e 8a       	std	Y+22, r1	; 0x16
	config.CLK_Polarity = SPI_IDL_CLK_LOW;
    21f4:	1b 8a       	std	Y+19, r1	; 0x13
	config.Sampling_EDG = SPI_Second_EDG;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	8c 8b       	std	Y+20, r24	; 0x14
	config.Enable= SPI_Enable_ON;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	8a 8b       	std	Y+18, r24	; 0x12
	config.interrupt_state = SPI_interruptDisable;
    21fe:	1f 8a       	std	Y+23, r1	; 0x17
	config.order = SPI_MSB;
    2200:	1d 8a       	std	Y+21, r1	; 0x15

	#ifdef MASTER_MODE
	config.mode = SPI_MODE_Master;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	88 8b       	std	Y+16, r24	; 0x10
	DDRB |=  1<<MOSI  | 1<<SS   | 1<<SCK;
    2206:	a7 e3       	ldi	r26, 0x37	; 55
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e7 e3       	ldi	r30, 0x37	; 55
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 6b       	ori	r24, 0xB0	; 176
    2212:	8c 93       	st	X, r24
	/* Set MISO input */
	DDRB &= ~(1<<MISO);
    2214:	a7 e3       	ldi	r26, 0x37	; 55
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e7 e3       	ldi	r30, 0x37	; 55
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 7b       	andi	r24, 0xBF	; 191
    2220:	8c 93       	st	X, r24
	/* Set MOSI, SCK and SS input*/
	DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS);
	#endif

	//port A as Output
	DDRA = 0xFF;
    2222:	ea e3       	ldi	r30, 0x3A	; 58
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	80 83       	st	Z, r24
	//port C as Output
	DDRC = 0xFF;
    222a:	e4 e3       	ldi	r30, 0x34	; 52
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	80 83       	st	Z, r24
    MCAL_SPI_Init(&config);
    2232:	ce 01       	movw	r24, r28
    2234:	40 96       	adiw	r24, 0x10	; 16
    2236:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_SPI_Init>

	while (1){



		for(char i=0; i<10; i++){
    223a:	1f 86       	std	Y+15, r1	; 0x0f
    223c:	82 c0       	rjmp	.+260    	; 0x2342 <main+0x16a>

		PORTA = MCAL_SPI_SendAndReceive(arr[i]);
    223e:	0b e3       	ldi	r16, 0x3B	; 59
    2240:	10 e0       	ldi	r17, 0x00	; 0
    2242:	8f 85       	ldd	r24, Y+15	; 0x0f
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	e0 59       	subi	r30, 0x90	; 144
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	0e 94 d2 06 	call	0xda4	; 0xda4 <MCAL_SPI_SendAndReceive>
    2254:	f8 01       	movw	r30, r16
    2256:	80 83       	st	Z, r24
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a6 e1       	ldi	r26, 0x16	; 22
    225e:	b3 e4       	ldi	r27, 0x43	; 67
    2260:	8b 87       	std	Y+11, r24	; 0x0b
    2262:	9c 87       	std	Y+12, r25	; 0x0c
    2264:	ad 87       	std	Y+13, r26	; 0x0d
    2266:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	4a ef       	ldi	r20, 0xFA	; 250
    2276:	54 e4       	ldi	r21, 0x44	; 68
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	8f 83       	std	Y+7, r24	; 0x07
    2282:	98 87       	std	Y+8, r25	; 0x08
    2284:	a9 87       	std	Y+9, r26	; 0x09
    2286:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <main+0xd2>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <main+0x150>
	else if (__tmp > 65535)
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	4c f5       	brge	.+82     	; 0x2314 <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <main+0x132>
    22ec:	88 ec       	ldi	r24, 0xC8	; 200
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <main+0x120>
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	9e 81       	ldd	r25, Y+6	; 0x06
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	69 f7       	brne	.-38     	; 0x22ec <main+0x114>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	9a 81       	ldd	r25, Y+2	; 0x02
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <main+0x15c>
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01

	while (1){



		for(char i=0; i<10; i++){
    233c:	8f 85       	ldd	r24, Y+15	; 0x0f
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	8f 87       	std	Y+15, r24	; 0x0f
    2342:	8f 85       	ldd	r24, Y+15	; 0x0f
    2344:	8a 30       	cpi	r24, 0x0A	; 10
    2346:	08 f4       	brcc	.+2      	; 0x234a <main+0x172>
    2348:	7a cf       	rjmp	.-268    	; 0x223e <main+0x66>
    234a:	77 cf       	rjmp	.-274    	; 0x223a <main+0x62>

0000234c <__prologue_saves__>:
    234c:	2f 92       	push	r2
    234e:	3f 92       	push	r3
    2350:	4f 92       	push	r4
    2352:	5f 92       	push	r5
    2354:	6f 92       	push	r6
    2356:	7f 92       	push	r7
    2358:	8f 92       	push	r8
    235a:	9f 92       	push	r9
    235c:	af 92       	push	r10
    235e:	bf 92       	push	r11
    2360:	cf 92       	push	r12
    2362:	df 92       	push	r13
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	ca 1b       	sub	r28, r26
    2376:	db 0b       	sbc	r29, r27
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	09 94       	ijmp

00002384 <__epilogue_restores__>:
    2384:	2a 88       	ldd	r2, Y+18	; 0x12
    2386:	39 88       	ldd	r3, Y+17	; 0x11
    2388:	48 88       	ldd	r4, Y+16	; 0x10
    238a:	5f 84       	ldd	r5, Y+15	; 0x0f
    238c:	6e 84       	ldd	r6, Y+14	; 0x0e
    238e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2390:	8c 84       	ldd	r8, Y+12	; 0x0c
    2392:	9b 84       	ldd	r9, Y+11	; 0x0b
    2394:	aa 84       	ldd	r10, Y+10	; 0x0a
    2396:	b9 84       	ldd	r11, Y+9	; 0x09
    2398:	c8 84       	ldd	r12, Y+8	; 0x08
    239a:	df 80       	ldd	r13, Y+7	; 0x07
    239c:	ee 80       	ldd	r14, Y+6	; 0x06
    239e:	fd 80       	ldd	r15, Y+5	; 0x05
    23a0:	0c 81       	ldd	r16, Y+4	; 0x04
    23a2:	1b 81       	ldd	r17, Y+3	; 0x03
    23a4:	aa 81       	ldd	r26, Y+2	; 0x02
    23a6:	b9 81       	ldd	r27, Y+1	; 0x01
    23a8:	ce 0f       	add	r28, r30
    23aa:	d1 1d       	adc	r29, r1
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	ed 01       	movw	r28, r26
    23b8:	08 95       	ret

000023ba <_exit>:
    23ba:	f8 94       	cli

000023bc <__stop_program>:
    23bc:	ff cf       	rjmp	.-2      	; 0x23bc <__stop_program>
