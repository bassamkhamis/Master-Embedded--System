
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f70  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080010a0  080010a0  000110a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010c0  080010c0  000110c8  2**0
                  CONTENTS
  4 .ARM          00000000  080010c0  080010c0  000110c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c0  080010c8  000110c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c0  080010c0  000110c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000000  080010c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080010c8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000735e  00000000  00000000  000110f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011b6  00000000  00000000  0001844f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000011ca  00000000  00000000  00019605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  0001a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000238  00000000  00000000  0001aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030fe  00000000  00000000  0001acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004098  00000000  00000000  0001ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c6e1  00000000  00000000  00021e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002e53f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000090c  00000000  00000000  0002e594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001088 	.word	0x08001088

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001088 	.word	0x08001088

08000170 <HAL_EEPROM_Init>:


#include "I2C_Slave_EEPPROM.h"

void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0

	//PB6     SCLK
	//PB7     SDATA

	I2C_configtypeDef I2C11CFG;
	I2C11CFG.General_Call_Adrress_Detection = General_Call_Adrress_Detection_Enable;
 8000176:	2300      	movs	r3, #0
 8000178:	61bb      	str	r3, [r7, #24]
	I2C11CFG.I2C_ACK_Control = I2C_ACK_Control_Enable ;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	617b      	str	r3, [r7, #20]
	I2C11CFG.I2C_CLOCK = I2C_SCLK_SM_100K ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C11CFG.I2C_Mode = I2C_Mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	607b      	str	r3, [r7, #4]
	I2C11CFG.P_Slave_EV_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	61fb      	str	r3, [r7, #28]
	I2C11CFG.stretchClok = stretchClok_Enable ;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

    //Set Pins
	MACL_I2C_GPIO_Set_PINs(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000192:	f000 fbf7 	bl	8000984 <MACL_I2C_GPIO_Set_PINs>
	//Init
	MCAL_I2C_Init(I2C1, &I2C11CFG);
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 800019c:	f000 fad6 	bl	800074c <MCAL_I2C_Init>


}
 80001a0:	bf00      	nop
 80001a2:	3720      	adds	r7, #32
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <HAL_EEPROM_Write_NBytes>:
uint8_t HAL_EEPROM_Write_NBytes(uint32_t Memory_Address, uint8_t *Byte, uint32_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	601a      	str	r2, [r3, #0]
	uint8_t i = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	//MASIR 2008 C++ 18-4-1, Memory heap dynamic allocation should be not be Used

	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_Address>>8);
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)Memory_Address;
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]


	for(i = 2; i< (Data_Length+2); i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <HAL_EEPROM_Write_NBytes+0x66>
	{
      buffer[i]  =  Byte[i-2] ;
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i = 2; i< (Data_Length+2); i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	d3e6      	bcc.n	80001f2 <HAL_EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, Data_Length + 2, withStop, start);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	f107 0214 	add.w	r2, r7, #20
 800022e:	2100      	movs	r1, #0
 8000230:	9101      	str	r1, [sp, #4]
 8000232:	2100      	movs	r1, #0
 8000234:	9100      	str	r1, [sp, #0]
 8000236:	212a      	movs	r1, #42	; 0x2a
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <HAL_EEPROM_Write_NBytes+0x9c>)
 800023a:	f000 fc63 	bl	8000b04 <MCAL_I2C_Master_TX>

	return 0 ;
 800023e:	2300      	movs	r3, #0

}
 8000240:	4618      	mov	r0, r3
 8000242:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <HAL_EEPROM_Read_NBytes>:
uint8_t HAL_EEPROM_Read_NBytes(uint32_t Memory_Address, uint8_t *DataOut, uint32_t DataLen)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(Memory_Address>>8);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	0a1b      	lsrs	r3, r3, #8
 8000260:	b2db      	uxtb	r3, r3
 8000262:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)Memory_Address;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	757b      	strb	r3, [r7, #21]

	//Send address of EEPROM
	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, WithoutStop, start);
 800026a:	f107 0214 	add.w	r2, r7, #20
 800026e:	2300      	movs	r3, #0
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2301      	movs	r3, #1
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2302      	movs	r3, #2
 8000278:	212a      	movs	r1, #42	; 0x2a
 800027a:	4809      	ldr	r0, [pc, #36]	; (80002a0 <HAL_EEPROM_Read_NBytes+0x50>)
 800027c:	f000 fc42 	bl	8000b04 <MCAL_I2C_Master_TX>

   //Receive Data from EEPROM
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, DataOut, DataLen, withStop, repeateStart);
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <HAL_EEPROM_Read_NBytes+0x50>)
 8000290:	f000 fbc2 	bl	8000a18 <MCAL_I2C_Master_RX>

	return 0 ;
 8000294:	2300      	movs	r3, #0

}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <EXTI0_IRQHandler>:
//PRx: Pending bit
//0: No trigger request occurred
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is
void EXTI0_IRQHandler(void)
{  //This bit rc_w1
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6153      	str	r3, [r2, #20]
	GP_callback[0]();
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4798      	blx	r3
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010400 	.word	0x40010400
 80002c4:	20000070 	.word	0x20000070

080002c8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<1);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6153      	str	r3, [r2, #20]
	GP_callback[1]();
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI1_IRQHandler+0x20>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4798      	blx	r3

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000070 	.word	0x20000070

080002ec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<2);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]
	GP_callback[2]();
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x20>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000070 	.word	0x20000070

08000310 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<3);
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI3_IRQHandler+0x1c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]
	GP_callback[3]();
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI3_IRQHandler+0x20>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000070 	.word	0x20000070

08000334 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<4);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]
	GP_callback[4]();
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI4_IRQHandler+0x20>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000070 	.word	0x20000070

08000358 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<5)){EXTI->PR |= 1<<5; GP_callback[5]();}
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI9_5_IRQHandler+0x22>
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4798      	blx	r3
	if((EXTI->PR)& (1<<6)){EXTI->PR |= 1<<6; GP_callback[6]();}
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI9_5_IRQHandler+0x40>
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4798      	blx	r3
	if((EXTI->PR)& (1<<7)){EXTI->PR |= 1<<7; GP_callback[7]();}
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <EXTI9_5_IRQHandler+0x5e>
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4798      	blx	r3
	if((EXTI->PR)& (1<<8)){GP_callback[8]();EXTI->PR |= 1<<8;}
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x7c>
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003c4:	6a1b      	ldr	r3, [r3, #32]
 80003c6:	4798      	blx	r3
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d2:	6153      	str	r3, [r2, #20]
	if((EXTI->PR)& (1<<9)){EXTI->PR |= 1<<9; GP_callback[9]();}
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI9_5_IRQHandler+0x9a>
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4798      	blx	r3
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000070 	.word	0x20000070

08000400 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<10)){EXTI->PR |= 1<<10; GP_callback[10]();}
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI15_10_IRQHandler+0x22>
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	4798      	blx	r3
	if((EXTI->PR)& (1<<11)){EXTI->PR |= 1<<11; GP_callback[11]();}
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <EXTI15_10_IRQHandler+0x40>
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	4798      	blx	r3
	if((EXTI->PR)& (1<<12)){EXTI->PR |= 1<<12; GP_callback[12]();}
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <EXTI15_10_IRQHandler+0x5e>
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6153      	str	r3, [r2, #20]
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4798      	blx	r3
	if((EXTI->PR)& (1<<13)){EXTI->PR |= 1<<13; GP_callback[13]();}
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <EXTI15_10_IRQHandler+0x7c>
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	4798      	blx	r3
	if((EXTI->PR)& (1<<14)){EXTI->PR |= 1<<14; GP_callback[14]();}
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d008      	beq.n	800049a <EXTI15_10_IRQHandler+0x9a>
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6153      	str	r3, [r2, #20]
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4798      	blx	r3
	if((EXTI->PR)& (1<<15)){EXTI->PR |= 1<<15; GP_callback[15]();}
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <EXTI15_10_IRQHandler+0xb8>
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	4798      	blx	r3

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010400 	.word	0x40010400
 80004c0:	20000070 	.word	0x20000070

080004c4 <get_Pin_Postion>:

#include "STM32F103x8_gpio_driver.h"



uint8_t get_Pin_Postion(uint16_t GPIO_PinNumber ){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PinNumber){
 80004ce:	88fb      	ldrh	r3, [r7, #6]
 80004d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004d4:	f000 80a5 	beq.w	8000622 <get_Pin_Postion+0x15e>
 80004d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004dc:	f300 80a3 	bgt.w	8000626 <get_Pin_Postion+0x162>
 80004e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e4:	f000 809b 	beq.w	800061e <get_Pin_Postion+0x15a>
 80004e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004ec:	f300 809b 	bgt.w	8000626 <get_Pin_Postion+0x162>
 80004f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004f4:	f000 8091 	beq.w	800061a <get_Pin_Postion+0x156>
 80004f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fc:	f300 8093 	bgt.w	8000626 <get_Pin_Postion+0x162>
 8000500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000504:	f000 8087 	beq.w	8000616 <get_Pin_Postion+0x152>
 8000508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800050c:	f300 808b 	bgt.w	8000626 <get_Pin_Postion+0x162>
 8000510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000514:	d07d      	beq.n	8000612 <get_Pin_Postion+0x14e>
 8000516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800051a:	f300 8084 	bgt.w	8000626 <get_Pin_Postion+0x162>
 800051e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000522:	d074      	beq.n	800060e <get_Pin_Postion+0x14a>
 8000524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000528:	dc7d      	bgt.n	8000626 <get_Pin_Postion+0x162>
 800052a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800052e:	d06c      	beq.n	800060a <get_Pin_Postion+0x146>
 8000530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000534:	dc77      	bgt.n	8000626 <get_Pin_Postion+0x162>
 8000536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800053a:	d064      	beq.n	8000606 <get_Pin_Postion+0x142>
 800053c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000540:	dc71      	bgt.n	8000626 <get_Pin_Postion+0x162>
 8000542:	2b80      	cmp	r3, #128	; 0x80
 8000544:	d05d      	beq.n	8000602 <get_Pin_Postion+0x13e>
 8000546:	2b80      	cmp	r3, #128	; 0x80
 8000548:	dc6d      	bgt.n	8000626 <get_Pin_Postion+0x162>
 800054a:	2b20      	cmp	r3, #32
 800054c:	dc48      	bgt.n	80005e0 <get_Pin_Postion+0x11c>
 800054e:	2b00      	cmp	r3, #0
 8000550:	dd69      	ble.n	8000626 <get_Pin_Postion+0x162>
 8000552:	3b01      	subs	r3, #1
 8000554:	2b1f      	cmp	r3, #31
 8000556:	d866      	bhi.n	8000626 <get_Pin_Postion+0x162>
 8000558:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <get_Pin_Postion+0x9c>)
 800055a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055e:	bf00      	nop
 8000560:	080005e7 	.word	0x080005e7
 8000564:	080005eb 	.word	0x080005eb
 8000568:	08000627 	.word	0x08000627
 800056c:	080005ef 	.word	0x080005ef
 8000570:	08000627 	.word	0x08000627
 8000574:	08000627 	.word	0x08000627
 8000578:	08000627 	.word	0x08000627
 800057c:	080005f3 	.word	0x080005f3
 8000580:	08000627 	.word	0x08000627
 8000584:	08000627 	.word	0x08000627
 8000588:	08000627 	.word	0x08000627
 800058c:	08000627 	.word	0x08000627
 8000590:	08000627 	.word	0x08000627
 8000594:	08000627 	.word	0x08000627
 8000598:	08000627 	.word	0x08000627
 800059c:	080005f7 	.word	0x080005f7
 80005a0:	08000627 	.word	0x08000627
 80005a4:	08000627 	.word	0x08000627
 80005a8:	08000627 	.word	0x08000627
 80005ac:	08000627 	.word	0x08000627
 80005b0:	08000627 	.word	0x08000627
 80005b4:	08000627 	.word	0x08000627
 80005b8:	08000627 	.word	0x08000627
 80005bc:	08000627 	.word	0x08000627
 80005c0:	08000627 	.word	0x08000627
 80005c4:	08000627 	.word	0x08000627
 80005c8:	08000627 	.word	0x08000627
 80005cc:	08000627 	.word	0x08000627
 80005d0:	08000627 	.word	0x08000627
 80005d4:	08000627 	.word	0x08000627
 80005d8:	08000627 	.word	0x08000627
 80005dc:	080005fb 	.word	0x080005fb
 80005e0:	2b40      	cmp	r3, #64	; 0x40
 80005e2:	d00c      	beq.n	80005fe <get_Pin_Postion+0x13a>
 80005e4:	e01f      	b.n	8000626 <get_Pin_Postion+0x162>
	case GPIO_PIN0:
		return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e01e      	b.n	8000628 <get_Pin_Postion+0x164>
		break;
	case GPIO_PIN1:
			return 4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	e01c      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN2:
			return 8;
 80005ee:	2308      	movs	r3, #8
 80005f0:	e01a      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN3:
			return 12;
 80005f2:	230c      	movs	r3, #12
 80005f4:	e018      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN4:
			return 16;
 80005f6:	2310      	movs	r3, #16
 80005f8:	e016      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN5:
			return 20;
 80005fa:	2314      	movs	r3, #20
 80005fc:	e014      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN6:
			return 24;
 80005fe:	2318      	movs	r3, #24
 8000600:	e012      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN7:
			return 28;
 8000602:	231c      	movs	r3, #28
 8000604:	e010      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN8:
			return 0;
 8000606:	2300      	movs	r3, #0
 8000608:	e00e      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN9:
			return 4;
 800060a:	2304      	movs	r3, #4
 800060c:	e00c      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN10:
			return 8;
 800060e:	2308      	movs	r3, #8
 8000610:	e00a      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN11:
			return 12;
 8000612:	230c      	movs	r3, #12
 8000614:	e008      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN12:
			return 16;
 8000616:	2310      	movs	r3, #16
 8000618:	e006      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN13:
			return 20;
 800061a:	2314      	movs	r3, #20
 800061c:	e004      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN14:
			return 24;
 800061e:	2318      	movs	r3, #24
 8000620:	e002      	b.n	8000628 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN15:
			return 28;
 8000622:	231c      	movs	r3, #28
 8000624:	e000      	b.n	8000628 <get_Pin_Postion+0x164>
			break;


	}

	return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <MCAL_GPIO_Init>:
*              when configure the GPIO, first check TRM and data sheet of MCU and kit to know available Ports
*/


void MCAL_GPIO_Init(GPIOx_typeDef* GPIOx, GPIO_configPin_t* PinConfig)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]

	volatile uint32_t *cofigReg =NULL;  //((void *)0)
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
	cofigReg = ((PinConfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	2bff      	cmp	r3, #255	; 0xff
 8000648:	d801      	bhi.n	800064e <MCAL_GPIO_Init+0x1a>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	e001      	b.n	8000652 <MCAL_GPIO_Init+0x1e>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3304      	adds	r3, #4
 8000652:	60bb      	str	r3, [r7, #8]
	*cofigReg &= ~(0xf<<get_Pin_Postion(PinConfig->GPIO_PinNumber)) ; //Reset the nibble in CRL Or CRH
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff33 	bl	80004c4 <get_Pin_Postion>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	230f      	movs	r3, #15
 8000664:	4093      	lsls	r3, r2
 8000666:	43da      	mvns	r2, r3
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	401a      	ands	r2, r3
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	601a      	str	r2, [r3, #0]
	uint8_t pinConfigLoc = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP))
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b07      	cmp	r3, #7
 800067c:	d00b      	beq.n	8000696 <MCAL_GPIO_Init+0x62>
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b06      	cmp	r3, #6
 8000684:	d007      	beq.n	8000696 <MCAL_GPIO_Init+0x62>
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d003      	beq.n	8000696 <MCAL_GPIO_Init+0x62>
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d10e      	bne.n	80006b4 <MCAL_GPIO_Init+0x80>
		//00: General purpose output push-pull (4-4=0)
		//01: General purpose output Open-drain (5-4=1)
		//10: Alternate function output Push-pull (6-4=1)
		//11: Alternate function output Open-drain (7-4=1)

		pinConfigLoc = ( ( (PinConfig->GPIO_Mode)-4 )<<2 | (PinConfig->GPIO_Output_Speed) ) & 0xf;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	3b04      	subs	r3, #4
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	b25a      	sxtb	r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	78db      	ldrb	r3, [r3, #3]
 80006a4:	b25b      	sxtb	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e038      	b.n	8000726 <MCAL_GPIO_Init+0xf2>
		01: Floating input (reset state)
		10: Input with pull-up / pull-dow*/



			if((PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode ==GPIO_MODE_INPUT_FLO))
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <MCAL_GPIO_Init+0x90>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d107      	bne.n	80006d4 <MCAL_GPIO_Init+0xa0>
			{
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e028      	b.n	8000726 <MCAL_GPIO_Init+0xf2>
			}
			else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF)  // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d109      	bne.n	80006f0 <MCAL_GPIO_Init+0xbc>
			{

				pinConfigLoc = ((PinConfig->GPIO_Mode - 7U)<<2 | (0x00)) & 0xf;    // 8-7 = 1 == Floating input
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	3b07      	subs	r3, #7
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 030f 	and.w	r3, r3, #15
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e01a      	b.n	8000726 <MCAL_GPIO_Init+0xf2>
			}
			else{


				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	73fb      	strb	r3, [r7, #15]

				if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	789b      	ldrb	r3, [r3, #2]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d107      	bne.n	8000716 <MCAL_GPIO_Init+0xe2>
					//Pull up (set bit according to pin number)
					GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	8812      	ldrh	r2, [r2, #0]
 800070e:	431a      	orrs	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	e007      	b.n	8000726 <MCAL_GPIO_Init+0xf2>

				}
				else{
					// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
					GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);// Pull down (reset bit according to pin number)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	8812      	ldrh	r2, [r2, #0]
 800071e:	43d2      	mvns	r2, r2
 8000720:	401a      	ands	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]

			}

	}
// Set configuration to CRL OR CRH
(*cofigReg) |= ((pinConfigLoc) << get_Pin_Postion(PinConfig->GPIO_PinNumber)) ;
 8000726:	7bfc      	ldrb	r4, [r7, #15]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fec9 	bl	80004c4 <get_Pin_Postion>
 8000732:	4603      	mov	r3, r0
 8000734:	fa04 f203 	lsl.w	r2, r4, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	431a      	orrs	r2, r3
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	601a      	str	r2, [r3, #0]


}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}
	...

0800074c <MCAL_I2C_Init>:
#define I2C2_INDEX                    1



void MCAL_I2C_Init(I2C_typeDef *I2Cx , I2C_configtypeDef *I2Cconfig)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	//Enable Clock
	uint16_t Temp = 0 ,Frequency = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	82fb      	strh	r3, [r7, #22]
 800075a:	2300      	movs	r3, #0
 800075c:	82bb      	strh	r3, [r7, #20]
	uint32_t Pclk1 = 8000000;
 800075e:	4b80      	ldr	r3, [pc, #512]	; (8000960 <MCAL_I2C_Init+0x214>)
 8000760:	613b      	str	r3, [r7, #16]
	uint16_t Result = 0 ;
 8000762:	2300      	movs	r3, #0
 8000764:	81fb      	strh	r3, [r7, #14]
	if (I2Cx == I2C1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a7e      	ldr	r2, [pc, #504]	; (8000964 <MCAL_I2C_Init+0x218>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d110      	bne.n	8000790 <MCAL_I2C_Init+0x44>
	{
		GVI2Cconfig[I2C1_INDEX] = *I2Cconfig ;
 800076e:	4a7e      	ldr	r2, [pc, #504]	; (8000968 <MCAL_I2C_Init+0x21c>)
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	4614      	mov	r4, r2
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800077e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLK_EN();
 8000782:	4b7a      	ldr	r3, [pc, #488]	; (800096c <MCAL_I2C_Init+0x220>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a79      	ldr	r2, [pc, #484]	; (800096c <MCAL_I2C_Init+0x220>)
 8000788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	e014      	b.n	80007ba <MCAL_I2C_Init+0x6e>
	}
	else if (I2Cx == I2C2)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a77      	ldr	r2, [pc, #476]	; (8000970 <MCAL_I2C_Init+0x224>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d110      	bne.n	80007ba <MCAL_I2C_Init+0x6e>
	{
		GVI2Cconfig[I2C2_INDEX] = *I2Cconfig ;
 8000798:	4b73      	ldr	r3, [pc, #460]	; (8000968 <MCAL_I2C_Init+0x21c>)
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	f103 0420 	add.w	r4, r3, #32
 80007a0:	4615      	mov	r5, r2
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLK_EN();
 80007ae:	4b6f      	ldr	r3, [pc, #444]	; (800096c <MCAL_I2C_Init+0x220>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a6e      	ldr	r2, [pc, #440]	; (800096c <MCAL_I2C_Init+0x220>)
 80007b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b8:	61d3      	str	r3, [r2, #28]
	}


	if(I2Cconfig->I2C_Mode == I2C_Mode_I2C)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 8087 	bne.w	80008d2 <MCAL_I2C_Init+0x186>
		/*************** init Timing*********************/


		//1• 2 MHz in Sm mode
		//Bits 5:0 FREQ[5:0]: Peripheral clock frequency //I2C_CR2 Register
		Temp = I2Cx->CR2    ;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	82fb      	strh	r3, [r7, #22]

		Temp &= ~(I2C_CR2_FREQ);
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007d0:	82fb      	strh	r3, [r7, #22]

		Pclk1 = MCAL_RCC_GetPCLK1Freq();
 80007d2:	f000 fb2b 	bl	8000e2c <MCAL_RCC_GetPCLK1Freq>
 80007d6:	6138      	str	r0, [r7, #16]

		Frequency = (uint16_t) ( Pclk1/1000000 )  ;
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	4a66      	ldr	r2, [pc, #408]	; (8000974 <MCAL_I2C_Init+0x228>)
 80007dc:	fba2 2303 	umull	r2, r3, r2, r3
 80007e0:	0c9b      	lsrs	r3, r3, #18
 80007e2:	82bb      	strh	r3, [r7, #20]

		Temp |= Frequency  ;
 80007e4:	8afa      	ldrh	r2, [r7, #22]
 80007e6:	8abb      	ldrh	r3, [r7, #20]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR2 = Temp ;
 80007ec:	8afa      	ldrh	r2, [r7, #22]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	605a      	str	r2, [r3, #4]

		//2• Configure the clock control //registers CCR[11:0]
		// Thigh = CCR*Tpclk1
		// Must preipherals Disable
		// RCC = Fplk1/(2*Fclk)
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f023 0201 	bic.w	r2, r3, #1
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]

		Temp = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	82fb      	strh	r3, [r7, #22]

		if(I2Cconfig->I2C_CLOCK == I2C_SCLK_SM_50K || I2Cconfig->I2C_CLOCK == I2C_SCLK_SM_100K )
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f24c 3250 	movw	r2, #50000	; 0xc350
 800080a:	4293      	cmp	r3, r2
 800080c:	d004      	beq.n	8000818 <MCAL_I2C_Init+0xcc>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a59      	ldr	r2, [pc, #356]	; (8000978 <MCAL_I2C_Init+0x22c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d115      	bne.n	8000844 <MCAL_I2C_Init+0xf8>
		{
			// RCC = Fplk1/(2*Fclk)
			Result = ( Pclk1/( (I2Cconfig->I2C_CLOCK) <<1 ) );  //MUL by 2
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	fbb2 f3f3 	udiv	r3, r2, r3
 8000824:	81fb      	strh	r3, [r7, #14]


			Temp = I2Cx->CCR ;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	82fb      	strh	r3, [r7, #22]

			Temp |= Result;
 800082c:	8afa      	ldrh	r2, [r7, #22]
 800082e:	89fb      	ldrh	r3, [r7, #14]
 8000830:	4313      	orrs	r3, r2
 8000832:	82fb      	strh	r3, [r7, #22]

			I2Cx->CCR =  Temp ;
 8000834:	8afa      	ldrh	r2, [r7, #22]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	61da      	str	r2, [r3, #28]
			//			 For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			 If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			 therefore the TRISE[5:0] bits must be programmed with 09h.
			//			 (1000 ns / 125 ns = 8 + 1)

			I2Cx->TRISE = Frequency + 1 ;
 800083a:	8abb      	ldrh	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	621a      	str	r2, [r3, #32]
		}


		// Config CR1

		Temp  = 0 ;
 8000844:	2300      	movs	r3, #0
 8000846:	82fb      	strh	r3, [r7, #22]

		Temp = I2Cx->CR1 ;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	82fb      	strh	r3, [r7, #22]

		Temp |= (uint16_t)(I2Cconfig->I2C_ACK_Control | I2Cconfig->General_Call_Adrress_Detection | I2Cconfig->stretchClok | I2Cconfig->I2C_Mode);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	b29a      	uxth	r2, r3
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	b29b      	uxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b29a      	uxth	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	b29b      	uxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b29a      	uxth	r2, r3
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b29a      	uxth	r2, r3
 8000872:	8afb      	ldrh	r3, [r7, #22]
 8000874:	4313      	orrs	r3, r2
 8000876:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 |= Temp ;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	8afb      	ldrh	r3, [r7, #22]
 800087e:	431a      	orrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	601a      	str	r2, [r3, #0]


		Temp = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	82fb      	strh	r3, [r7, #22]

		if(I2Cconfig->I2C_Slave_Addres.Enable_DualADD == 1)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	899b      	ldrh	r3, [r3, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10d      	bne.n	80008ac <MCAL_I2C_Init+0x160>
		{
			Temp = I2C_OAR2_ENDUAL;
 8000890:	2301      	movs	r3, #1
 8000892:	82fb      	strh	r3, [r7, #22]
			Temp |= I2Cconfig->I2C_Slave_Addres.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos ;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	8a1b      	ldrh	r3, [r3, #16]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	b21a      	sxth	r2, r3
 800089c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = Temp ;
 80008a6:	8afa      	ldrh	r2, [r7, #22]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	60da      	str	r2, [r3, #12]
		}

		Temp = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	82fb      	strh	r3, [r7, #22]
		Temp |= I2Cconfig->I2C_Slave_Addres.Primary_Slave_Address <<1 ;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	89db      	ldrh	r3, [r3, #14]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008bc:	4313      	orrs	r3, r2
 80008be:	b21b      	sxth	r3, r3
 80008c0:	82fb      	strh	r3, [r7, #22]
		Temp |= I2Cconfig->I2C_Slave_Addres.I2C_Slave_Address_mode ;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	8a5a      	ldrh	r2, [r3, #18]
 80008c6:	8afb      	ldrh	r3, [r7, #22]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = Temp ;
 80008cc:	8afa      	ldrh	r2, [r7, #22]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	609a      	str	r2, [r3, #8]
		// Not supported (SMBus)
	}


	// Slave mode check if Callback Function  not equal Null!
	if(I2Cconfig->P_Slave_EV_CallBack != NULL)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d038      	beq.n	800094c <MCAL_I2C_Init+0x200>
    {
		I2Cx->CR2 |= I2C_CR2_ITBUFEN ;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITERREN ;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN ;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	605a      	str	r2, [r3, #4]


		// Enable NVIC
		if(I2Cx == I2C1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MCAL_I2C_Init+0x218>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10c      	bne.n	8000920 <MCAL_I2C_Init+0x1d4>
		{
			NVIC_IQR32_ER_I2C1_Enable();
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MCAL_I2C_Init+0x230>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MCAL_I2C_Init+0x230>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6013      	str	r3, [r2, #0]
			NVIC_IQR31_EV_I2C1_Enable();
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MCAL_I2C_Init+0x234>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <MCAL_I2C_Init+0x234>)
 8000918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e00f      	b.n	8000940 <MCAL_I2C_Init+0x1f4>

		}
		else if(I2Cx == I2C2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MCAL_I2C_Init+0x224>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d10b      	bne.n	8000940 <MCAL_I2C_Init+0x1f4>
		{

			NVIC_IQR33_EV_I2C2_Enable();
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MCAL_I2C_Init+0x230>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <MCAL_I2C_Init+0x230>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	6013      	str	r3, [r2, #0]
			NVIC_IQR34_ER_I2C2_Enable();
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MCAL_I2C_Init+0x230>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a10      	ldr	r2, [pc, #64]	; (800097c <MCAL_I2C_Init+0x230>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6013      	str	r3, [r2, #0]
		}

		//Clear Status Register
		I2Cx->SR1 = 0 ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0 ;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]

    }

// Enable Peripherals
I2Cx->CR1 |= (I2C_CR1_PE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f043 0201 	orr.w	r2, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bdb0      	pop	{r4, r5, r7, pc}
 8000960:	007a1200 	.word	0x007a1200
 8000964:	40005400 	.word	0x40005400
 8000968:	2000001c 	.word	0x2000001c
 800096c:	40021000 	.word	0x40021000
 8000970:	40005800 	.word	0x40005800
 8000974:	431bde83 	.word	0x431bde83
 8000978:	000186a0 	.word	0x000186a0
 800097c:	e000e104 	.word	0xe000e104
 8000980:	e000e100 	.word	0xe000e100

08000984 <MACL_I2C_GPIO_Set_PINs>:
	}


}
void MACL_I2C_GPIO_Set_PINs(I2C_typeDef *I2Cx)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	GPIO_configPin_t Pin_Config;


	if(I2Cx == I2C1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <MACL_I2C_GPIO_Set_PINs+0x88>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d118      	bne.n	80009c6 <MACL_I2C_GPIO_Set_PINs+0x42>
	{
		// Port B Pin 6 SCLK
		// Port B pin 7 SDA
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 8000994:	2307      	movs	r3, #7
 8000996:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_PinNumber = GPIO_PIN6 ;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MACL_I2C_GPIO_Set_PINs+0x8c>)
 80009a8:	f7ff fe44 	bl	8000634 <MCAL_GPIO_Init>

		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 80009ac:	2307      	movs	r3, #7
 80009ae:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_PinNumber = GPIO_PIN7 ;
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <MACL_I2C_GPIO_Set_PINs+0x8c>)
 80009c0:	f7ff fe38 	bl	8000634 <MCAL_GPIO_Init>
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &Pin_Config);

	}

}
 80009c4:	e01d      	b.n	8000a02 <MACL_I2C_GPIO_Set_PINs+0x7e>
	else if(I2Cx == I2C2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MACL_I2C_GPIO_Set_PINs+0x90>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d119      	bne.n	8000a02 <MACL_I2C_GPIO_Set_PINs+0x7e>
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 80009ce:	2307      	movs	r3, #7
 80009d0:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_PinNumber = GPIO_PIN10 ;
 80009d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MACL_I2C_GPIO_Set_PINs+0x8c>)
 80009e4:	f7ff fe26 	bl	8000634 <MCAL_GPIO_Init>
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_OD;
 80009e8:	2307      	movs	r3, #7
 80009ea:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_PinNumber = GPIO_PIN11 ;
 80009ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f0:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MACL_I2C_GPIO_Set_PINs+0x8c>)
 80009fe:	f7ff fe19 	bl	8000634 <MCAL_GPIO_Init>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40010c00 	.word	0x40010c00
 8000a14:	40005800 	.word	0x40005800

08000a18 <MCAL_I2C_Master_RX>:

void MCAL_I2C_Master_RX( I2C_typeDef *I2Cx,uint16_t DecADD, uint8_t *DataOut, uint32_t DataLen, Stop_condition stop, Repeate_Start start   )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	817b      	strh	r3, [r7, #10]
	uint8_t index =  I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX ;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a34      	ldr	r2, [pc, #208]	; (8000afc <MCAL_I2C_Master_RX+0xe4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	74fb      	strb	r3, [r7, #19]
	int i = 0 ;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
	         //Generate Start bit
		    I2C_GenerateStart(I2Cx,EnableState, start);
 8000a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a40:	461a      	mov	r2, r3
 8000a42:	2101      	movs	r1, #1
 8000a44:	68f8      	ldr	r0, [r7, #12]
 8000a46:	f000 f8b3 	bl	8000bb0 <I2C_GenerateStart>

		    // wait EV5
		    // EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
			while( !GetFlag_Status (I2Cx, EV5 ) );
 8000a4a:	bf00      	nop
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f8d6 	bl	8000c00 <GetFlag_Status>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f8      	beq.n	8000a4c <MCAL_I2C_Master_RX+0x34>

			//Send address
			I2C_SendAddrss(I2Cx, DecADD, I2C_Direction_Receive);
 8000a5a:	897b      	ldrh	r3, [r7, #10]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	f000 f953 	bl	8000d0c <I2C_SendAddrss>

			//wait EV6
			//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
			while( !GetFlag_Status (I2Cx, EV6 ) );
 8000a66:	bf00      	nop
 8000a68:	2102      	movs	r1, #2
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f8c8 	bl	8000c00 <GetFlag_Status>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <MCAL_I2C_Master_RX+0x50>
            //Enable ACK
			 I2C_ACKConfig(I2Cx, EnableState);
 8000a76:	2101      	movs	r1, #1
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f981 	bl	8000d80 <I2C_ACKConfig>
			if(DataLen)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d01c      	beq.n	8000abe <MCAL_I2C_Master_RX+0xa6>
			{
				for(i = DataLen; i>1; i--)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e012      	b.n	8000ab0 <MCAL_I2C_Master_RX+0x98>
				{
					while( !GetFlag_Status (I2Cx, EV7 ) );
 8000a8a:	bf00      	nop
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f000 f8b6 	bl	8000c00 <GetFlag_Status>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <MCAL_I2C_Master_RX+0x74>

					*DataOut = I2Cx->DR ;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	701a      	strb	r2, [r3, #0]

					DataOut ++ ;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
				for(i = DataLen; i>1; i--)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	dce9      	bgt.n	8000a8a <MCAL_I2C_Master_RX+0x72>

				}

				//NACK
				I2C_ACKConfig(I2Cx, DisableState);
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f961 	bl	8000d80 <I2C_ACKConfig>
			}



			if(stop == withStop)
 8000abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <MCAL_I2C_Master_RX+0xb6>
			{
				I2C_GenerateStopConditon(I2Cx, EnableState);
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f000 f93e 	bl	8000d4a <I2C_GenerateStopConditon>
			}

			//re-enable ACK
			if(GVI2Cconfig[index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 8000ace:	7cfb      	ldrb	r3, [r7, #19]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <MCAL_I2C_Master_RX+0xe8>)
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3314      	adds	r3, #20
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ade:	d104      	bne.n	8000aea <MCAL_I2C_Master_RX+0xd2>
				I2C_ACKConfig(I2Cx, EnableState);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 f94c 	bl	8000d80 <I2C_ACKConfig>
			else
				I2C_ACKConfig(I2Cx, DisableState);


}
 8000ae8:	e003      	b.n	8000af2 <MCAL_I2C_Master_RX+0xda>
				I2C_ACKConfig(I2Cx, DisableState);
 8000aea:	2100      	movs	r1, #0
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f947 	bl	8000d80 <I2C_ACKConfig>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40005400 	.word	0x40005400
 8000b00:	2000001c 	.word	0x2000001c

08000b04 <MCAL_I2C_Master_TX>:

void MCAL_I2C_Master_TX( I2C_typeDef *I2Cx, uint16_t DecADD, uint8_t *DataOut, uint32_t DataLen, Stop_condition stop, Repeate_Start start    )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	460b      	mov	r3, r1
 8000b12:	817b      	strh	r3, [r7, #10]
         int i = 0 ;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
         //Generate Start bit
	    I2C_GenerateStart(I2Cx,EnableState, start);
 8000b18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2101      	movs	r1, #1
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f000 f845 	bl	8000bb0 <I2C_GenerateStart>

	    // wait EV5
	    // EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		while( !GetFlag_Status (I2Cx, EV5 ) );
 8000b26:	bf00      	nop
 8000b28:	2101      	movs	r1, #1
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f000 f868 	bl	8000c00 <GetFlag_Status>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f8      	beq.n	8000b28 <MCAL_I2C_Master_TX+0x24>

		//Send address
		I2C_SendAddrss(I2Cx, DecADD, I2C_Direction_Transmit);
 8000b36:	897b      	ldrh	r3, [r7, #10]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f8e5 	bl	8000d0c <I2C_SendAddrss>

		//wait EV6
		//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
		while( !GetFlag_Status (I2Cx, EV6 ) );
 8000b42:	bf00      	nop
 8000b44:	2102      	movs	r1, #2
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 f85a 	bl	8000c00 <GetFlag_Status>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f8      	beq.n	8000b44 <MCAL_I2C_Master_TX+0x40>

		//wait flag MASTER_BYTE_TRANSMITING
		while( !GetFlag_Status (I2Cx, MASTER_BYTE_TRANSMITING ) );
 8000b52:	bf00      	nop
 8000b54:	4915      	ldr	r1, [pc, #84]	; (8000bac <MCAL_I2C_Master_TX+0xa8>)
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f852 	bl	8000c00 <GetFlag_Status>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f8      	beq.n	8000b54 <MCAL_I2C_Master_TX+0x50>

		for(i = 0; i<DataLen; i++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e011      	b.n	8000b8c <MCAL_I2C_Master_TX+0x88>
		{
			I2Cx->DR = DataOut[i] ;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	611a      	str	r2, [r3, #16]
			//EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
			while( !GetFlag_Status (I2Cx, EV8 ) );
 8000b76:	bf00      	nop
 8000b78:	2103      	movs	r1, #3
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f000 f840 	bl	8000c00 <GetFlag_Status>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f8      	beq.n	8000b78 <MCAL_I2C_Master_TX+0x74>
		for(i = 0; i<DataLen; i++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8e9      	bhi.n	8000b68 <MCAL_I2C_Master_TX+0x64>

		//while( !GetFlag_Status (I2Cx, EV8_2 ) );


		// stop condition
		if(stop == withStop)
 8000b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d103      	bne.n	8000ba4 <MCAL_I2C_Master_TX+0xa0>
		{
			I2C_GenerateStopConditon(I2Cx, EnableState);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f8d3 	bl	8000d4a <I2C_GenerateStopConditon>
		}


}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	00070080 	.word	0x00070080

08000bb0 <I2C_GenerateStart>:


void I2C_GenerateStart(I2C_typeDef *I2Cx,FuntinalState NEWState, Repeate_Start start )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	70fb      	strb	r3, [r7, #3]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	70bb      	strb	r3, [r7, #2]
	if(start != repeateStart)
 8000bc0:	78bb      	ldrb	r3, [r7, #2]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d007      	beq.n	8000bd6 <I2C_GenerateStart+0x26>
	{
		//Check Busy Bus
		while( GetFlag_Status (I2Cx, I2C_FLAG_Busy ) );
 8000bc6:	bf00      	nop
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f818 	bl	8000c00 <GetFlag_Status>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f8      	bne.n	8000bc8 <I2C_GenerateStart+0x18>

	}

	// check start condition

	if(NEWState != DisableState)
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <I2C_GenerateStart+0x3a>
	{

	   I2Cx->CR1 |= I2C_CR1_START ;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}
}
 8000be8:	e005      	b.n	8000bf6 <I2C_GenerateStart+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <GetFlag_Status>:




Flag_Status GetFlag_Status(I2C_typeDef *I2Cx, Status flag)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyData;
	uint32_t flag1 = 0, flag2 = 0, lastEvent = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]

	Flag_Status bitState = Reset ;
 8000c16:	2300      	movs	r3, #0
 8000c18:	77fb      	strb	r3, [r7, #31]
	switch(flag){
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b05      	cmp	r3, #5
 8000c1e:	d811      	bhi.n	8000c44 <GetFlag_Status+0x44>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b05      	cmp	r3, #5
 8000c24:	d86a      	bhi.n	8000cfc <GetFlag_Status+0xfc>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <GetFlag_Status+0x2c>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000c4f 	.word	0x08000c4f
 8000c30:	08000c67 	.word	0x08000c67
 8000c34:	08000c7f 	.word	0x08000c7f
 8000c38:	08000ccd 	.word	0x08000ccd
 8000c3c:	08000ccd 	.word	0x08000ccd
 8000c40:	08000ce5 	.word	0x08000ce5
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <GetFlag_Status+0x108>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d024      	beq.n	8000c96 <GetFlag_Status+0x96>
 8000c4c:	e056      	b.n	8000cfc <GetFlag_Status+0xfc>


	case I2C_FLAG_Busy:
	{
		if( (I2Cx->SR2) & I2C_SR2_BUSY)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <GetFlag_Status+0x60>
			bitState  = Set;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	77fb      	strb	r3, [r7, #31]
		else
			bitState = Reset ;

		break;
 8000c5e:	e04d      	b.n	8000cfc <GetFlag_Status+0xfc>
			bitState = Reset ;
 8000c60:	2300      	movs	r3, #0
 8000c62:	77fb      	strb	r3, [r7, #31]
		break;
 8000c64:	e04a      	b.n	8000cfc <GetFlag_Status+0xfc>
	}


	case EV5:
	{
		if( (I2Cx->SR1) & I2C_SR1_SB)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <GetFlag_Status+0x78>
			bitState  = Set;
 8000c72:	2301      	movs	r3, #1
 8000c74:	77fb      	strb	r3, [r7, #31]
		else
			bitState = Reset ;

		break;
 8000c76:	e041      	b.n	8000cfc <GetFlag_Status+0xfc>
			bitState = Reset ;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	77fb      	strb	r3, [r7, #31]
		break;
 8000c7c:	e03e      	b.n	8000cfc <GetFlag_Status+0xfc>
	}

	case EV6:
	{
		if( (I2Cx->SR1) & I2C_SR1_ADDR)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <GetFlag_Status+0x90>
			bitState  = Set;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	77fb      	strb	r3, [r7, #31]
		else
			bitState = Reset ;

		//dummyData = I2Cx->SR2 ;
		break;
 8000c8e:	e035      	b.n	8000cfc <GetFlag_Status+0xfc>
			bitState = Reset ;
 8000c90:	2300      	movs	r3, #0
 8000c92:	77fb      	strb	r3, [r7, #31]
		break;
 8000c94:	e032      	b.n	8000cfc <GetFlag_Status+0xfc>


	case MASTER_BYTE_TRANSMITING:
	{

		flag1 = I2Cx->SR1;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	617b      	str	r3, [r7, #20]
		flag2 = flag2<<16;
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	617b      	str	r3, [r7, #20]
		lastEvent = (flag1 | flag2) &((uint32_t)0x000FFFFFF) ;
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cb2:	613b      	str	r3, [r7, #16]

		if( (lastEvent & flag ) == flag )
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d102      	bne.n	8000cc6 <GetFlag_Status+0xc6>
		{
			bitState  = Set;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitState = Reset ;
		}
		break;
 8000cc4:	e01a      	b.n	8000cfc <GetFlag_Status+0xfc>
			bitState = Reset ;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	77fb      	strb	r3, [r7, #31]
		break;
 8000cca:	e017      	b.n	8000cfc <GetFlag_Status+0xfc>

	}
	case EV8_1:
	case EV8:
	{
		if( (I2Cx->SR1) & I2C_SR1_TXE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <GetFlag_Status+0xde>
			bitState  = Set;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	77fb      	strb	r3, [r7, #31]
		else
			bitState = Reset ;

		//dummyData = I2Cx->SR2 ;
		break;
 8000cdc:	e00e      	b.n	8000cfc <GetFlag_Status+0xfc>
			bitState = Reset ;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	77fb      	strb	r3, [r7, #31]
		break;
 8000ce2:	e00b      	b.n	8000cfc <GetFlag_Status+0xfc>
	}

	case EV7:
	{
		if( (I2Cx->SR1) & I2C_SR1_RXNE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <GetFlag_Status+0xf6>
			bitState  = Set;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	77fb      	strb	r3, [r7, #31]
		else
			bitState = Reset ;

		//dummyData = I2Cx->SR2 ;
		break;
 8000cf4:	e001      	b.n	8000cfa <GetFlag_Status+0xfa>
			bitState = Reset ;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	77fb      	strb	r3, [r7, #31]
		break;
 8000cfa:	bf00      	nop

	}



	return bitState ;
 8000cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	; 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	00070080 	.word	0x00070080

08000d0c <I2C_SendAddrss>:

void I2C_SendAddrss(I2C_typeDef *I2Cx, uint16_t Address, I2C_Direction direct)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
	Address = (Address<<1) ;
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	807b      	strh	r3, [r7, #2]

	if(direct != I2C_Direction_Transmit)
 8000d22:	787b      	ldrb	r3, [r7, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <I2C_SendAddrss+0x26>
	{
		Address |= 1<<0 ;
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	e003      	b.n	8000d3a <I2C_SendAddrss+0x2e>

	}
	else
	{
		Address &= ~(1<<0)  ;
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = Address ;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <I2C_GenerateStopConditon>:


void I2C_GenerateStopConditon(I2C_typeDef *I2Cx , FuntinalState NEWState)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	70fb      	strb	r3, [r7, #3]
     if( NEWState != DisableState )
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <I2C_GenerateStopConditon+0x20>
     {
         I2Cx->CR1 |= I2C_CR1_STOP  ;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	601a      	str	r2, [r3, #0]
     }
     else
     {
    	 I2Cx->CR1 &= ~(I2C_CR1_STOP)  ;
     }
}
 8000d68:	e005      	b.n	8000d76 <I2C_GenerateStopConditon+0x2c>
    	 I2Cx->CR1 &= ~(I2C_CR1_STOP)  ;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <I2C_ACKConfig>:
{
	return (uint8_t) I2Cx->DR ;
}

void I2C_ACKConfig(I2C_typeDef *I2Cx, FuntinalState State)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
	if(State == EnableState)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d106      	bne.n	8000da0 <I2C_ACKConfig+0x20>
	{
		/* Enable Automatic ACK */
		I2Cx->CR1 |= (I2C_CR1_ACK);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable Automatic ACK */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000d9e:	e005      	b.n	8000dac <I2C_ACKConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	uint32_t retVal;
	switch((RCC->CFGR >> 2)& 0b11)
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d00c      	beq.n	8000de6 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d80d      	bhi.n	8000dec <MCAL_RCC_GetSYS_CLKFreq+0x34>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <MCAL_RCC_GetSYS_CLKFreq+0x22>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d003      	beq.n	8000de0 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000dd8:	e008      	b.n	8000dec <MCAL_RCC_GetSYS_CLKFreq+0x34>
	{
		case 0:
			retVal = HSI_RC_CLK;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MCAL_RCC_GetSYS_CLKFreq+0x44>)
 8000ddc:	607b      	str	r3, [r7, #4]
			break;
 8000dde:	e005      	b.n	8000dec <MCAL_RCC_GetSYS_CLKFreq+0x34>

		case 1:
			// TO DO need to calculate it // HSE user should specify it
			retVal = HSE_CLK;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MCAL_RCC_GetSYS_CLKFreq+0x48>)
 8000de2:	607b      	str	r3, [r7, #4]
			break;
 8000de4:	e002      	b.n	8000dec <MCAL_RCC_GetSYS_CLKFreq+0x34>

		case 2:
			// TO DO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			retVal = 16000000;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MCAL_RCC_GetSYS_CLKFreq+0x48>)
 8000de8:	607b      	str	r3, [r7, #4]
			break;
 8000dea:	bf00      	nop
	}

return retVal;
 8000dec:	687b      	ldr	r3, [r7, #4]

}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	007a1200 	.word	0x007a1200
 8000e00:	00f42400 	.word	0x00f42400

08000e04 <MCAL_RCC_GetHCLKFreq>:



uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]); // The first shift is multiplication
 8000e08:	f7ff ffd6 	bl	8000db8 <MCAL_RCC_GetSYS_CLKFreq>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	f003 030f 	and.w	r3, r3, #15
 8000e18:	4903      	ldr	r1, [pc, #12]	; (8000e28 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000e1a:	5ccb      	ldrb	r3, [r1, r3]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	080010b0 	.word	0x080010b0

08000e2c <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]); // The first shift is multiplication
 8000e30:	f7ff ffe8 	bl	8000e04 <MCAL_RCC_GetHCLKFreq>
 8000e34:	4602      	mov	r2, r0
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	4903      	ldr	r1, [pc, #12]	; (8000e50 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000e42:	5ccb      	ldrb	r3, [r1, r3]
 8000e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	080010a8 	.word	0x080010a8

08000e54 <SPI1_IRQHandler>:
 * ============== IQR ==========
=========================================== */


void SPI1_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC iqr_SRC;
	iqr_SRC.TXE  = ( ( SPI1->SR & (1<<1) ) >> 1);
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <SPI1_IRQHandler+0x54>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	793b      	ldrb	r3, [r7, #4]
 8000e68:	f362 0300 	bfi	r3, r2, #0, #1
 8000e6c:	713b      	strb	r3, [r7, #4]
	iqr_SRC.RXNE = ( ( SPI1->SR & (1<<0) ) >> 0);
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <SPI1_IRQHandler+0x54>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e7e:	713b      	strb	r3, [r7, #4]
	iqr_SRC.ERR  = ( ( SPI1->SR & (1<<4) ) >> 4);
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <SPI1_IRQHandler+0x54>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e92:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(iqr_SRC);
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SPI1_IRQHandler+0x58>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	7938      	ldrb	r0, [r7, #4]
 8000e9c:	4798      	blx	r3
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40013000 	.word	0x40013000
 8000eac:	2000005c 	.word	0x2000005c

08000eb0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC iqr_SRC;
	iqr_SRC.TXE  = ( ( SPI2->SR & (1<<1) ) >> 1);
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <SPI2_IRQHandler+0x54>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	793b      	ldrb	r3, [r7, #4]
 8000ec4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ec8:	713b      	strb	r3, [r7, #4]
	iqr_SRC.RXNE = ( ( SPI2->SR & (1<<0) ) >> 0);
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <SPI2_IRQHandler+0x54>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	793b      	ldrb	r3, [r7, #4]
 8000ed6:	f362 0341 	bfi	r3, r2, #1, #1
 8000eda:	713b      	strb	r3, [r7, #4]
	iqr_SRC.ERR  = ( ( SPI2->SR & (1<<4) ) >> 4);
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <SPI2_IRQHandler+0x54>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	f362 0382 	bfi	r3, r2, #2, #1
 8000eee:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(iqr_SRC);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SPI2_IRQHandler+0x58>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	7938      	ldrb	r0, [r7, #4]
 8000ef8:	4798      	blx	r3

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40003800 	.word	0x40003800
 8000f08:	2000005c 	.word	0x2000005c

08000f0c <USART1_IRQHandler>:

/*============================================
 * ========== Set Callback function ==========
============================================ */
void USART1_IRQHandler (void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <USART1_IRQHandler+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4798      	blx	r3
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000064 	.word	0x20000064

08000f20 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <USART2_IRQHandler+0x10>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	4798      	blx	r3
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000064 	.word	0x20000064

08000f34 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <USART3_IRQHandler+0x10>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	4798      	blx	r3
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000064 	.word	0x20000064

08000f48 <main>:
//
//}


int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0



	RCC_GPIOA_CLK_EN();
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <main+0x9c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <main+0x9c>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <main+0x9c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <main+0x9c>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <main+0x9c>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <main+0x9c>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6193      	str	r3, [r2, #24]

   // Test Case 1
	uint8_t ch1 [] = {0x01,0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <main+0xa0>)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	6018      	str	r0, [r3, #0]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	8019      	strh	r1, [r3, #0]
 8000f82:	3302      	adds	r3, #2
 8000f84:	0c0a      	lsrs	r2, r1, #16
 8000f86:	701a      	strb	r2, [r3, #0]
	uint8_t ch2 [7] = {0};
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2100      	movs	r1, #0
 8000f90:	460a      	mov	r2, r1
 8000f92:	801a      	strh	r2, [r3, #0]
 8000f94:	460a      	mov	r2, r1
 8000f96:	709a      	strb	r2, [r3, #2]
	HAL_EEPROM_Init();
 8000f98:	f7ff f8ea 	bl	8000170 <HAL_EEPROM_Init>

	HAL_EEPROM_Write_NBytes(0xAF, ch1, 7) ;
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	20af      	movs	r0, #175	; 0xaf
 8000fa6:	f7ff f903 	bl	80001b0 <HAL_EEPROM_Write_NBytes>

	HAL_EEPROM_Read_NBytes(0xAF, ch2, 7);
 8000faa:	463b      	mov	r3, r7
 8000fac:	2207      	movs	r2, #7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	20af      	movs	r0, #175	; 0xaf
 8000fb2:	f7ff f94d 	bl	8000250 <HAL_EEPROM_Read_NBytes>


    // Test case 2
	ch1[0] = 0xA ;
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB ;
 8000fba:	230b      	movs	r3, #11
 8000fbc:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD ;
 8000fc2:	230d      	movs	r3, #13
 8000fc4:	72fb      	strb	r3, [r7, #11]

	HAL_EEPROM_Write_NBytes(0xFF, ch1, 4) ;
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2204      	movs	r2, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	f7ff f8ee 	bl	80001b0 <HAL_EEPROM_Write_NBytes>

	HAL_EEPROM_Read_NBytes(0xFF, ch2, 4);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	20ff      	movs	r0, #255	; 0xff
 8000fdc:	f7ff f938 	bl	8000250 <HAL_EEPROM_Read_NBytes>


	/* Loop forever */


	while(1){
 8000fe0:	e7fe      	b.n	8000fe0 <main+0x98>
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	080010a0 	.word	0x080010a0

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ff0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800101a:	f000 f811 	bl	8001040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff ff93 	bl	8000f48 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001030:	080010c8 	.word	0x080010c8
  ldr r2, =_sbss
 8001034:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001038:	200000b0 	.word	0x200000b0

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>
	...

08001040 <__libc_init_array>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	2600      	movs	r6, #0
 8001044:	4d0c      	ldr	r5, [pc, #48]	; (8001078 <__libc_init_array+0x38>)
 8001046:	4c0d      	ldr	r4, [pc, #52]	; (800107c <__libc_init_array+0x3c>)
 8001048:	1b64      	subs	r4, r4, r5
 800104a:	10a4      	asrs	r4, r4, #2
 800104c:	42a6      	cmp	r6, r4
 800104e:	d109      	bne.n	8001064 <__libc_init_array+0x24>
 8001050:	f000 f81a 	bl	8001088 <_init>
 8001054:	2600      	movs	r6, #0
 8001056:	4d0a      	ldr	r5, [pc, #40]	; (8001080 <__libc_init_array+0x40>)
 8001058:	4c0a      	ldr	r4, [pc, #40]	; (8001084 <__libc_init_array+0x44>)
 800105a:	1b64      	subs	r4, r4, r5
 800105c:	10a4      	asrs	r4, r4, #2
 800105e:	42a6      	cmp	r6, r4
 8001060:	d105      	bne.n	800106e <__libc_init_array+0x2e>
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	f855 3b04 	ldr.w	r3, [r5], #4
 8001068:	4798      	blx	r3
 800106a:	3601      	adds	r6, #1
 800106c:	e7ee      	b.n	800104c <__libc_init_array+0xc>
 800106e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001072:	4798      	blx	r3
 8001074:	3601      	adds	r6, #1
 8001076:	e7f2      	b.n	800105e <__libc_init_array+0x1e>
 8001078:	080010c0 	.word	0x080010c0
 800107c:	080010c0 	.word	0x080010c0
 8001080:	080010c0 	.word	0x080010c0
 8001084:	080010c4 	.word	0x080010c4

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	bf00      	nop
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
