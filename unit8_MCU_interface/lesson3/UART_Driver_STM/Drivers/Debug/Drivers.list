
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c64  08000c64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c7c  08000c7c  00010c84  2**0
                  CONTENTS
  4 .ARM          00000000  08000c7c  08000c7c  00010c84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c7c  08000c84  00010c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000c84  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000c84  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004515  00000000  00000000  00010cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b0d  00000000  00000000  000151c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a28  00000000  00000000  00015ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  000166f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  000168c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ba0  00000000  00000000  00016a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000278c  00000000  00000000  000175d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a29a  00000000  00000000  00019d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00023ff6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000578  00000000  00000000  0002404c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c4c 	.word	0x08000c4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c4c 	.word	0x08000c4c

08000170 <EXTI0_IRQHandler>:
//PRx: Pending bit
//0: No trigger request occurred
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is
void EXTI0_IRQHandler(void)
{  //This bit rc_w1
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//This bit rc_w1
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<5)){EXTI->PR |= 1<<5; GP_callback[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if((EXTI->PR)& (1<<6)){EXTI->PR |= 1<<6; GP_callback[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if((EXTI->PR)& (1<<7)){EXTI->PR |= 1<<7; GP_callback[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if((EXTI->PR)& (1<<8)){GP_callback[8]();EXTI->PR |= 1<<8;}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000290:	6a1b      	ldr	r3, [r3, #32]
 8000292:	4798      	blx	r3
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6153      	str	r3, [r2, #20]
	if((EXTI->PR)& (1<<9)){EXTI->PR |= 1<<9; GP_callback[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if((EXTI->PR)& (1<<10)){EXTI->PR |= 1<<10; GP_callback[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if((EXTI->PR)& (1<<11)){EXTI->PR |= 1<<11; GP_callback[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if((EXTI->PR)& (1<<12)){EXTI->PR |= 1<<12; GP_callback[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if((EXTI->PR)& (1<<13)){EXTI->PR |= 1<<13; GP_callback[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if((EXTI->PR)& (1<<14)){EXTI->PR |= 1<<14; GP_callback[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if((EXTI->PR)& (1<<15)){EXTI->PR |= 1<<15; GP_callback[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <get_Pin_Postion>:

#include "STM32F103x8_gpio_driver.h"



uint8_t get_Pin_Postion(uint16_t GPIO_PinNumber ){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_PinNumber){
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <get_Pin_Postion+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <get_Pin_Postion+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <get_Pin_Postion+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <get_Pin_Postion+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <get_Pin_Postion+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <get_Pin_Postion+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <get_Pin_Postion+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <get_Pin_Postion+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <get_Pin_Postion+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <get_Pin_Postion+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <get_Pin_Postion+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <get_Pin_Postion+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <get_Pin_Postion+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <get_Pin_Postion+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <get_Pin_Postion+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <get_Pin_Postion+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <get_Pin_Postion+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <get_Pin_Postion+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <get_Pin_Postion+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <get_Pin_Postion+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <get_Pin_Postion+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <get_Pin_Postion+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <get_Pin_Postion+0x13a>
 80004b0:	e01f      	b.n	80004f2 <get_Pin_Postion+0x162>
	case GPIO_PIN0:
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01e      	b.n	80004f4 <get_Pin_Postion+0x164>
		break;
	case GPIO_PIN1:
			return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01c      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN2:
			return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01a      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN3:
			return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e018      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN4:
			return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e016      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN5:
			return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e014      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN6:
			return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e012      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN7:
			return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e010      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN8:
			return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00e      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN9:
			return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00c      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN10:
			return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00a      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN11:
			return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e008      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN12:
			return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e006      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN13:
			return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e004      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN14:
			return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e002      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;
	case GPIO_PIN15:
			return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e000      	b.n	80004f4 <get_Pin_Postion+0x164>
			break;


	}

	return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MCAL_GPIO_Init>:
*              when configure the GPIO, first check TRM and data sheet of MCU and kit to know available Ports
*/


void MCAL_GPIO_Init(GPIOx_typeDef* GPIOx, GPIO_configPin_t* PinConfig)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	volatile uint32_t *cofigReg =NULL;  //((void *)0)
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
	cofigReg = ((PinConfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	2bff      	cmp	r3, #255	; 0xff
 8000514:	d801      	bhi.n	800051a <MCAL_GPIO_Init+0x1a>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	e001      	b.n	800051e <MCAL_GPIO_Init+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60bb      	str	r3, [r7, #8]
	*cofigReg &= ~(0xf<<get_Pin_Postion(PinConfig->GPIO_PinNumber)) ; //Reset the nibble in CRL Or CRH
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff33 	bl	8000390 <get_Pin_Postion>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	230f      	movs	r3, #15
 8000530:	4093      	lsls	r3, r2
 8000532:	43da      	mvns	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	401a      	ands	r2, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	601a      	str	r2, [r3, #0]
	uint8_t pinConfigLoc = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	73fb      	strb	r3, [r7, #15]
	if((PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP))
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b07      	cmp	r3, #7
 8000548:	d00b      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	2b06      	cmp	r3, #6
 8000550:	d007      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	2b05      	cmp	r3, #5
 8000558:	d003      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d10e      	bne.n	8000580 <MCAL_GPIO_Init+0x80>
		//00: General purpose output push-pull (4-4=0)
		//01: General purpose output Open-drain (5-4=1)
		//10: Alternate function output Push-pull (6-4=1)
		//11: Alternate function output Open-drain (7-4=1)

		pinConfigLoc = ( ( (PinConfig->GPIO_Mode)-4 )<<2 | (PinConfig->GPIO_Output_Speed) ) & 0xf;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	3b04      	subs	r3, #4
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	b25a      	sxtb	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e037      	b.n	80005f0 <MCAL_GPIO_Init+0xf0>
		01: Floating input (reset state)
		10: Input with pull-up / pull-dow*/



			if((PinConfig->GPIO_Mode == GPIO_MODE_ANALOG || PinConfig->GPIO_Mode ==GPIO_MODE_INPUT_AF))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <MCAL_GPIO_Init+0x90>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	2b08      	cmp	r3, #8
 800058e:	d107      	bne.n	80005a0 <MCAL_GPIO_Init+0xa0>
			{
				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e027      	b.n	80005f0 <MCAL_GPIO_Init+0xf0>
			}
			else if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_AF)  // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d108      	bne.n	80005ba <MCAL_GPIO_Init+0xba>
			{

				pinConfigLoc = ((PinConfig->GPIO_Mode-1)<<2 | (0x00)) & 0xf;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	789b      	ldrb	r3, [r3, #2]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e01a      	b.n	80005f0 <MCAL_GPIO_Init+0xf0>
			}
			else{


				pinConfigLoc = ((PinConfig->GPIO_Mode)<<2 | (0x00)) & 0xf;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	789b      	ldrb	r3, [r3, #2]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	73fb      	strb	r3, [r7, #15]

				if(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	789b      	ldrb	r3, [r3, #2]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d107      	bne.n	80005e0 <MCAL_GPIO_Init+0xe0>
					//Pull up (set bit according to pin number)
					GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	8812      	ldrh	r2, [r2, #0]
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	e007      	b.n	80005f0 <MCAL_GPIO_Init+0xf0>

				}
				else{
					// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
					GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);// Pull down (reset bit according to pin number)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	8812      	ldrh	r2, [r2, #0]
 80005e8:	43d2      	mvns	r2, r2
 80005ea:	401a      	ands	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	60da      	str	r2, [r3, #12]

			}

	}
// Set configuration to CRL OR CRH
(*cofigReg) |= ((pinConfigLoc) << get_Pin_Postion(PinConfig->GPIO_PinNumber)) ;
 80005f0:	7bfc      	ldrb	r4, [r7, #15]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff feca 	bl	8000390 <get_Pin_Postion>
 80005fc:	4603      	mov	r3, r0
 80005fe:	fa04 f203 	lsl.w	r2, r4, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	431a      	orrs	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	601a      	str	r2, [r3, #0]


}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	uint32_t retVal;
	switch((RCC->CFGR >> 2)& 0b11)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MCAL_RCC_GetSYS_CLKFreq+0x40>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	f003 0303 	and.w	r3, r3, #3
 8000624:	2b02      	cmp	r3, #2
 8000626:	d00c      	beq.n	8000642 <MCAL_RCC_GetSYS_CLKFreq+0x2e>
 8000628:	2b02      	cmp	r3, #2
 800062a:	d80d      	bhi.n	8000648 <MCAL_RCC_GetSYS_CLKFreq+0x34>
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <MCAL_RCC_GetSYS_CLKFreq+0x22>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d003      	beq.n	800063c <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000634:	e008      	b.n	8000648 <MCAL_RCC_GetSYS_CLKFreq+0x34>
	{
		case 0:
			retVal = HSI_RC_CLK;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MCAL_RCC_GetSYS_CLKFreq+0x44>)
 8000638:	607b      	str	r3, [r7, #4]
			break;
 800063a:	e005      	b.n	8000648 <MCAL_RCC_GetSYS_CLKFreq+0x34>

		case 1:
			// TO DO need to calculate it // HSE user should specify it
			retVal = HSE_CLK;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MCAL_RCC_GetSYS_CLKFreq+0x48>)
 800063e:	607b      	str	r3, [r7, #4]
			break;
 8000640:	e002      	b.n	8000648 <MCAL_RCC_GetSYS_CLKFreq+0x34>

		case 2:
			// TO DO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			retVal = 16000000;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MCAL_RCC_GetSYS_CLKFreq+0x48>)
 8000644:	607b      	str	r3, [r7, #4]
			break;
 8000646:	bf00      	nop
	}

return retVal;
 8000648:	687b      	ldr	r3, [r7, #4]

}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	007a1200 	.word	0x007a1200
 800065c:	00f42400 	.word	0x00f42400

08000660 <MCAL_RCC_GetHCLKFreq>:



uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]); // The first shift is multiplication
 8000664:	f7ff ffd6 	bl	8000614 <MCAL_RCC_GetSYS_CLKFreq>
 8000668:	4602      	mov	r2, r0
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <MCAL_RCC_GetHCLKFreq+0x20>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	4903      	ldr	r1, [pc, #12]	; (8000684 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000676:	5ccb      	ldrb	r3, [r1, r3]
 8000678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	08000c6c 	.word	0x08000c6c

08000688 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]); // The first shift is multiplication
 800068c:	f7ff ffe8 	bl	8000660 <MCAL_RCC_GetHCLKFreq>
 8000690:	4602      	mov	r2, r0
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	4903      	ldr	r1, [pc, #12]	; (80006ac <MCAL_RCC_GetPCLK1Freq+0x24>)
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08000c64 	.word	0x08000c64

080006b0 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed pre-scaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]); // The first shift is multiplication
 80006b4:	f7ff ffd4 	bl	8000660 <MCAL_RCC_GetHCLKFreq>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	0adb      	lsrs	r3, r3, #11
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	4903      	ldr	r1, [pc, #12]	; (80006d4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006c6:	5ccb      	ldrb	r3, [r1, r3]
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	08000c64 	.word	0x08000c64

080006d8 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_typeDef* USARTx, USART_config* UART_Config)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a59      	ldr	r2, [pc, #356]	; (800084c <MCAL_UART_Init+0x174>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d109      	bne.n	80006fe <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <MCAL_UART_Init+0x178>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a58      	ldr	r2, [pc, #352]	; (8000850 <MCAL_UART_Init+0x178>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f4:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 80006f6:	4a57      	ldr	r2, [pc, #348]	; (8000854 <MCAL_UART_Init+0x17c>)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	e01a      	b.n	8000734 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a55      	ldr	r2, [pc, #340]	; (8000858 <MCAL_UART_Init+0x180>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d109      	bne.n	800071a <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <MCAL_UART_Init+0x178>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a51      	ldr	r2, [pc, #324]	; (8000850 <MCAL_UART_Init+0x178>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8000712:	4a50      	ldr	r2, [pc, #320]	; (8000854 <MCAL_UART_Init+0x17c>)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6053      	str	r3, [r2, #4]
 8000718:	e00c      	b.n	8000734 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a4f      	ldr	r2, [pc, #316]	; (800085c <MCAL_UART_Init+0x184>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d108      	bne.n	8000734 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000722:	4b4b      	ldr	r3, [pc, #300]	; (8000850 <MCAL_UART_Init+0x178>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a4a      	ldr	r2, [pc, #296]	; (8000850 <MCAL_UART_Init+0x178>)
 8000728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800072c:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 800072e:	4a49      	ldr	r2, [pc, #292]	; (8000854 <MCAL_UART_Init+0x17c>)
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	7a12      	ldrb	r2, [r2, #8]
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	7a52      	ldrb	r2, [r2, #9]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	7a92      	ldrb	r2, [r2, #10]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	7ad2      	ldrb	r2, [r2, #11]
 8000780:	431a      	orrs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a30      	ldr	r2, [pc, #192]	; (800084c <MCAL_UART_Init+0x174>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d103      	bne.n	8000796 <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 800078e:	f7ff ff8f 	bl	80006b0 <MCAL_RCC_GetPCLK2Freq>
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	e002      	b.n	800079c <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000796:	f7ff ff77 	bl	8000688 <MCAL_RCC_GetPCLK1Freq>
 800079a:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a8:	0119      	lsls	r1, r3, #4
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009a      	lsls	r2, r3, #2
 80007b4:	441a      	add	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	fb00 f303 	mul.w	r3, r0, r3
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <MCAL_UART_Init+0x188>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	095b      	lsrs	r3, r3, #5
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	430b      	orrs	r3, r1
 80007e4:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	7b1b      	ldrb	r3, [r3, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d026      	beq.n	8000842 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	7b12      	ldrb	r2, [r2, #12]
 80007fc:	431a      	orrs	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <MCAL_UART_Init+0x174>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <MCAL_UART_Init+0x140>
			NVIC_IQR37_USART1_Enable();
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MCAL_UART_Init+0x18c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MCAL_UART_Init+0x18c>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	6013      	str	r3, [r2, #0]
		}
		else if (USARTx == USART3){
			NVIC_IQR39_USART3_Enable();
		}
	}
}
 8000816:	e014      	b.n	8000842 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2){
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MCAL_UART_Init+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <MCAL_UART_Init+0x156>
			NVIC_IQR38_USART2_Enable();
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MCAL_UART_Init+0x18c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <MCAL_UART_Init+0x18c>)
 8000826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	e009      	b.n	8000842 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <MCAL_UART_Init+0x184>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d105      	bne.n	8000842 <MCAL_UART_Init+0x16a>
			NVIC_IQR39_USART3_Enable();
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MCAL_UART_Init+0x18c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <MCAL_UART_Init+0x18c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6013      	str	r3, [r2, #0]
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40013800 	.word	0x40013800
 8000850:	40021000 	.word	0x40021000
 8000854:	2000001c 	.word	0x2000001c
 8000858:	40004400 	.word	0x40004400
 800085c:	40004800 	.word	0x40004800
 8000860:	51eb851f 	.word	0x51eb851f
 8000864:	e000e104 	.word	0xe000e104

08000868 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_typeDef* USARTx)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	GPIO_configPin_t Pin_Config;

	if (USARTx == USART1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a3b      	ldr	r2, [pc, #236]	; (8000960 <MCAL_UART_GPIO_Set_Pins+0xf8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d118      	bne.n	80008aa <MCAL_UART_GPIO_Set_Pins+0x42>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN9;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800087e:	2306      	movs	r3, #6
 8000880:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Output_Speed= GPIO_SPEED_10M;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4835      	ldr	r0, [pc, #212]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 800088e:	f7ff fe37 	bl	8000500 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN10;
 8000892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000896:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode= GPIO_MODE_INPUT_AF;
 8000898:	2308      	movs	r3, #8
 800089a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4830      	ldr	r0, [pc, #192]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80008a4:	f7ff fe2c 	bl	8000500 <MCAL_GPIO_Init>
			Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
		}
	}
}
 80008a8:	e055      	b.n	8000956 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a2e      	ldr	r2, [pc, #184]	; (8000968 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d125      	bne.n	80008fe <MCAL_UART_GPIO_Set_Pins+0x96>
		Pin_Config.GPIO_PinNumber = GPIO_PIN2;
 80008b2:	2304      	movs	r3, #4
 80008b4:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80008b6:	2306      	movs	r3, #6
 80008b8:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	4827      	ldr	r0, [pc, #156]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80008c6:	f7ff fe1b 	bl	8000500 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN3;
 80008ca:	2308      	movs	r3, #8
 80008cc:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_AF;
 80008ce:	2308      	movs	r3, #8
 80008d0:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80008da:	f7ff fe11 	bl	8000500 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS)
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <MCAL_UART_GPIO_Set_Pins+0x104>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	7adb      	ldrb	r3, [r3, #11]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d036      	beq.n	8000956 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	481b      	ldr	r0, [pc, #108]	; (8000964 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80008f8:	f7ff fe02 	bl	8000500 <MCAL_GPIO_Init>
}
 80008fc:	e02b      	b.n	8000956 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d127      	bne.n	8000956 <MCAL_UART_GPIO_Set_Pins+0xee>
		Pin_Config.GPIO_PinNumber = GPIO_PIN10;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800090c:	2306      	movs	r3, #6
 800090e:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4816      	ldr	r0, [pc, #88]	; (8000974 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 800091c:	f7ff fdf0 	bl	8000500 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN11;
 8000920:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000924:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_AF;
 8000926:	2308      	movs	r3, #8
 8000928:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000932:	f7ff fde5 	bl	8000500 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	7adb      	ldrb	r3, [r3, #11]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00a      	beq.n	8000956 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN13;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000946:	2301      	movs	r3, #1
 8000948:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000952:	f7ff fdd5 	bl	8000500 <MCAL_GPIO_Init>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40013800 	.word	0x40013800
 8000964:	40010800 	.word	0x40010800
 8000968:	40004400 	.word	0x40004400
 800096c:	2000001c 	.word	0x2000001c
 8000970:	40004800 	.word	0x40004800
 8000974:	40010c00 	.word	0x40010c00

08000978 <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_typeDef* USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism PollingEn)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	4613      	mov	r3, r2
 8000984:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d106      	bne.n	800099a <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 800098c:	bf00      	nop
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f9      	beq.n	800098e <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MCAL_UART_SendData+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10a      	bne.n	80009b8 <MCAL_UART_SendData+0x40>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MCAL_UART_SendData+0x88>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	7a1b      	ldrb	r3, [r3, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d122      	bne.n	80009f2 <MCAL_UART_SendData+0x7a>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 80009b6:	e01c      	b.n	80009f2 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART2)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MCAL_UART_SendData+0x8c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d10a      	bne.n	80009d6 <MCAL_UART_SendData+0x5e>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MCAL_UART_SendData+0x88>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	7a1b      	ldrb	r3, [r3, #8]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d113      	bne.n	80009f2 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	605a      	str	r2, [r3, #4]
}
 80009d4:	e00d      	b.n	80009f2 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART3)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <MCAL_UART_SendData+0x90>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d109      	bne.n	80009f2 <MCAL_UART_SendData+0x7a>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MCAL_UART_SendData+0x88>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	605a      	str	r2, [r3, #4]
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40013800 	.word	0x40013800
 8000a00:	2000001c 	.word	0x2000001c
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40004800 	.word	0x40004800

08000a0c <MCAL_UART_ReceiveData>:
 * Note				- Initialize UART first
 *
 */

void MCAL_UART_ReceiveData(USART_typeDef* USARTx, uint16_t* pRxBuffer,  enum Polling_Mechanism PollingEn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == enable)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d106      	bne.n	8000a2e <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 8000a20:	bf00      	nop
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f9      	beq.n	8000a22 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <MCAL_UART_ReceiveData+0xc8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d115      	bne.n	8000a62 <MCAL_UART_ReceiveData+0x56>
			}
		}
		/* 8 Bits Data */
		else
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MCAL_UART_ReceiveData+0xcc>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7a5b      	ldrb	r3, [r3, #9]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d107      	bne.n	8000a50 <MCAL_UART_ReceiveData+0x44>
			{
				/* All 8 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 8000a4e:	e03b      	b.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	801a      	strh	r2, [r3, #0]
}
 8000a60:	e032      	b.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <MCAL_UART_ReceiveData+0xd0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d115      	bne.n	8000a96 <MCAL_UART_ReceiveData+0x8a>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MCAL_UART_ReceiveData+0xcc>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	7a5b      	ldrb	r3, [r3, #9]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d107      	bne.n	8000a84 <MCAL_UART_ReceiveData+0x78>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	801a      	strh	r2, [r3, #0]
}
 8000a82:	e021      	b.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	801a      	strh	r2, [r3, #0]
}
 8000a94:	e018      	b.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART3)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <MCAL_UART_ReceiveData+0xd4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d114      	bne.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MCAL_UART_ReceiveData+0xcc>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	7a5b      	ldrb	r3, [r3, #9]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <MCAL_UART_ReceiveData+0xac>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	801a      	strh	r2, [r3, #0]
}
 8000ab6:	e007      	b.n	8000ac8 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	801a      	strh	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	2000001c 	.word	0x2000001c
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40004800 	.word	0x40004800

08000ae4 <USART1_IRQHandler>:

/*============================================
 * ========== Set Callback function ==========
============================================ */
void USART1_IRQHandler (void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <USART1_IRQHandler+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	4798      	blx	r3
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000001c 	.word	0x2000001c

08000af8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <USART2_IRQHandler+0x10>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	4798      	blx	r3
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000001c 	.word	0x2000001c

08000b0c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <USART3_IRQHandler+0x10>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	4798      	blx	r3
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000001c 	.word	0x2000001c

08000b20 <FunCallBack>:


uint16_t charater;


void FunCallBack(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &charater,disable);
 8000b24:	2200      	movs	r2, #0
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <FunCallBack+0x1c>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <FunCallBack+0x20>)
 8000b2a:	f7ff ff6f 	bl	8000a0c <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &charater,enable);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4902      	ldr	r1, [pc, #8]	; (8000b3c <FunCallBack+0x1c>)
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <FunCallBack+0x20>)
 8000b34:	f7ff ff20 	bl	8000978 <MCAL_UART_SendData>

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000068 	.word	0x20000068
 8000b40:	40013800 	.word	0x40013800

08000b44 <main>:


int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0



	RCC_GPIOA_CLK_EN();
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <main+0x60>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <main+0x60>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <main+0x60>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <main+0x60>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6193      	str	r3, [r2, #24]
    RCC_GPIOC_CLK_EN();
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <main+0x60>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <main+0x60>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6193      	str	r3, [r2, #24]


    USART_config uartConf;
    uartConf.BaudRate = UART_BaudRate_115200;
 8000b6e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b72:	60bb      	str	r3, [r7, #8]
    uartConf.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
    uartConf.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	743b      	strb	r3, [r7, #16]
    uartConf.P_IRQ_CallBack = FunCallBack;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <main+0x64>)
 8000b7e:	617b      	str	r3, [r7, #20]
    uartConf.Parity = UART_Parity_NONE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	737b      	strb	r3, [r7, #13]
    uartConf.Payload_Length = UART_Payload_Length_8B;
 8000b84:	2300      	movs	r3, #0
 8000b86:	733b      	strb	r3, [r7, #12]
    uartConf.StopBits = UART_StopBits_1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73bb      	strb	r3, [r7, #14]
    uartConf.USART_Mode = UART_MODE_RX_TX;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	713b      	strb	r3, [r7, #4]

    MCAL_UART_Init(USART1, &uartConf);
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <main+0x68>)
 8000b96:	f7ff fd9f 	bl	80006d8 <MCAL_UART_Init>
    MCAL_UART_GPIO_Set_Pins(USART1);
 8000b9a:	4804      	ldr	r0, [pc, #16]	; (8000bac <main+0x68>)
 8000b9c:	f7ff fe64 	bl	8000868 <MCAL_UART_GPIO_Set_Pins>


	/* Loop forever */


	while(1){
 8000ba0:	e7fe      	b.n	8000ba0 <main+0x5c>
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	08000b21 	.word	0x08000b21
 8000bac:	40013800 	.word	0x40013800

08000bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bde:	f000 f811 	bl	8000c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff ffaf 	bl	8000b44 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   r0, =_estack
 8000be8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bf4:	08000c84 	.word	0x08000c84
  ldr r2, =_sbss
 8000bf8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bfc:	2000006c 	.word	0x2000006c

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <__libc_init_array>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	2600      	movs	r6, #0
 8000c08:	4d0c      	ldr	r5, [pc, #48]	; (8000c3c <__libc_init_array+0x38>)
 8000c0a:	4c0d      	ldr	r4, [pc, #52]	; (8000c40 <__libc_init_array+0x3c>)
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	10a4      	asrs	r4, r4, #2
 8000c10:	42a6      	cmp	r6, r4
 8000c12:	d109      	bne.n	8000c28 <__libc_init_array+0x24>
 8000c14:	f000 f81a 	bl	8000c4c <_init>
 8000c18:	2600      	movs	r6, #0
 8000c1a:	4d0a      	ldr	r5, [pc, #40]	; (8000c44 <__libc_init_array+0x40>)
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <__libc_init_array+0x44>)
 8000c1e:	1b64      	subs	r4, r4, r5
 8000c20:	10a4      	asrs	r4, r4, #2
 8000c22:	42a6      	cmp	r6, r4
 8000c24:	d105      	bne.n	8000c32 <__libc_init_array+0x2e>
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c2c:	4798      	blx	r3
 8000c2e:	3601      	adds	r6, #1
 8000c30:	e7ee      	b.n	8000c10 <__libc_init_array+0xc>
 8000c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c36:	4798      	blx	r3
 8000c38:	3601      	adds	r6, #1
 8000c3a:	e7f2      	b.n	8000c22 <__libc_init_array+0x1e>
 8000c3c:	08000c7c 	.word	0x08000c7c
 8000c40:	08000c7c 	.word	0x08000c7c
 8000c44:	08000c7c 	.word	0x08000c7c
 8000c48:	08000c80 	.word	0x08000c80

08000c4c <_init>:
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	bf00      	nop
 8000c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c52:	bc08      	pop	{r3}
 8000c54:	469e      	mov	lr, r3
 8000c56:	4770      	bx	lr

08000c58 <_fini>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	bf00      	nop
 8000c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5e:	bc08      	pop	{r3}
 8000c60:	469e      	mov	lr, r3
 8000c62:	4770      	bx	lr
