
unit8_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002294  00002328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080007a  0080007a  00002342  2**0
                  ALLOC
  3 .stab         00001d04  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d7d  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000070f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000081fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000917c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000095be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <main>
      8a:	0c 94 48 11 	jmp	0x2290	; 0x2290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 35 11 	jmp	0x226a	; 0x226a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_Init>:
 */
#include "UART.h"
void (*GP_IRQ_CallBack)(void);

void UART_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	UBRRL = 51;    // 9600 buad rate
     ca6:	e9 e2       	ldi	r30, 0x29	; 41
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	83 e3       	ldi	r24, 0x33	; 51
     cac:	80 83       	st	Z, r24

   CLEAR_BIT(UCSRA, U2X);
     cae:	ab e2       	ldi	r26, 0x2B	; 43
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	8c 93       	st	X, r24
   * all by default we wantn't  to config it
   *
   * */

	//Enable UART Receive and Transmit
	SET_BIT(UCSRB,TXEN);
     cbc:	aa e2       	ldi	r26, 0x2A	; 42
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e2       	ldi	r30, 0x2A	; 42
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     cca:	aa e2       	ldi	r26, 0x2A	; 42
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e2       	ldi	r30, 0x2A	; 42
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 61       	ori	r24, 0x10	; 16
     cd6:	8c 93       	st	X, r24


}
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <UART_SendChar>:
void UART_SendChar(u8 Data)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	89 83       	std	Y+1, r24	; 0x01
	while (!READ_BIT(UCSRA,UDRE));
     cea:	eb e2       	ldi	r30, 0x2B	; 43
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	82 95       	swap	r24
     cf2:	86 95       	lsr	r24
     cf4:	87 70       	andi	r24, 0x07	; 7
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	81 70       	andi	r24, 0x01	; 1
     cfc:	90 70       	andi	r25, 0x00	; 0
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	a1 f3       	breq	.-24     	; 0xcea <UART_SendChar+0xc>
	UDR = Data;
     d02:	ec e2       	ldi	r30, 0x2C	; 44
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	80 83       	st	Z, r24


}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <UART_ReceiveChar>:
u8 UART_ReceiveChar(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62

	while (!READ_BIT(UCSRA,RXC));
     d1c:	eb e2       	ldi	r30, 0x2B	; 43
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	dc f7       	brge	.-10     	; 0xd1c <UART_ReceiveChar+0xa>
	u8 temp = UDR;
     d26:	ec e2       	ldi	r30, 0x2C	; 44
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	89 83       	std	Y+1, r24	; 0x01
	return temp;
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <UART_SendString>:

void UART_SendString(u8 *ptr){
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <UART_SendString+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <UART_SendString+0x24>


	while(*ptr){
		UART_SendChar(*ptr);
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	80 81       	ld	r24, Z
     d4e:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
		ptr++;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(u8 *ptr){


	while(*ptr){
     d5c:	e9 81       	ldd	r30, Y+1	; 0x01
     d5e:	fa 81       	ldd	r31, Y+2	; 0x02
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	89 f7       	brne	.-30     	; 0xd48 <UART_SendString+0x10>
		UART_SendChar(*ptr);
		ptr++;
	}
	UART_SendChar(STOPCHAR);
     d66:	8d e0       	ldi	r24, 0x0D	; 13
     d68:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_Send32>:

void UART_Send32(u32 data){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	2a 97       	sbiw	r28, 0x0a	; 10
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	2b 83       	std	Y+3, r18	; 0x03
     d8c:	3c 83       	std	Y+4, r19	; 0x04
     d8e:	4d 83       	std	Y+5, r20	; 0x05
     d90:	5e 83       	std	Y+6, r21	; 0x06
     d92:	6f 83       	std	Y+7, r22	; 0x07
     d94:	78 87       	std	Y+8, r23	; 0x08
     d96:	89 87       	std	Y+9, r24	; 0x09
     d98:	9a 87       	std	Y+10, r25	; 0x0a
	u32 *ptr = &data;
     d9a:	ce 01       	movw	r24, r28
     d9c:	03 96       	adiw	r24, 0x03	; 3
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	UART_SendChar(ptr[0]);
     da2:	e9 81       	ldd	r30, Y+1	; 0x01
     da4:	fa 81       	ldd	r31, Y+2	; 0x02
     da6:	20 81       	ld	r18, Z
     da8:	31 81       	ldd	r19, Z+1	; 0x01
     daa:	42 81       	ldd	r20, Z+2	; 0x02
     dac:	53 81       	ldd	r21, Z+3	; 0x03
     dae:	64 81       	ldd	r22, Z+4	; 0x04
     db0:	75 81       	ldd	r23, Z+5	; 0x05
     db2:	86 81       	ldd	r24, Z+6	; 0x06
     db4:	97 81       	ldd	r25, Z+7	; 0x07
     db6:	82 2f       	mov	r24, r18
     db8:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
	UART_SendChar(ptr[1]);
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	fc 01       	movw	r30, r24
     dc2:	38 96       	adiw	r30, 0x08	; 8
     dc4:	20 81       	ld	r18, Z
     dc6:	31 81       	ldd	r19, Z+1	; 0x01
     dc8:	42 81       	ldd	r20, Z+2	; 0x02
     dca:	53 81       	ldd	r21, Z+3	; 0x03
     dcc:	64 81       	ldd	r22, Z+4	; 0x04
     dce:	75 81       	ldd	r23, Z+5	; 0x05
     dd0:	86 81       	ldd	r24, Z+6	; 0x06
     dd2:	97 81       	ldd	r25, Z+7	; 0x07
     dd4:	82 2f       	mov	r24, r18
     dd6:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
	UART_SendChar(ptr[2]);
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	70 96       	adiw	r30, 0x10	; 16
     de2:	20 81       	ld	r18, Z
     de4:	31 81       	ldd	r19, Z+1	; 0x01
     de6:	42 81       	ldd	r20, Z+2	; 0x02
     de8:	53 81       	ldd	r21, Z+3	; 0x03
     dea:	64 81       	ldd	r22, Z+4	; 0x04
     dec:	75 81       	ldd	r23, Z+5	; 0x05
     dee:	86 81       	ldd	r24, Z+6	; 0x06
     df0:	97 81       	ldd	r25, Z+7	; 0x07
     df2:	82 2f       	mov	r24, r18
     df4:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
	UART_SendChar(ptr[3]);
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	fc 01       	movw	r30, r24
     dfe:	78 96       	adiw	r30, 0x18	; 24
     e00:	20 81       	ld	r18, Z
     e02:	31 81       	ldd	r19, Z+1	; 0x01
     e04:	42 81       	ldd	r20, Z+2	; 0x02
     e06:	53 81       	ldd	r21, Z+3	; 0x03
     e08:	64 81       	ldd	r22, Z+4	; 0x04
     e0a:	75 81       	ldd	r23, Z+5	; 0x05
     e0c:	86 81       	ldd	r24, Z+6	; 0x06
     e0e:	97 81       	ldd	r25, Z+7	; 0x07
     e10:	82 2f       	mov	r24, r18
     e12:	0e 94 6f 06 	call	0xcde	; 0xcde <UART_SendChar>
}
     e16:	2a 96       	adiw	r28, 0x0a	; 10
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <UART_Receive32>:

u32 UART_Receive32(void){
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	2a 97       	sbiw	r28, 0x0a	; 10
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
   u32 *ptr, data;
   ptr = &data;
     e4c:	ce 01       	movw	r24, r28
     e4e:	03 96       	adiw	r24, 0x03	; 3
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
   ptr[0] = UART_ReceiveChar();
     e54:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	20 83       	st	Z, r18
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	42 83       	std	Z+2, r20	; 0x02
     e72:	53 83       	std	Z+3, r21	; 0x03
     e74:	64 83       	std	Z+4, r22	; 0x04
     e76:	75 83       	std	Z+5, r23	; 0x05
     e78:	86 83       	std	Z+6, r24	; 0x06
     e7a:	97 83       	std	Z+7, r25	; 0x07
   ptr[1] = UART_ReceiveChar();
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	8c 01       	movw	r16, r24
     e82:	08 5f       	subi	r16, 0xF8	; 248
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	f8 01       	movw	r30, r16
     e9c:	20 83       	st	Z, r18
     e9e:	f8 01       	movw	r30, r16
     ea0:	31 83       	std	Z+1, r19	; 0x01
     ea2:	f8 01       	movw	r30, r16
     ea4:	42 83       	std	Z+2, r20	; 0x02
     ea6:	f8 01       	movw	r30, r16
     ea8:	53 83       	std	Z+3, r21	; 0x03
     eaa:	f8 01       	movw	r30, r16
     eac:	64 83       	std	Z+4, r22	; 0x04
     eae:	f8 01       	movw	r30, r16
     eb0:	75 83       	std	Z+5, r23	; 0x05
     eb2:	f8 01       	movw	r30, r16
     eb4:	86 83       	std	Z+6, r24	; 0x06
     eb6:	f8 01       	movw	r30, r16
     eb8:	97 83       	std	Z+7, r25	; 0x07
   ptr[2] = UART_ReceiveChar();
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	8c 01       	movw	r16, r24
     ec0:	00 5f       	subi	r16, 0xF0	; 240
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	f8 01       	movw	r30, r16
     eda:	20 83       	st	Z, r18
     edc:	f8 01       	movw	r30, r16
     ede:	31 83       	std	Z+1, r19	; 0x01
     ee0:	f8 01       	movw	r30, r16
     ee2:	42 83       	std	Z+2, r20	; 0x02
     ee4:	f8 01       	movw	r30, r16
     ee6:	53 83       	std	Z+3, r21	; 0x03
     ee8:	f8 01       	movw	r30, r16
     eea:	64 83       	std	Z+4, r22	; 0x04
     eec:	f8 01       	movw	r30, r16
     eee:	75 83       	std	Z+5, r23	; 0x05
     ef0:	f8 01       	movw	r30, r16
     ef2:	86 83       	std	Z+6, r24	; 0x06
     ef4:	f8 01       	movw	r30, r16
     ef6:	97 83       	std	Z+7, r25	; 0x07
   ptr[3] = UART_ReceiveChar();
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	8c 01       	movw	r16, r24
     efe:	08 5e       	subi	r16, 0xE8	; 232
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	f8 01       	movw	r30, r16
     f18:	20 83       	st	Z, r18
     f1a:	f8 01       	movw	r30, r16
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	f8 01       	movw	r30, r16
     f20:	42 83       	std	Z+2, r20	; 0x02
     f22:	f8 01       	movw	r30, r16
     f24:	53 83       	std	Z+3, r21	; 0x03
     f26:	f8 01       	movw	r30, r16
     f28:	64 83       	std	Z+4, r22	; 0x04
     f2a:	f8 01       	movw	r30, r16
     f2c:	75 83       	std	Z+5, r23	; 0x05
     f2e:	f8 01       	movw	r30, r16
     f30:	86 83       	std	Z+6, r24	; 0x06
     f32:	f8 01       	movw	r30, r16
     f34:	97 83       	std	Z+7, r25	; 0x07

   return data;
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	4d 81       	ldd	r20, Y+5	; 0x05
     f3c:	5e 81       	ldd	r21, Y+6	; 0x06
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	a2 2e       	mov	r10, r18
     f48:	b3 2e       	mov	r11, r19
     f4a:	c4 2e       	mov	r12, r20
     f4c:	d5 2e       	mov	r13, r21
     f4e:	e6 2e       	mov	r14, r22
     f50:	f7 2e       	mov	r15, r23
     f52:	08 2f       	mov	r16, r24
     f54:	19 2f       	mov	r17, r25
}
     f56:	2a 2d       	mov	r18, r10
     f58:	3b 2d       	mov	r19, r11
     f5a:	4c 2d       	mov	r20, r12
     f5c:	5d 2d       	mov	r21, r13
     f5e:	6e 2d       	mov	r22, r14
     f60:	7f 2d       	mov	r23, r15
     f62:	80 2f       	mov	r24, r16
     f64:	91 2f       	mov	r25, r17
     f66:	2a 96       	adiw	r28, 0x0a	; 10
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	cf 90       	pop	r12
     f82:	bf 90       	pop	r11
     f84:	af 90       	pop	r10
     f86:	08 95       	ret

00000f88 <UART_ReceiveString>:

void UART_ReceiveString(u8 *ptr, u8 MAX){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <UART_ReceiveString+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <UART_ReceiveString+0x8>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, temp;
     f9c:	1a 82       	std	Y+2, r1	; 0x02
	temp = UART_ReceiveChar();
     f9e:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	10 c0       	rjmp	.+32     	; 0xfc6 <UART_ReceiveString+0x3e>
	while( i<MAX && temp != STOPCHAR ){
		ptr[i] = temp;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	fc 01       	movw	r30, r24
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24
		temp = UART_ReceiveChar();
     fba:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_ReceiveChar>
     fbe:	89 83       	std	Y+1, r24	; 0x01
		i++;
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(u8 *ptr, u8 MAX){
	u8 i = 0, temp;
	temp = UART_ReceiveChar();
	while( i<MAX && temp != STOPCHAR ){
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	98 17       	cp	r25, r24
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <UART_ReceiveString+0x4c>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8d 30       	cpi	r24, 0x0D	; 13
     fd2:	49 f7       	brne	.-46     	; 0xfa6 <UART_ReceiveString+0x1e>
		ptr[i] = temp;
		temp = UART_ReceiveChar();
		i++;
	}
	ptr[i] = '\0';
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	fc 01       	movw	r30, r24
     fe0:	e2 0f       	add	r30, r18
     fe2:	f3 1f       	adc	r31, r19
     fe4:	10 82       	st	Z, r1
}
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <UART_Receive_periodChech>:

u8 UART_Receive_periodChech(u8 *ptr){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	00 d0       	rcall	.+0      	; 0xffc <UART_Receive_periodChech+0x6>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	9a 83       	std	Y+2, r25	; 0x02
    1004:	89 83       	std	Y+1, r24	; 0x01

	if(READ_BIT(UCSRA,RXC))
    1006:	eb e2       	ldi	r30, 0x2B	; 43
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	4c f4       	brge	.+18     	; 0x1022 <UART_Receive_periodChech+0x2c>
	{
		*ptr = UDR;
    1010:	ec e2       	ldi	r30, 0x2C	; 44
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	80 83       	st	Z, r24
		return 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <UART_Receive_periodChech+0x2e>

	}
	else
	{
		return 0;
    1022:	1b 82       	std	Y+3, r1	; 0x03
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_RX_Interrupt_Enable>:

void UART_RX_Interrupt_Enable(void)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,RXCIE);
    103a:	ab e2       	ldi	r26, 0x2B	; 43
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e2       	ldi	r30, 0x2B	; 43
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	8c 93       	st	X, r24
}
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <UART_RX_Interrupt_Disable>:
void UART_RX_Interrupt_Disable(void)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,RXCIE);
    1056:	ab e2       	ldi	r26, 0x2B	; 43
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	eb e2       	ldi	r30, 0x2B	; 43
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	8c 93       	st	X, r24
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <UART_TX_Interrupt_Enable>:
void UART_TX_Interrupt_Enable(void)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,TXCIE);
    1072:	ab e2       	ldi	r26, 0x2B	; 43
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	eb e2       	ldi	r30, 0x2B	; 43
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	8c 93       	st	X, r24
}
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <UART_TX_Interrupt_Disable>:
void UART_TX_Interrupt_Disable(void)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,TXCIE);
    108e:	ab e2       	ldi	r26, 0x2B	; 43
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e2       	ldi	r30, 0x2B	; 43
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 7b       	andi	r24, 0xBF	; 191
    109a:	8c 93       	st	X, r24
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <UART_SendNoblock>:


void UART_SendNoblock(u8 data){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    10ae:	ec e2       	ldi	r30, 0x2C	; 44
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <UART_ReceiveNoblock>:
u8 UART_ReceiveNoblock(void){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62


	return UDR;
    10c6:	ec e2       	ldi	r30, 0x2C	; 44
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
}
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <__vector_13>:


ISR(USART_RXC_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    10fc:	e0 91 7a 00 	lds	r30, 0x007A
    1100:	f0 91 7b 00 	lds	r31, 0x007B
    1104:	09 95       	icall
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <__vector_15>:

ISR(USART_TXC_vect)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    1156:	e0 91 7a 00 	lds	r30, 0x007A
    115a:	f0 91 7b 00 	lds	r31, 0x007B
    115e:	09 95       	icall
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	ff 91       	pop	r31
    1166:	ef 91       	pop	r30
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <Keypad_init>:
char key_row[]={R0, R1, R2, R3};
char key_column[]={C0, C1, C2, C3};


void Keypad_init()
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);
    118e:	a1 e3       	ldi	r26, 0x31	; 49
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e1 e3       	ldi	r30, 0x31	; 49
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 7f       	andi	r24, 0xF0	; 240
    119a:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
    119c:	a1 e3       	ldi	r26, 0x31	; 49
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e1 e3       	ldi	r30, 0x31	; 49
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 6f       	ori	r24, 0xF0	; 240
    11a8:	8c 93       	st	X, r24
	KEYPAD_PORT =0xff; //active PUR for input pins
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	80 83       	st	Z, r24



}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <Keypad_getkey>:
char Keypad_getkey()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	27 97       	sbiw	r28, 0x07	; 7
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for(i=0; i<4; i++){
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	1b 82       	std	Y+3, r1	; 0x03
    11d0:	06 c1       	rjmp	.+524    	; 0x13de <Keypad_getkey+0x226>

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
    11d2:	a2 e3       	ldi	r26, 0x32	; 50
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e2 e3       	ldi	r30, 0x32	; 50
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 6f       	ori	r24, 0xF0	; 240
    11de:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<key_column[i]);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	fc 01       	movw	r30, r24
    11f2:	eb 58       	subi	r30, 0x8B	; 139
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <Keypad_getkey+0x50>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <Keypad_getkey+0x4c>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24

		for(j=0; j<4; j++){
    1212:	1a 82       	std	Y+2, r1	; 0x02
    1214:	19 82       	std	Y+1, r1	; 0x01
    1216:	d8 c0       	rjmp	.+432    	; 0x13c8 <Keypad_getkey+0x210>

			if(!(keypadPIN & (1<<key_row[j]))){
    1218:	e0 e3       	ldi	r30, 0x30	; 48
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	fc 01       	movw	r30, r24
    1228:	ef 58       	subi	r30, 0x8F	; 143
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a9 01       	movw	r20, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <Keypad_getkey+0x82>
    1236:	55 95       	asr	r21
    1238:	47 95       	ror	r20
    123a:	8a 95       	dec	r24
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <Keypad_getkey+0x7e>
    123e:	ca 01       	movw	r24, r20
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	09 f0       	breq	.+2      	; 0x124a <Keypad_getkey+0x92>
    1248:	ba c0       	rjmp	.+372    	; 0x13be <Keypad_getkey+0x206>

				while(!(keypadPIN & (1<<key_row[j])));
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	fc 01       	movw	r30, r24
    125a:	ef 58       	subi	r30, 0x8F	; 143
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 81       	ld	r24, Z
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a9 01       	movw	r20, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <Keypad_getkey+0xb4>
    1268:	55 95       	asr	r21
    126a:	47 95       	ror	r20
    126c:	8a 95       	dec	r24
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <Keypad_getkey+0xb0>
    1270:	ca 01       	movw	r24, r20
    1272:	81 70       	andi	r24, 0x01	; 1
    1274:	90 70       	andi	r25, 0x00	; 0
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	41 f3       	breq	.-48     	; 0x124a <Keypad_getkey+0x92>

				switch(i){
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	9f 83       	std	Y+7, r25	; 0x07
    1280:	8e 83       	std	Y+6, r24	; 0x06
    1282:	4e 81       	ldd	r20, Y+6	; 0x06
    1284:	5f 81       	ldd	r21, Y+7	; 0x07
    1286:	41 30       	cpi	r20, 0x01	; 1
    1288:	51 05       	cpc	r21, r1
    128a:	c1 f1       	breq	.+112    	; 0x12fc <Keypad_getkey+0x144>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	34 f4       	brge	.+12     	; 0x12a2 <Keypad_getkey+0xea>
    1296:	4e 81       	ldd	r20, Y+6	; 0x06
    1298:	5f 81       	ldd	r21, Y+7	; 0x07
    129a:	41 15       	cp	r20, r1
    129c:	51 05       	cpc	r21, r1
    129e:	71 f0       	breq	.+28     	; 0x12bc <Keypad_getkey+0x104>
    12a0:	8b c0       	rjmp	.+278    	; 0x13b8 <Keypad_getkey+0x200>
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <Keypad_getkey+0xf6>
    12ac:	47 c0       	rjmp	.+142    	; 0x133c <Keypad_getkey+0x184>
    12ae:	4e 81       	ldd	r20, Y+6	; 0x06
    12b0:	5f 81       	ldd	r21, Y+7	; 0x07
    12b2:	43 30       	cpi	r20, 0x03	; 3
    12b4:	51 05       	cpc	r21, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <Keypad_getkey+0x102>
    12b8:	60 c0       	rjmp	.+192    	; 0x137a <Keypad_getkey+0x1c2>
    12ba:	7e c0       	rjmp	.+252    	; 0x13b8 <Keypad_getkey+0x200>

				case 0:
					if(0 == j) return '7';
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	19 f4       	brne	.+6      	; 0x12ca <Keypad_getkey+0x112>
    12c4:	57 e3       	ldi	r21, 0x37	; 55
    12c6:	5d 83       	std	Y+5, r21	; 0x05
    12c8:	92 c0       	rjmp	.+292    	; 0x13ee <Keypad_getkey+0x236>
					else if(1 == j) return '4';
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	19 f4       	brne	.+6      	; 0x12da <Keypad_getkey+0x122>
    12d4:	84 e3       	ldi	r24, 0x34	; 52
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	8a c0       	rjmp	.+276    	; 0x13ee <Keypad_getkey+0x236>
					else if(2 == j) return '1';
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	91 05       	cpc	r25, r1
    12e2:	19 f4       	brne	.+6      	; 0x12ea <Keypad_getkey+0x132>
    12e4:	91 e3       	ldi	r25, 0x31	; 49
    12e6:	9d 83       	std	Y+5, r25	; 0x05
    12e8:	82 c0       	rjmp	.+260    	; 0x13ee <Keypad_getkey+0x236>
					else if(3 == j) return '@';
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <Keypad_getkey+0x13e>
    12f4:	64 c0       	rjmp	.+200    	; 0x13be <Keypad_getkey+0x206>
    12f6:	40 e4       	ldi	r20, 0x40	; 64
    12f8:	4d 83       	std	Y+5, r20	; 0x05
    12fa:	79 c0       	rjmp	.+242    	; 0x13ee <Keypad_getkey+0x236>
					break;
				case 1:
					if(0 == j) return '8';
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	19 f4       	brne	.+6      	; 0x130a <Keypad_getkey+0x152>
    1304:	58 e3       	ldi	r21, 0x38	; 56
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	72 c0       	rjmp	.+228    	; 0x13ee <Keypad_getkey+0x236>
					else if(1 == j) return '5';
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	19 f4       	brne	.+6      	; 0x131a <Keypad_getkey+0x162>
    1314:	85 e3       	ldi	r24, 0x35	; 53
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	6a c0       	rjmp	.+212    	; 0x13ee <Keypad_getkey+0x236>
					else if(2 == j) return '2';
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	91 05       	cpc	r25, r1
    1322:	19 f4       	brne	.+6      	; 0x132a <Keypad_getkey+0x172>
    1324:	92 e3       	ldi	r25, 0x32	; 50
    1326:	9d 83       	std	Y+5, r25	; 0x05
    1328:	62 c0       	rjmp	.+196    	; 0x13ee <Keypad_getkey+0x236>
					else if(3 == j) return '0';
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	91 05       	cpc	r25, r1
    1332:	09 f0       	breq	.+2      	; 0x1336 <Keypad_getkey+0x17e>
    1334:	44 c0       	rjmp	.+136    	; 0x13be <Keypad_getkey+0x206>
    1336:	40 e3       	ldi	r20, 0x30	; 48
    1338:	4d 83       	std	Y+5, r20	; 0x05
    133a:	59 c0       	rjmp	.+178    	; 0x13ee <Keypad_getkey+0x236>
					break;
				case 2:
					if(0 == j) return '9';
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	19 f4       	brne	.+6      	; 0x134a <Keypad_getkey+0x192>
    1344:	59 e3       	ldi	r21, 0x39	; 57
    1346:	5d 83       	std	Y+5, r21	; 0x05
    1348:	52 c0       	rjmp	.+164    	; 0x13ee <Keypad_getkey+0x236>
					else if(1 == j) return '6';
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	19 f4       	brne	.+6      	; 0x135a <Keypad_getkey+0x1a2>
    1354:	86 e3       	ldi	r24, 0x36	; 54
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	4a c0       	rjmp	.+148    	; 0x13ee <Keypad_getkey+0x236>
					else if(2 == j) return '3';
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	91 05       	cpc	r25, r1
    1362:	19 f4       	brne	.+6      	; 0x136a <Keypad_getkey+0x1b2>
    1364:	93 e3       	ldi	r25, 0x33	; 51
    1366:	9d 83       	std	Y+5, r25	; 0x05
    1368:	42 c0       	rjmp	.+132    	; 0x13ee <Keypad_getkey+0x236>
					else if(3 == j) return '=';
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	29 f5       	brne	.+74     	; 0x13be <Keypad_getkey+0x206>
    1374:	4d e3       	ldi	r20, 0x3D	; 61
    1376:	4d 83       	std	Y+5, r20	; 0x05
    1378:	3a c0       	rjmp	.+116    	; 0x13ee <Keypad_getkey+0x236>
					break;
				case 3:
					if(0 == j) return '/';
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	9a 81       	ldd	r25, Y+2	; 0x02
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	19 f4       	brne	.+6      	; 0x1388 <Keypad_getkey+0x1d0>
    1382:	5f e2       	ldi	r21, 0x2F	; 47
    1384:	5d 83       	std	Y+5, r21	; 0x05
    1386:	33 c0       	rjmp	.+102    	; 0x13ee <Keypad_getkey+0x236>
					else if(1 == j) return '*';
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	19 f4       	brne	.+6      	; 0x1398 <Keypad_getkey+0x1e0>
    1392:	8a e2       	ldi	r24, 0x2A	; 42
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	2b c0       	rjmp	.+86     	; 0x13ee <Keypad_getkey+0x236>
					else if(2 == j) return '-';
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	82 30       	cpi	r24, 0x02	; 2
    139e:	91 05       	cpc	r25, r1
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <Keypad_getkey+0x1f0>
    13a2:	9d e2       	ldi	r25, 0x2D	; 45
    13a4:	9d 83       	std	Y+5, r25	; 0x05
    13a6:	23 c0       	rjmp	.+70     	; 0x13ee <Keypad_getkey+0x236>
					else if(3 == j) return '+';
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	91 05       	cpc	r25, r1
    13b0:	31 f4       	brne	.+12     	; 0x13be <Keypad_getkey+0x206>
    13b2:	4b e2       	ldi	r20, 0x2B	; 43
    13b4:	4d 83       	std	Y+5, r20	; 0x05
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <Keypad_getkey+0x236>
					break;
				default:
					return 'A';
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	5d 83       	std	Y+5, r21	; 0x05
    13bc:	18 c0       	rjmp	.+48     	; 0x13ee <Keypad_getkey+0x236>
	for(i=0; i<4; i++){

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	91 05       	cpc	r25, r1
    13d0:	0c f4       	brge	.+2      	; 0x13d4 <Keypad_getkey+0x21c>
    13d2:	22 cf       	rjmp	.-444    	; 0x1218 <Keypad_getkey+0x60>

}
char Keypad_getkey()
{
	int i,j;
	for(i=0; i<4; i++){
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	9c 83       	std	Y+4, r25	; 0x04
    13dc:	8b 83       	std	Y+3, r24	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	91 05       	cpc	r25, r1
    13e6:	0c f4       	brge	.+2      	; 0x13ea <Keypad_getkey+0x232>
    13e8:	f4 ce       	rjmp	.-536    	; 0x11d2 <Keypad_getkey+0x1a>
		}


	}

	return 'A';
    13ea:	81 e4       	ldi	r24, 0x41	; 65
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05

}
    13f0:	27 96       	adiw	r28, 0x07	; 7
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <LCD_clear_screen>:
 *      Author: bassam
 */

#include "lcd.h"

void LCD_clear_screen(){
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <LCD_lcd_kick>:

void LCD_lcd_kick(){
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2e 97       	sbiw	r28, 0x0e	; 14
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    142a:	a8 e3       	ldi	r26, 0x38	; 56
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 60       	ori	r24, 0x08	; 8
    1436:	8c 93       	st	X, r24
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a8 e4       	ldi	r26, 0x48	; 72
    143e:	b2 e4       	ldi	r27, 0x42	; 66
    1440:	8b 87       	std	Y+11, r24	; 0x0b
    1442:	9c 87       	std	Y+12, r25	; 0x0c
    1444:	ad 87       	std	Y+13, r26	; 0x0d
    1446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	6b 85       	ldd	r22, Y+11	; 0x0b
    144a:	7c 85       	ldd	r23, Y+12	; 0x0c
    144c:	8d 85       	ldd	r24, Y+13	; 0x0d
    144e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8f 83       	std	Y+7, r24	; 0x07
    1462:	98 87       	std	Y+8, r25	; 0x08
    1464:	a9 87       	std	Y+9, r26	; 0x09
    1466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <LCD_lcd_kick+0x74>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <LCD_lcd_kick+0xd4>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9c 83       	std	Y+4, r25	; 0x04
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_lcd_kick+0xc2>
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <LCD_lcd_kick+0xb6>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9e 83       	std	Y+6, r25	; 0x06
    1506:	8d 83       	std	Y+5, r24	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <LCD_lcd_kick+0xfe>
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	8c 93       	st	X, r24
}
    152a:	2e 96       	adiw	r28, 0x0e	; 14
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <LCD_GOTO_XY+0x6>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	39 f4       	brne	.+14     	; 0x155e <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 31       	cpi	r24, 0x10	; 16
    1554:	20 f4       	brcc	.+8      	; 0x155e <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 58       	subi	r24, 0x80	; 128
    155a:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	39 f4       	brne	.+14     	; 0x1572 <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	80 31       	cpi	r24, 0x10	; 16
    1568:	20 f4       	brcc	.+8      	; 0x1572 <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	80 54       	subi	r24, 0x40	; 64
    156e:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
		}
	}
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <LCD_INIT>:

void LCD_INIT(){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	e4 97       	sbiw	r28, 0x34	; 52
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 ea       	ldi	r26, 0xA0	; 160
    1596:	b1 e4       	ldi	r27, 0x41	; 65
    1598:	89 ab       	std	Y+49, r24	; 0x31
    159a:	9a ab       	std	Y+50, r25	; 0x32
    159c:	ab ab       	std	Y+51, r26	; 0x33
    159e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	69 a9       	ldd	r22, Y+49	; 0x31
    15a2:	7a a9       	ldd	r23, Y+50	; 0x32
    15a4:	8b a9       	ldd	r24, Y+51	; 0x33
    15a6:	9c a9       	ldd	r25, Y+52	; 0x34
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	8d a7       	std	Y+45, r24	; 0x2d
    15ba:	9e a7       	std	Y+46, r25	; 0x2e
    15bc:	af a7       	std	Y+47, r26	; 0x2f
    15be:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    15c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    15c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    15c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c6:	98 a9       	ldd	r25, Y+48	; 0x30
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <LCD_INIT+0x66>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c a7       	std	Y+44, r25	; 0x2c
    15de:	8b a7       	std	Y+43, r24	; 0x2b
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    15e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    15e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    15e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	69 a9       	ldd	r22, Y+49	; 0x31
    15fc:	7a a9       	ldd	r23, Y+50	; 0x32
    15fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1600:	9c a9       	ldd	r25, Y+52	; 0x34
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9c a7       	std	Y+44, r25	; 0x2c
    1620:	8b a7       	std	Y+43, r24	; 0x2b
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_INIT+0xc6>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9a a7       	std	Y+42, r25	; 0x2a
    162a:	89 a7       	std	Y+41, r24	; 0x29
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_INIT+0xb4>
    1634:	9a a7       	std	Y+42, r25	; 0x2a
    1636:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	8b a5       	ldd	r24, Y+43	; 0x2b
    163a:	9c a5       	ldd	r25, Y+44	; 0x2c
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9c a7       	std	Y+44, r25	; 0x2c
    1640:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	8b a5       	ldd	r24, Y+43	; 0x2b
    1644:	9c a5       	ldd	r25, Y+44	; 0x2c
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <LCD_INIT+0xa8>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	6d a5       	ldd	r22, Y+45	; 0x2d
    164e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1650:	8f a5       	ldd	r24, Y+47	; 0x2f
    1652:	98 a9       	ldd	r25, Y+48	; 0x30
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9c a7       	std	Y+44, r25	; 0x2c
    165e:	8b a7       	std	Y+43, r24	; 0x2b
    1660:	8b a5       	ldd	r24, Y+43	; 0x2b
    1662:	9c a5       	ldd	r25, Y+44	; 0x2c
    1664:	98 a7       	std	Y+40, r25	; 0x28
    1666:	8f a3       	std	Y+39, r24	; 0x27
    1668:	8f a1       	ldd	r24, Y+39	; 0x27
    166a:	98 a5       	ldd	r25, Y+40	; 0x28
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <LCD_INIT+0xf0>
    1670:	98 a7       	std	Y+40, r25	; 0x28
    1672:	8f a3       	std	Y+39, r24	; 0x27
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
*/
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    1674:	a7 e3       	ldi	r26, 0x37	; 55
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e7 e3       	ldi	r30, 0x37	; 55
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	8e 60       	ori	r24, 0x0E	; 14
    1680:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	81 7f       	andi	r24, 0xF1	; 241
    168e:	8c 93       	st	X, r24
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e7       	ldi	r26, 0x70	; 112
    1696:	b1 e4       	ldi	r27, 0x41	; 65
    1698:	8b a3       	std	Y+35, r24	; 0x23
    169a:	9c a3       	std	Y+36, r25	; 0x24
    169c:	ad a3       	std	Y+37, r26	; 0x25
    169e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6b a1       	ldd	r22, Y+35	; 0x23
    16a2:	7c a1       	ldd	r23, Y+36	; 0x24
    16a4:	8d a1       	ldd	r24, Y+37	; 0x25
    16a6:	9e a1       	ldd	r25, Y+38	; 0x26
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8f 8f       	std	Y+31, r24	; 0x1f
    16ba:	98 a3       	std	Y+32, r25	; 0x20
    16bc:	a9 a3       	std	Y+33, r26	; 0x21
    16be:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16c2:	78 a1       	ldd	r23, Y+32	; 0x20
    16c4:	89 a1       	ldd	r24, Y+33	; 0x21
    16c6:	9a a1       	ldd	r25, Y+34	; 0x22
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <LCD_INIT+0x166>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9e 8f       	std	Y+30, r25	; 0x1e
    16de:	8d 8f       	std	Y+29, r24	; 0x1d
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <LCD_INIT+0x1e4>
	else if (__tmp > 65535)
    16e2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16e4:	78 a1       	ldd	r23, Y+32	; 0x20
    16e6:	89 a1       	ldd	r24, Y+33	; 0x21
    16e8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <LCD_INIT+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 8f       	std	Y+30, r25	; 0x1e
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <LCD_INIT+0x1c6>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9c 8f       	std	Y+28, r25	; 0x1c
    172a:	8b 8f       	std	Y+27, r24	; 0x1b
    172c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_INIT+0x1b4>
    1734:	9c 8f       	std	Y+28, r25	; 0x1c
    1736:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9e 8f       	std	Y+30, r25	; 0x1e
    1740:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1744:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <LCD_INIT+0x1a8>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <LCD_INIT+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    174e:	78 a1       	ldd	r23, Y+32	; 0x20
    1750:	89 a1       	ldd	r24, Y+33	; 0x21
    1752:	9a a1       	ldd	r25, Y+34	; 0x22
    1754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9e 8f       	std	Y+30, r25	; 0x1e
    175e:	8d 8f       	std	Y+29, r24	; 0x1d
    1760:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1762:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1764:	9a 8f       	std	Y+26, r25	; 0x1a
    1766:	89 8f       	std	Y+25, r24	; 0x19
    1768:	89 8d       	ldd	r24, Y+25	; 0x19
    176a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_INIT+0x1f0>
    1770:	9a 8f       	std	Y+26, r25	; 0x1a
    1772:	89 8f       	std	Y+25, r24	; 0x19
	//DataDir_LCD_PORT = 0xFF;
	_delay_ms(15);
	LCD_clear_screen();
    1774:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_clear_screen>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a8 ec       	ldi	r26, 0xC8	; 200
    177e:	b2 e4       	ldi	r27, 0x42	; 66
    1780:	8d 8b       	std	Y+21, r24	; 0x15
    1782:	9e 8b       	std	Y+22, r25	; 0x16
    1784:	af 8b       	std	Y+23, r26	; 0x17
    1786:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	2b ea       	ldi	r18, 0xAB	; 171
    1792:	3a ea       	ldi	r19, 0xAA	; 170
    1794:	4a e2       	ldi	r20, 0x2A	; 42
    1796:	50 e4       	ldi	r21, 0x40	; 64
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	89 8b       	std	Y+17, r24	; 0x11
    17a2:	9a 8b       	std	Y+18, r25	; 0x12
    17a4:	ab 8b       	std	Y+19, r26	; 0x13
    17a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17a8:	69 89       	ldd	r22, Y+17	; 0x11
    17aa:	7a 89       	ldd	r23, Y+18	; 0x12
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	1c f4       	brge	.+6      	; 0x17c6 <LCD_INIT+0x24a>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	88 8b       	std	Y+16, r24	; 0x10
    17c4:	91 c0       	rjmp	.+290    	; 0x18e8 <LCD_INIT+0x36c>
	else if (__tmp > 255)
    17c6:	69 89       	ldd	r22, Y+17	; 0x11
    17c8:	7a 89       	ldd	r23, Y+18	; 0x12
    17ca:	8b 89       	ldd	r24, Y+19	; 0x13
    17cc:	9c 89       	ldd	r25, Y+20	; 0x14
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	53 e4       	ldi	r21, 0x43	; 67
    17d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	0c f0       	brlt	.+2      	; 0x17e0 <LCD_INIT+0x264>
    17de:	7b c0       	rjmp	.+246    	; 0x18d6 <LCD_INIT+0x35a>
	{
		_delay_ms(__us / 1000.0);
    17e0:	6d 89       	ldd	r22, Y+21	; 0x15
    17e2:	7e 89       	ldd	r23, Y+22	; 0x16
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a e7       	ldi	r20, 0x7A	; 122
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8c 87       	std	Y+12, r24	; 0x0c
    17fa:	9d 87       	std	Y+13, r25	; 0x0d
    17fc:	ae 87       	std	Y+14, r26	; 0x0e
    17fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	6c 85       	ldd	r22, Y+12	; 0x0c
    1802:	7d 85       	ldd	r23, Y+13	; 0x0d
    1804:	8e 85       	ldd	r24, Y+14	; 0x0e
    1806:	9f 85       	ldd	r25, Y+15	; 0x0f
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	88 87       	std	Y+8, r24	; 0x08
    181a:	99 87       	std	Y+9, r25	; 0x09
    181c:	aa 87       	std	Y+10, r26	; 0x0a
    181e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1820:	68 85       	ldd	r22, Y+8	; 0x08
    1822:	79 85       	ldd	r23, Y+9	; 0x09
    1824:	8a 85       	ldd	r24, Y+10	; 0x0a
    1826:	9b 85       	ldd	r25, Y+11	; 0x0b
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <LCD_INIT+0x2c6>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9f 83       	std	Y+7, r25	; 0x07
    183e:	8e 83       	std	Y+6, r24	; 0x06
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <LCD_INIT+0x344>
	else if (__tmp > 65535)
    1842:	68 85       	ldd	r22, Y+8	; 0x08
    1844:	79 85       	ldd	r23, Y+9	; 0x09
    1846:	8a 85       	ldd	r24, Y+10	; 0x0a
    1848:	9b 85       	ldd	r25, Y+11	; 0x0b
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <LCD_INIT+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	6c 85       	ldd	r22, Y+12	; 0x0c
    185c:	7d 85       	ldd	r23, Y+13	; 0x0d
    185e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1860:	9f 85       	ldd	r25, Y+15	; 0x0f
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9f 83       	std	Y+7, r25	; 0x07
    1880:	8e 83       	std	Y+6, r24	; 0x06
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <LCD_INIT+0x326>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9d 83       	std	Y+5, r25	; 0x05
    188a:	8c 83       	std	Y+4, r24	; 0x04
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_INIT+0x314>
    1894:	9d 83       	std	Y+5, r25	; 0x05
    1896:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9f 83       	std	Y+7, r25	; 0x07
    18a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	9f 81       	ldd	r25, Y+7	; 0x07
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <LCD_INIT+0x308>
    18aa:	24 c0       	rjmp	.+72     	; 0x18f4 <LCD_INIT+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	68 85       	ldd	r22, Y+8	; 0x08
    18ae:	79 85       	ldd	r23, Y+9	; 0x09
    18b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9f 83       	std	Y+7, r25	; 0x07
    18be:	8e 83       	std	Y+6, r24	; 0x06
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	9b 83       	std	Y+3, r25	; 0x03
    18c6:	8a 83       	std	Y+2, r24	; 0x02
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	9b 81       	ldd	r25, Y+3	; 0x03
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_INIT+0x350>
    18d0:	9b 83       	std	Y+3, r25	; 0x03
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	0f c0       	rjmp	.+30     	; 0x18f4 <LCD_INIT+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d6:	69 89       	ldd	r22, Y+17	; 0x11
    18d8:	7a 89       	ldd	r23, Y+18	; 0x12
    18da:	8b 89       	ldd	r24, Y+19	; 0x13
    18dc:	9c 89       	ldd	r25, Y+20	; 0x14
    18de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	88 8b       	std	Y+16, r24	; 0x10
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	8a 95       	dec	r24
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_INIT+0x372>
    18f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    18f4:	88 e3       	ldi	r24, 0x38	; 56
    18f6:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    18fa:	86 e0       	ldi	r24, 0x06	; 6
    18fc:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1900:	80 e8       	ldi	r24, 0x80	; 128
    1902:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>

}
    190c:	e4 96       	adiw	r28, 0x34	; 52
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <LCD_check_lcd_isbusy+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    1928:	ea e3       	ldi	r30, 0x3A	; 58
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    1934:	a8 e3       	ldi	r26, 0x38	; 56
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e8 e3       	ldi	r30, 0x38	; 56
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	84 60       	ori	r24, 0x04	; 4
    1940:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    1942:	a8 e3       	ldi	r26, 0x38	; 56
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e8 e3       	ldi	r30, 0x38	; 56
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8d 7f       	andi	r24, 0xFD	; 253
    194e:	8c 93       	st	X, r24
	LCD_lcd_kick();
    1950:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    1954:	ea e3       	ldi	r30, 0x3A	; 58
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	ea e3       	ldi	r30, 0x3A	; 58
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    1962:	a8 e3       	ldi	r26, 0x38	; 56
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e8 e3       	ldi	r30, 0x38	; 56
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8b 7f       	andi	r24, 0xFB	; 251
    196e:	8c 93       	st	X, r24
	
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	cf 91       	pop	r28
    1976:	df 91       	pop	r29
    1978:	08 95       	ret

0000197a <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	2f 97       	sbiw	r28, 0x0f	; 15
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    1990:	0e 94 8f 0c 	call	0x191e	; 0x191e <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    1994:	eb e3       	ldi	r30, 0x3B	; 59
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8f 85       	ldd	r24, Y+15	; 0x0f
    199a:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
    199c:	a8 e3       	ldi	r26, 0x38	; 56
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	89 7f       	andi	r24, 0xF9	; 249
    19a8:	8c 93       	st	X, r24
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	a0 e8       	ldi	r26, 0x80	; 128
    19b0:	bf e3       	ldi	r27, 0x3F	; 63
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	a9 87       	std	Y+9, r26	; 0x09
    19d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <LCD_WRITE_COMMAND+0xe2>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_WRITE_COMMAND+0xd0>
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <LCD_WRITE_COMMAND+0xc4>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_WRITE_COMMAND+0x10c>
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    1a8e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    1a92:	2f 96       	adiw	r28, 0x0f	; 15
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	2f 97       	sbiw	r28, 0x0f	; 15
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    1aba:	0e 94 8f 0c 	call	0x191e	; 0x191e <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac4:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    1ac6:	a8 e3       	ldi	r26, 0x38	; 56
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e8 e3       	ldi	r30, 0x38	; 56
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8b 7f       	andi	r24, 0xFB	; 251
    1ad2:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    1ad4:	a8 e3       	ldi	r26, 0x38	; 56
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e8 e3       	ldi	r30, 0x38	; 56
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	8c 93       	st	X, r24
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e8       	ldi	r26, 0x80	; 128
    1ae8:	bf e3       	ldi	r27, 0x3F	; 63
    1aea:	8b 87       	std	Y+11, r24	; 0x0b
    1aec:	9c 87       	std	Y+12, r25	; 0x0c
    1aee:	ad 87       	std	Y+13, r26	; 0x0d
    1af0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8f 83       	std	Y+7, r24	; 0x07
    1b0c:	98 87       	std	Y+8, r25	; 0x08
    1b0e:	a9 87       	std	Y+9, r26	; 0x09
    1b10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <LCD_WRITE_CHAR+0xf0>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 83       	std	Y+4, r25	; 0x04
    1b7c:	8b 83       	std	Y+3, r24	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_WRITE_CHAR+0xde>
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <LCD_WRITE_CHAR+0xd2>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_WRITE_CHAR+0x11a>
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    1bc6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    1bca:	2f 96       	adiw	r28, 0x0f	; 15
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <LCD_WRITE_STRING+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <LCD_WRITE_STRING+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    1bec:	1a 82       	std	Y+2, r1	; 0x02
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	27 c0       	rjmp	.+78     	; 0x1c40 <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    1bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1c00:	20 81       	ld	r18, Z
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	01 96       	adiw	r24, 0x01	; 1
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	82 2f       	mov	r24, r18
    1c0e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
		if (count == 16)
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	80 31       	cpi	r24, 0x10	; 16
    1c18:	91 05       	cpc	r25, r1
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    1c1c:	82 e0       	ldi	r24, 0x02	; 2
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
    1c24:	0d c0       	rjmp	.+26     	; 0x1c40 <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	80 32       	cpi	r24, 0x20	; 32
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	41 f4       	brne	.+16     	; 0x1c40 <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    1c30:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
			count = 0;
    1c3c:	1a 82       	std	Y+2, r1	; 0x02
    1c3e:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    1c40:	eb 81       	ldd	r30, Y+3	; 0x03
    1c42:	fc 81       	ldd	r31, Y+4	; 0x04
    1c44:	80 81       	ld	r24, Z
    1c46:	88 23       	and	r24, r24
    1c48:	a1 f6       	brne	.-88     	; 0x1bf2 <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <LCD_custom_character>:


void LCD_custom_character(){
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	aa 97       	sbiw	r28, 0x2a	; 42
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITE_COMMAND(64);
    1c6c:	80 e4       	ldi	r24, 0x40	; 64
    1c6e:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(14);
    1c78:	8e e0       	ldi	r24, 0x0E	; 14
    1c7a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1c7e:	81 e1       	ldi	r24, 0x11	; 17
    1c80:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(2);
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1c8a:	84 e0       	ldi	r24, 0x04	; 4
    1c8c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1c90:	84 e0       	ldi	r24, 0x04	; 4
    1c92:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1c9c:	84 e0       	ldi	r24, 0x04	; 4
    1c9e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1ca2:	80 e8       	ldi	r24, 0x80	; 128
    1ca4:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e2       	ldi	r26, 0x20	; 32
    1cb4:	b1 e4       	ldi	r27, 0x41	; 65
    1cb6:	8f a3       	std	Y+39, r24	; 0x27
    1cb8:	98 a7       	std	Y+40, r25	; 0x28
    1cba:	a9 a7       	std	Y+41, r26	; 0x29
    1cbc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a ef       	ldi	r20, 0xFA	; 250
    1ccc:	54 e4       	ldi	r21, 0x44	; 68
    1cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8b a3       	std	Y+35, r24	; 0x23
    1cd8:	9c a3       	std	Y+36, r25	; 0x24
    1cda:	ad a3       	std	Y+37, r26	; 0x25
    1cdc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cde:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <LCD_custom_character+0xa8>
		__ticks = 1;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	9a a3       	std	Y+34, r25	; 0x22
    1cfc:	89 a3       	std	Y+33, r24	; 0x21
    1cfe:	3f c0       	rjmp	.+126    	; 0x1d7e <LCD_custom_character+0x126>
	else if (__tmp > 65535)
    1d00:	6b a1       	ldd	r22, Y+35	; 0x23
    1d02:	7c a1       	ldd	r23, Y+36	; 0x24
    1d04:	8d a1       	ldd	r24, Y+37	; 0x25
    1d06:	9e a1       	ldd	r25, Y+38	; 0x26
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	4c f5       	brge	.+82     	; 0x1d6a <LCD_custom_character+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e2       	ldi	r20, 0x20	; 32
    1d26:	51 e4       	ldi	r21, 0x41	; 65
    1d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
    1d40:	0f c0       	rjmp	.+30     	; 0x1d60 <LCD_custom_character+0x108>
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	98 a3       	std	Y+32, r25	; 0x20
    1d48:	8f 8f       	std	Y+31, r24	; 0x1f
    1d4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d4c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_custom_character+0xf6>
    1d52:	98 a3       	std	Y+32, r25	; 0x20
    1d54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d56:	89 a1       	ldd	r24, Y+33	; 0x21
    1d58:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	9a a3       	std	Y+34, r25	; 0x22
    1d5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d60:	89 a1       	ldd	r24, Y+33	; 0x21
    1d62:	9a a1       	ldd	r25, Y+34	; 0x22
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	69 f7       	brne	.-38     	; 0x1d42 <LCD_custom_character+0xea>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <LCD_custom_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d70:	9e a1       	ldd	r25, Y+38	; 0x26
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9a a3       	std	Y+34, r25	; 0x22
    1d7c:	89 a3       	std	Y+33, r24	; 0x21
    1d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d80:	9a a1       	ldd	r25, Y+34	; 0x22
    1d82:	9e 8f       	std	Y+30, r25	; 0x1e
    1d84:	8d 8f       	std	Y+29, r24	; 0x1d
    1d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_custom_character+0x132>
    1d8e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


	LCD_WRITE_COMMAND(72);
    1d92:	88 e4       	ldi	r24, 0x48	; 72
    1d94:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(10);
    1d9e:	8a e0       	ldi	r24, 0x0A	; 10
    1da0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(21);
    1da4:	85 e1       	ldi	r24, 0x15	; 21
    1da6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1daa:	81 e1       	ldi	r24, 0x11	; 17
    1dac:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(18);
    1db0:	82 e1       	ldi	r24, 0x12	; 18
    1db2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,3);
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
	LCD_WRITE_CHAR(1);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e2       	ldi	r26, 0x20	; 32
    1ddc:	b1 e4       	ldi	r27, 0x41	; 65
    1dde:	89 8f       	std	Y+25, r24	; 0x19
    1de0:	9a 8f       	std	Y+26, r25	; 0x1a
    1de2:	ab 8f       	std	Y+27, r26	; 0x1b
    1de4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	69 8d       	ldd	r22, Y+25	; 0x19
    1de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8d 8b       	std	Y+21, r24	; 0x15
    1e00:	9e 8b       	std	Y+22, r25	; 0x16
    1e02:	af 8b       	std	Y+23, r26	; 0x17
    1e04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <LCD_custom_character+0x1d0>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <LCD_custom_character+0x24e>
	else if (__tmp > 65535)
    1e28:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <LCD_custom_character+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	69 8d       	ldd	r22, Y+25	; 0x19
    1e42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <LCD_custom_character+0x230>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9a 8b       	std	Y+18, r25	; 0x12
    1e70:	89 8b       	std	Y+17, r24	; 0x11
    1e72:	89 89       	ldd	r24, Y+17	; 0x11
    1e74:	9a 89       	ldd	r25, Y+18	; 0x12
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD_custom_character+0x21e>
    1e7a:	9a 8b       	std	Y+18, r25	; 0x12
    1e7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <LCD_custom_character+0x212>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <LCD_custom_character+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	98 8b       	std	Y+16, r25	; 0x10
    1eac:	8f 87       	std	Y+15, r24	; 0x0f
    1eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb0:	98 89       	ldd	r25, Y+16	; 0x10
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD_custom_character+0x25a>
    1eb6:	98 8b       	std	Y+16, r25	; 0x10
    1eb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_WRITE_COMMAND(80);
    1eba:	80 e5       	ldi	r24, 0x50	; 80
    1ebc:	0e 94 bd 0c 	call	0x197a	; 0x197a <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(20);
    1ec6:	84 e1       	ldi	r24, 0x14	; 20
    1ec8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(11);
    1ecc:	8b e0       	ldi	r24, 0x0B	; 11
    1ece:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(27);
    1ed2:	8b e1       	ldi	r24, 0x1B	; 27
    1ed4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(28);
    1ed8:	8c e1       	ldi	r24, 0x1C	; 28
    1eda:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(40);
    1ede:	88 e2       	ldi	r24, 0x28	; 40
    1ee0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,5);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	65 e0       	ldi	r22, 0x05	; 5
    1ef4:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
	LCD_WRITE_CHAR(2);
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e2       	ldi	r26, 0x20	; 32
    1f04:	b1 e4       	ldi	r27, 0x41	; 65
    1f06:	8b 87       	std	Y+11, r24	; 0x0b
    1f08:	9c 87       	std	Y+12, r25	; 0x0c
    1f0a:	ad 87       	std	Y+13, r26	; 0x0d
    1f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	8f 83       	std	Y+7, r24	; 0x07
    1f28:	98 87       	std	Y+8, r25	; 0x08
    1f2a:	a9 87       	std	Y+9, r26	; 0x09
    1f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_custom_character+0x2f8>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_custom_character+0x376>
	else if (__tmp > 65535)
    1f50:	6f 81       	ldd	r22, Y+7	; 0x07
    1f52:	78 85       	ldd	r23, Y+8	; 0x08
    1f54:	89 85       	ldd	r24, Y+9	; 0x09
    1f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_custom_character+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_custom_character+0x358>
    1f92:	88 ec       	ldi	r24, 0xC8	; 200
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_custom_character+0x346>
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_custom_character+0x33a>
    1fb8:	14 c0       	rjmp	.+40     	; 0x1fe2 <LCD_custom_character+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_custom_character+0x382>
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    1fe2:	aa 96       	adiw	r28, 0x2a	; 42
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <main>:
#include "STD_TYPES.h"

#define F_CPU 8000000UL

int main()
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	6e 97       	sbiw	r28, 0x1e	; 30
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
   LCD_INIT();
    2008:	0e 94 be 0a 	call	0x157c	; 0x157c <LCD_INIT>
 //  _delay_ms(30);
   UART_Init();
    200c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_Init>
   Keypad_init();
    2010:	0e 94 c3 08 	call	0x1186	; 0x1186 <Keypad_init>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e2       	ldi	r26, 0x20	; 32
    201a:	b1 e4       	ldi	r27, 0x41	; 65
    201c:	89 8f       	std	Y+25, r24	; 0x19
    201e:	9a 8f       	std	Y+26, r25	; 0x1a
    2020:	ab 8f       	std	Y+27, r26	; 0x1b
    2022:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    202a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4a ef       	ldi	r20, 0xFA	; 250
    2032:	54 e4       	ldi	r21, 0x44	; 68
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8d 8b       	std	Y+21, r24	; 0x15
    203e:	9e 8b       	std	Y+22, r25	; 0x16
    2040:	af 8b       	std	Y+23, r26	; 0x17
    2042:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5f e3       	ldi	r21, 0x3F	; 63
    2054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2058:	88 23       	and	r24, r24
    205a:	2c f4       	brge	.+10     	; 0x2066 <main+0x72>
		__ticks = 1;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 8b       	std	Y+20, r25	; 0x14
    2062:	8b 8b       	std	Y+19, r24	; 0x13
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <main+0xf0>
	else if (__tmp > 65535)
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	4f e7       	ldi	r20, 0x7F	; 127
    2074:	57 e4       	ldi	r21, 0x47	; 71
    2076:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207a:	18 16       	cp	r1, r24
    207c:	4c f5       	brge	.+82     	; 0x20d0 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207e:	69 8d       	ldd	r22, Y+25	; 0x19
    2080:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <main+0xd2>
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	89 8b       	std	Y+17, r24	; 0x11
    20b0:	89 89       	ldd	r24, Y+17	; 0x11
    20b2:	9a 89       	ldd	r25, Y+18	; 0x12
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <main+0xc0>
    20b8:	9a 8b       	std	Y+18, r25	; 0x12
    20ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8b 89       	ldd	r24, Y+19	; 0x13
    20c8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <main+0xb4>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	8b 89       	ldd	r24, Y+19	; 0x13
    20e6:	9c 89       	ldd	r25, Y+20	; 0x14
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 89       	ldd	r25, Y+16	; 0x10
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <main+0xfc>
    20f4:	98 8b       	std	Y+16, r25	; 0x10
    20f6:	8f 87       	std	Y+15, r24	; 0x0f

 //  LCD_WRITE_STRING("UART Section:");
   _delay_ms(10);
  UART_Init();
    20f8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_Init>
  //UART_SendChar('B');
  //UART_SendChar(10);
 //UART_SendChar('A');
 //LCD_WRITE_STRING((char *)arr); u8 arr[16];
  u8 val;
  char count=0;
    20fc:	1d 8e       	std	Y+29, r1	; 0x1d
     UART_ReceiveString(arr, 16);
        LCD_GOTO_XY(2,0);
      LCD_WRITE_STRING((char *)arr);
*/

		if(UART_Receive_periodChech(&val))
    20fe:	ce 01       	movw	r24, r28
    2100:	4e 96       	adiw	r24, 0x1e	; 30
    2102:	0e 94 fb 07 	call	0xff6	; 0xff6 <UART_Receive_periodChech>
    2106:	88 23       	and	r24, r24
    2108:	39 f0       	breq	.+14     	; 0x2118 <main+0x124>
		{
			LCD_GOTO_XY(2,0);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
			LCD_WRITE_CHAR(val);
    2112:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2114:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
		}

		LCD_GOTO_XY(1,0);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	0e 94 9e 0a 	call	0x153c	; 0x153c <LCD_GOTO_XY>
		LCD_WRITE_STRING("count = ");
    2120:	80 e6       	ldi	r24, 0x60	; 96
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_WRITE_STRING>
		LCD_WRITE_CHAR('1');
    2128:	81 e3       	ldi	r24, 0x31	; 49
    212a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LCD_WRITE_CHAR>
		count++;
    212e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	8d 8f       	std	Y+29, r24	; 0x1d
		if(count == 10 )
    2134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2136:	8a 30       	cpi	r24, 0x0A	; 10
    2138:	09 f4       	brne	.+2      	; 0x213c <main+0x148>
		{
			count =0;
    213a:	1d 8e       	std	Y+29, r1	; 0x1d
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	aa ef       	ldi	r26, 0xFA	; 250
    2142:	b3 e4       	ldi	r27, 0x43	; 67
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a ef       	ldi	r20, 0xFA	; 250
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <main+0x19a>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <main+0x218>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <main+0x1fa>
    21d0:	88 ec       	ldi	r24, 0xC8	; 200
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <main+0x1e8>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <main+0x1dc>
    21f6:	83 cf       	rjmp	.-250    	; 0x20fe <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <main+0x224>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	6e cf       	rjmp	.-292    	; 0x20fe <main+0x10a>

00002222 <__prologue_saves__>:
    2222:	2f 92       	push	r2
    2224:	3f 92       	push	r3
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	ca 1b       	sub	r28, r26
    224c:	db 0b       	sbc	r29, r27
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	09 94       	ijmp

0000225a <__epilogue_restores__>:
    225a:	2a 88       	ldd	r2, Y+18	; 0x12
    225c:	39 88       	ldd	r3, Y+17	; 0x11
    225e:	48 88       	ldd	r4, Y+16	; 0x10
    2260:	5f 84       	ldd	r5, Y+15	; 0x0f
    2262:	6e 84       	ldd	r6, Y+14	; 0x0e
    2264:	7d 84       	ldd	r7, Y+13	; 0x0d
    2266:	8c 84       	ldd	r8, Y+12	; 0x0c
    2268:	9b 84       	ldd	r9, Y+11	; 0x0b
    226a:	aa 84       	ldd	r10, Y+10	; 0x0a
    226c:	b9 84       	ldd	r11, Y+9	; 0x09
    226e:	c8 84       	ldd	r12, Y+8	; 0x08
    2270:	df 80       	ldd	r13, Y+7	; 0x07
    2272:	ee 80       	ldd	r14, Y+6	; 0x06
    2274:	fd 80       	ldd	r15, Y+5	; 0x05
    2276:	0c 81       	ldd	r16, Y+4	; 0x04
    2278:	1b 81       	ldd	r17, Y+3	; 0x03
    227a:	aa 81       	ldd	r26, Y+2	; 0x02
    227c:	b9 81       	ldd	r27, Y+1	; 0x01
    227e:	ce 0f       	add	r28, r30
    2280:	d1 1d       	adc	r29, r1
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	ed 01       	movw	r28, r26
    228e:	08 95       	ret

00002290 <_exit>:
    2290:	f8 94       	cli

00002292 <__stop_program>:
    2292:	ff cf       	rjmp	.-2      	; 0x2292 <__stop_program>
