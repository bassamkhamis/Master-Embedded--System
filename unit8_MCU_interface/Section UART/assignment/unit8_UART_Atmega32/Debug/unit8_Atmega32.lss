
unit8_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001fec  00002060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a04  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c5e  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000046e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004842  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000049d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00008c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000976c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <main>
      7a:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <UART_Init>:
 */
#include "UART.h"


void UART_Init(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

	UBRRL = 51;    // 9600 buad rate
     c96:	e9 e2       	ldi	r30, 0x29	; 41
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	83 e3       	ldi	r24, 0x33	; 51
     c9c:	80 83       	st	Z, r24

   CLEAR_BIT(UCSRA, U2X);
     c9e:	ab e2       	ldi	r26, 0x2B	; 43
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	eb e2       	ldi	r30, 0x2B	; 43
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8d 7f       	andi	r24, 0xFD	; 253
     caa:	8c 93       	st	X, r24
   * all by default we wantn't  to config it
   *
   * */

	//Enable UART Receive and Transmit
	SET_BIT(UCSRB,TXEN);
     cac:	aa e2       	ldi	r26, 0x2A	; 42
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ea e2       	ldi	r30, 0x2A	; 42
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 60       	ori	r24, 0x08	; 8
     cb8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     cba:	aa e2       	ldi	r26, 0x2A	; 42
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e2       	ldi	r30, 0x2A	; 42
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	8c 93       	st	X, r24


}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <UART_SendChar>:
void UART_SendChar(u8 Data)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01
	while (!READ_BIT(UCSRA,UDRE));
     cda:	eb e2       	ldi	r30, 0x2B	; 43
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	82 95       	swap	r24
     ce2:	86 95       	lsr	r24
     ce4:	87 70       	andi	r24, 0x07	; 7
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	81 70       	andi	r24, 0x01	; 1
     cec:	90 70       	andi	r25, 0x00	; 0
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	a1 f3       	breq	.-24     	; 0xcda <UART_SendChar+0xc>
	UDR = Data;
     cf2:	ec e2       	ldi	r30, 0x2C	; 44
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	80 83       	st	Z, r24


}
     cfa:	0f 90       	pop	r0
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <UART_ReceiveChar>:
u8 UART_ReceiveChar(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62

	while (!READ_BIT(UCSRA,RXC));
     d0c:	eb e2       	ldi	r30, 0x2B	; 43
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 23       	and	r24, r24
     d14:	dc f7       	brge	.-10     	; 0xd0c <UART_ReceiveChar+0xa>
	u8 temp = UDR;
     d16:	ec e2       	ldi	r30, 0x2C	; 44
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	89 83       	std	Y+1, r24	; 0x01
	return temp;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <UART_SendString>:

void UART_SendString(u8 *ptr){
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <UART_SendString+0x6>
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <UART_SendString+0x24>


	while(*ptr){
		UART_SendChar(*ptr);
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	80 81       	ld	r24, Z
     d3e:	0e 94 67 06 	call	0xcce	; 0xcce <UART_SendChar>
		ptr++;
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(u8 *ptr){


	while(*ptr){
     d4c:	e9 81       	ldd	r30, Y+1	; 0x01
     d4e:	fa 81       	ldd	r31, Y+2	; 0x02
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	89 f7       	brne	.-30     	; 0xd38 <UART_SendString+0x10>
		UART_SendChar(*ptr);
		ptr++;
	}
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <UART_Send32>:

void UART_Send32(u32 data){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	2a 97       	sbiw	r28, 0x0a	; 10
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	2b 83       	std	Y+3, r18	; 0x03
     d76:	3c 83       	std	Y+4, r19	; 0x04
     d78:	4d 83       	std	Y+5, r20	; 0x05
     d7a:	5e 83       	std	Y+6, r21	; 0x06
     d7c:	6f 83       	std	Y+7, r22	; 0x07
     d7e:	78 87       	std	Y+8, r23	; 0x08
     d80:	89 87       	std	Y+9, r24	; 0x09
     d82:	9a 87       	std	Y+10, r25	; 0x0a
	u32 *ptr = &data;
     d84:	ce 01       	movw	r24, r28
     d86:	03 96       	adiw	r24, 0x03	; 3
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	UART_SendChar(ptr[0]);
     d8c:	e9 81       	ldd	r30, Y+1	; 0x01
     d8e:	fa 81       	ldd	r31, Y+2	; 0x02
     d90:	20 81       	ld	r18, Z
     d92:	31 81       	ldd	r19, Z+1	; 0x01
     d94:	42 81       	ldd	r20, Z+2	; 0x02
     d96:	53 81       	ldd	r21, Z+3	; 0x03
     d98:	64 81       	ldd	r22, Z+4	; 0x04
     d9a:	75 81       	ldd	r23, Z+5	; 0x05
     d9c:	86 81       	ldd	r24, Z+6	; 0x06
     d9e:	97 81       	ldd	r25, Z+7	; 0x07
     da0:	82 2f       	mov	r24, r18
     da2:	0e 94 67 06 	call	0xcce	; 0xcce <UART_SendChar>
	UART_SendChar(ptr[1]);
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	fc 01       	movw	r30, r24
     dac:	38 96       	adiw	r30, 0x08	; 8
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	42 81       	ldd	r20, Z+2	; 0x02
     db4:	53 81       	ldd	r21, Z+3	; 0x03
     db6:	64 81       	ldd	r22, Z+4	; 0x04
     db8:	75 81       	ldd	r23, Z+5	; 0x05
     dba:	86 81       	ldd	r24, Z+6	; 0x06
     dbc:	97 81       	ldd	r25, Z+7	; 0x07
     dbe:	82 2f       	mov	r24, r18
     dc0:	0e 94 67 06 	call	0xcce	; 0xcce <UART_SendChar>
	UART_SendChar(ptr[2]);
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	fc 01       	movw	r30, r24
     dca:	70 96       	adiw	r30, 0x10	; 16
     dcc:	20 81       	ld	r18, Z
     dce:	31 81       	ldd	r19, Z+1	; 0x01
     dd0:	42 81       	ldd	r20, Z+2	; 0x02
     dd2:	53 81       	ldd	r21, Z+3	; 0x03
     dd4:	64 81       	ldd	r22, Z+4	; 0x04
     dd6:	75 81       	ldd	r23, Z+5	; 0x05
     dd8:	86 81       	ldd	r24, Z+6	; 0x06
     dda:	97 81       	ldd	r25, Z+7	; 0x07
     ddc:	82 2f       	mov	r24, r18
     dde:	0e 94 67 06 	call	0xcce	; 0xcce <UART_SendChar>
	UART_SendChar(ptr[3]);
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	fc 01       	movw	r30, r24
     de8:	78 96       	adiw	r30, 0x18	; 24
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	42 81       	ldd	r20, Z+2	; 0x02
     df0:	53 81       	ldd	r21, Z+3	; 0x03
     df2:	64 81       	ldd	r22, Z+4	; 0x04
     df4:	75 81       	ldd	r23, Z+5	; 0x05
     df6:	86 81       	ldd	r24, Z+6	; 0x06
     df8:	97 81       	ldd	r25, Z+7	; 0x07
     dfa:	82 2f       	mov	r24, r18
     dfc:	0e 94 67 06 	call	0xcce	; 0xcce <UART_SendChar>
}
     e00:	2a 96       	adiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <UART_Receive32>:

u32 UART_Receive32(void){
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	2a 97       	sbiw	r28, 0x0a	; 10
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
   u32 *ptr, data;
   ptr = &data;
     e36:	ce 01       	movw	r24, r28
     e38:	03 96       	adiw	r24, 0x03	; 3
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
   ptr[0] = UART_ReceiveChar();
     e3e:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	e9 81       	ldd	r30, Y+1	; 0x01
     e54:	fa 81       	ldd	r31, Y+2	; 0x02
     e56:	20 83       	st	Z, r18
     e58:	31 83       	std	Z+1, r19	; 0x01
     e5a:	42 83       	std	Z+2, r20	; 0x02
     e5c:	53 83       	std	Z+3, r21	; 0x03
     e5e:	64 83       	std	Z+4, r22	; 0x04
     e60:	75 83       	std	Z+5, r23	; 0x05
     e62:	86 83       	std	Z+6, r24	; 0x06
     e64:	97 83       	std	Z+7, r25	; 0x07
   ptr[1] = UART_ReceiveChar();
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	8c 01       	movw	r16, r24
     e6c:	08 5f       	subi	r16, 0xF8	; 248
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	f8 01       	movw	r30, r16
     e86:	20 83       	st	Z, r18
     e88:	f8 01       	movw	r30, r16
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	f8 01       	movw	r30, r16
     e8e:	42 83       	std	Z+2, r20	; 0x02
     e90:	f8 01       	movw	r30, r16
     e92:	53 83       	std	Z+3, r21	; 0x03
     e94:	f8 01       	movw	r30, r16
     e96:	64 83       	std	Z+4, r22	; 0x04
     e98:	f8 01       	movw	r30, r16
     e9a:	75 83       	std	Z+5, r23	; 0x05
     e9c:	f8 01       	movw	r30, r16
     e9e:	86 83       	std	Z+6, r24	; 0x06
     ea0:	f8 01       	movw	r30, r16
     ea2:	97 83       	std	Z+7, r25	; 0x07
   ptr[2] = UART_ReceiveChar();
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	8c 01       	movw	r16, r24
     eaa:	00 5f       	subi	r16, 0xF0	; 240
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	f8 01       	movw	r30, r16
     ec4:	20 83       	st	Z, r18
     ec6:	f8 01       	movw	r30, r16
     ec8:	31 83       	std	Z+1, r19	; 0x01
     eca:	f8 01       	movw	r30, r16
     ecc:	42 83       	std	Z+2, r20	; 0x02
     ece:	f8 01       	movw	r30, r16
     ed0:	53 83       	std	Z+3, r21	; 0x03
     ed2:	f8 01       	movw	r30, r16
     ed4:	64 83       	std	Z+4, r22	; 0x04
     ed6:	f8 01       	movw	r30, r16
     ed8:	75 83       	std	Z+5, r23	; 0x05
     eda:	f8 01       	movw	r30, r16
     edc:	86 83       	std	Z+6, r24	; 0x06
     ede:	f8 01       	movw	r30, r16
     ee0:	97 83       	std	Z+7, r25	; 0x07
   ptr[3] = UART_ReceiveChar();
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	8c 01       	movw	r16, r24
     ee8:	08 5e       	subi	r16, 0xE8	; 232
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	f8 01       	movw	r30, r16
     f02:	20 83       	st	Z, r18
     f04:	f8 01       	movw	r30, r16
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	f8 01       	movw	r30, r16
     f0a:	42 83       	std	Z+2, r20	; 0x02
     f0c:	f8 01       	movw	r30, r16
     f0e:	53 83       	std	Z+3, r21	; 0x03
     f10:	f8 01       	movw	r30, r16
     f12:	64 83       	std	Z+4, r22	; 0x04
     f14:	f8 01       	movw	r30, r16
     f16:	75 83       	std	Z+5, r23	; 0x05
     f18:	f8 01       	movw	r30, r16
     f1a:	86 83       	std	Z+6, r24	; 0x06
     f1c:	f8 01       	movw	r30, r16
     f1e:	97 83       	std	Z+7, r25	; 0x07

   return data;
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	4d 81       	ldd	r20, Y+5	; 0x05
     f26:	5e 81       	ldd	r21, Y+6	; 0x06
     f28:	6f 81       	ldd	r22, Y+7	; 0x07
     f2a:	78 85       	ldd	r23, Y+8	; 0x08
     f2c:	89 85       	ldd	r24, Y+9	; 0x09
     f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f30:	a2 2e       	mov	r10, r18
     f32:	b3 2e       	mov	r11, r19
     f34:	c4 2e       	mov	r12, r20
     f36:	d5 2e       	mov	r13, r21
     f38:	e6 2e       	mov	r14, r22
     f3a:	f7 2e       	mov	r15, r23
     f3c:	08 2f       	mov	r16, r24
     f3e:	19 2f       	mov	r17, r25
}
     f40:	2a 2d       	mov	r18, r10
     f42:	3b 2d       	mov	r19, r11
     f44:	4c 2d       	mov	r20, r12
     f46:	5d 2d       	mov	r21, r13
     f48:	6e 2d       	mov	r22, r14
     f4a:	7f 2d       	mov	r23, r15
     f4c:	80 2f       	mov	r24, r16
     f4e:	91 2f       	mov	r25, r17
     f50:	2a 96       	adiw	r28, 0x0a	; 10
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret

00000f72 <UART_ReceiveString>:

void UART_ReceiveString(u8 *ptr, u8 MAX){
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <UART_ReceiveString+0x6>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <UART_ReceiveString+0x8>
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, temp;
     f86:	1a 82       	std	Y+2, r1	; 0x02
	temp = UART_ReceiveChar();
     f88:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	10 c0       	rjmp	.+32     	; 0xfb0 <UART_ReceiveString+0x3e>
	while( i<MAX && temp != '#' ){
		ptr[i] = temp;
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	80 83       	st	Z, r24
		temp = UART_ReceiveChar();
     fa4:	0e 94 81 06 	call	0xd02	; 0xd02 <UART_ReceiveChar>
     fa8:	89 83       	std	Y+1, r24	; 0x01
		i++;
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(u8 *ptr, u8 MAX){
	u8 i = 0, temp;
	temp = UART_ReceiveChar();
	while( i<MAX && temp != '#' ){
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	98 17       	cp	r25, r24
     fb6:	18 f4       	brcc	.+6      	; 0xfbe <UART_ReceiveString+0x4c>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	83 32       	cpi	r24, 0x23	; 35
     fbc:	49 f7       	brne	.-46     	; 0xf90 <UART_ReceiveString+0x1e>
		ptr[i] = temp;
		temp = UART_ReceiveChar();
		i++;
	}
	ptr[i] = '\0';
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	fc 01       	movw	r30, r24
     fca:	e2 0f       	add	r30, r18
     fcc:	f3 1f       	adc	r31, r19
     fce:	10 82       	st	Z, r1
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <Keypad_init>:
char key_row[]={R0, R1, R2, R3};
char key_column[]={C0, C1, C2, C3};


void Keypad_init()
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 7f       	andi	r24, 0xF0	; 240
     ff4:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	80 6f       	ori	r24, 0xF0	; 240
    1002:	8c 93       	st	X, r24
	KEYPAD_PORT =0xff; //active PUR for input pins
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	80 83       	st	Z, r24



}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <Keypad_getkey>:
char Keypad_getkey()
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	27 97       	sbiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for(i=0; i<4; i++){
    1026:	1c 82       	std	Y+4, r1	; 0x04
    1028:	1b 82       	std	Y+3, r1	; 0x03
    102a:	06 c1       	rjmp	.+524    	; 0x1238 <Keypad_getkey+0x226>

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
    102c:	a2 e3       	ldi	r26, 0x32	; 50
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e2 e3       	ldi	r30, 0x32	; 50
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	80 6f       	ori	r24, 0xF0	; 240
    1038:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<key_column[i]);
    103a:	a2 e3       	ldi	r26, 0x32	; 50
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e2 e3       	ldi	r30, 0x32	; 50
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	fc 01       	movw	r30, r24
    104c:	e7 58       	subi	r30, 0x87	; 135
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <Keypad_getkey+0x50>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <Keypad_getkey+0x4c>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24

		for(j=0; j<4; j++){
    106c:	1a 82       	std	Y+2, r1	; 0x02
    106e:	19 82       	std	Y+1, r1	; 0x01
    1070:	d8 c0       	rjmp	.+432    	; 0x1222 <Keypad_getkey+0x210>

			if(!(keypadPIN & (1<<key_row[j]))){
    1072:	e0 e3       	ldi	r30, 0x30	; 48
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	fc 01       	movw	r30, r24
    1082:	eb 58       	subi	r30, 0x8B	; 139
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	80 81       	ld	r24, Z
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <Keypad_getkey+0x82>
    1090:	55 95       	asr	r21
    1092:	47 95       	ror	r20
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <Keypad_getkey+0x7e>
    1098:	ca 01       	movw	r24, r20
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <Keypad_getkey+0x92>
    10a2:	ba c0       	rjmp	.+372    	; 0x1218 <Keypad_getkey+0x206>

				while(!(keypadPIN & (1<<key_row[j])));
    10a4:	e0 e3       	ldi	r30, 0x30	; 48
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	fc 01       	movw	r30, r24
    10b4:	eb 58       	subi	r30, 0x8B	; 139
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <Keypad_getkey+0xb4>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <Keypad_getkey+0xb0>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	90 70       	andi	r25, 0x00	; 0
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	41 f3       	breq	.-48     	; 0x10a4 <Keypad_getkey+0x92>

				switch(i){
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	9f 83       	std	Y+7, r25	; 0x07
    10da:	8e 83       	std	Y+6, r24	; 0x06
    10dc:	4e 81       	ldd	r20, Y+6	; 0x06
    10de:	5f 81       	ldd	r21, Y+7	; 0x07
    10e0:	41 30       	cpi	r20, 0x01	; 1
    10e2:	51 05       	cpc	r21, r1
    10e4:	c1 f1       	breq	.+112    	; 0x1156 <Keypad_getkey+0x144>
    10e6:	8e 81       	ldd	r24, Y+6	; 0x06
    10e8:	9f 81       	ldd	r25, Y+7	; 0x07
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	91 05       	cpc	r25, r1
    10ee:	34 f4       	brge	.+12     	; 0x10fc <Keypad_getkey+0xea>
    10f0:	4e 81       	ldd	r20, Y+6	; 0x06
    10f2:	5f 81       	ldd	r21, Y+7	; 0x07
    10f4:	41 15       	cp	r20, r1
    10f6:	51 05       	cpc	r21, r1
    10f8:	71 f0       	breq	.+28     	; 0x1116 <Keypad_getkey+0x104>
    10fa:	8b c0       	rjmp	.+278    	; 0x1212 <Keypad_getkey+0x200>
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <Keypad_getkey+0xf6>
    1106:	47 c0       	rjmp	.+142    	; 0x1196 <Keypad_getkey+0x184>
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	43 30       	cpi	r20, 0x03	; 3
    110e:	51 05       	cpc	r21, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <Keypad_getkey+0x102>
    1112:	60 c0       	rjmp	.+192    	; 0x11d4 <Keypad_getkey+0x1c2>
    1114:	7e c0       	rjmp	.+252    	; 0x1212 <Keypad_getkey+0x200>

				case 0:
					if(0 == j) return '7';
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	19 f4       	brne	.+6      	; 0x1124 <Keypad_getkey+0x112>
    111e:	57 e3       	ldi	r21, 0x37	; 55
    1120:	5d 83       	std	Y+5, r21	; 0x05
    1122:	92 c0       	rjmp	.+292    	; 0x1248 <Keypad_getkey+0x236>
					else if(1 == j) return '4';
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	19 f4       	brne	.+6      	; 0x1134 <Keypad_getkey+0x122>
    112e:	84 e3       	ldi	r24, 0x34	; 52
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	8a c0       	rjmp	.+276    	; 0x1248 <Keypad_getkey+0x236>
					else if(2 == j) return '1';
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	91 05       	cpc	r25, r1
    113c:	19 f4       	brne	.+6      	; 0x1144 <Keypad_getkey+0x132>
    113e:	91 e3       	ldi	r25, 0x31	; 49
    1140:	9d 83       	std	Y+5, r25	; 0x05
    1142:	82 c0       	rjmp	.+260    	; 0x1248 <Keypad_getkey+0x236>
					else if(3 == j) return '@';
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <Keypad_getkey+0x13e>
    114e:	64 c0       	rjmp	.+200    	; 0x1218 <Keypad_getkey+0x206>
    1150:	40 e4       	ldi	r20, 0x40	; 64
    1152:	4d 83       	std	Y+5, r20	; 0x05
    1154:	79 c0       	rjmp	.+242    	; 0x1248 <Keypad_getkey+0x236>
					break;
				case 1:
					if(0 == j) return '8';
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	19 f4       	brne	.+6      	; 0x1164 <Keypad_getkey+0x152>
    115e:	58 e3       	ldi	r21, 0x38	; 56
    1160:	5d 83       	std	Y+5, r21	; 0x05
    1162:	72 c0       	rjmp	.+228    	; 0x1248 <Keypad_getkey+0x236>
					else if(1 == j) return '5';
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	19 f4       	brne	.+6      	; 0x1174 <Keypad_getkey+0x162>
    116e:	85 e3       	ldi	r24, 0x35	; 53
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	6a c0       	rjmp	.+212    	; 0x1248 <Keypad_getkey+0x236>
					else if(2 == j) return '2';
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	91 05       	cpc	r25, r1
    117c:	19 f4       	brne	.+6      	; 0x1184 <Keypad_getkey+0x172>
    117e:	92 e3       	ldi	r25, 0x32	; 50
    1180:	9d 83       	std	Y+5, r25	; 0x05
    1182:	62 c0       	rjmp	.+196    	; 0x1248 <Keypad_getkey+0x236>
					else if(3 == j) return '0';
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	09 f0       	breq	.+2      	; 0x1190 <Keypad_getkey+0x17e>
    118e:	44 c0       	rjmp	.+136    	; 0x1218 <Keypad_getkey+0x206>
    1190:	40 e3       	ldi	r20, 0x30	; 48
    1192:	4d 83       	std	Y+5, r20	; 0x05
    1194:	59 c0       	rjmp	.+178    	; 0x1248 <Keypad_getkey+0x236>
					break;
				case 2:
					if(0 == j) return '9';
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	19 f4       	brne	.+6      	; 0x11a4 <Keypad_getkey+0x192>
    119e:	59 e3       	ldi	r21, 0x39	; 57
    11a0:	5d 83       	std	Y+5, r21	; 0x05
    11a2:	52 c0       	rjmp	.+164    	; 0x1248 <Keypad_getkey+0x236>
					else if(1 == j) return '6';
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	19 f4       	brne	.+6      	; 0x11b4 <Keypad_getkey+0x1a2>
    11ae:	86 e3       	ldi	r24, 0x36	; 54
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	4a c0       	rjmp	.+148    	; 0x1248 <Keypad_getkey+0x236>
					else if(2 == j) return '3';
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	19 f4       	brne	.+6      	; 0x11c4 <Keypad_getkey+0x1b2>
    11be:	93 e3       	ldi	r25, 0x33	; 51
    11c0:	9d 83       	std	Y+5, r25	; 0x05
    11c2:	42 c0       	rjmp	.+132    	; 0x1248 <Keypad_getkey+0x236>
					else if(3 == j) return '=';
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	91 05       	cpc	r25, r1
    11cc:	29 f5       	brne	.+74     	; 0x1218 <Keypad_getkey+0x206>
    11ce:	4d e3       	ldi	r20, 0x3D	; 61
    11d0:	4d 83       	std	Y+5, r20	; 0x05
    11d2:	3a c0       	rjmp	.+116    	; 0x1248 <Keypad_getkey+0x236>
					break;
				case 3:
					if(0 == j) return '/';
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	19 f4       	brne	.+6      	; 0x11e2 <Keypad_getkey+0x1d0>
    11dc:	5f e2       	ldi	r21, 0x2F	; 47
    11de:	5d 83       	std	Y+5, r21	; 0x05
    11e0:	33 c0       	rjmp	.+102    	; 0x1248 <Keypad_getkey+0x236>
					else if(1 == j) return '*';
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	91 05       	cpc	r25, r1
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <Keypad_getkey+0x1e0>
    11ec:	8a e2       	ldi	r24, 0x2A	; 42
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	2b c0       	rjmp	.+86     	; 0x1248 <Keypad_getkey+0x236>
					else if(2 == j) return '-';
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	91 05       	cpc	r25, r1
    11fa:	19 f4       	brne	.+6      	; 0x1202 <Keypad_getkey+0x1f0>
    11fc:	9d e2       	ldi	r25, 0x2D	; 45
    11fe:	9d 83       	std	Y+5, r25	; 0x05
    1200:	23 c0       	rjmp	.+70     	; 0x1248 <Keypad_getkey+0x236>
					else if(3 == j) return '+';
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	31 f4       	brne	.+12     	; 0x1218 <Keypad_getkey+0x206>
    120c:	4b e2       	ldi	r20, 0x2B	; 43
    120e:	4d 83       	std	Y+5, r20	; 0x05
    1210:	1b c0       	rjmp	.+54     	; 0x1248 <Keypad_getkey+0x236>
					break;
				default:
					return 'A';
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	5d 83       	std	Y+5, r21	; 0x05
    1216:	18 c0       	rjmp	.+48     	; 0x1248 <Keypad_getkey+0x236>
	for(i=0; i<4; i++){

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	91 05       	cpc	r25, r1
    122a:	0c f4       	brge	.+2      	; 0x122e <Keypad_getkey+0x21c>
    122c:	22 cf       	rjmp	.-444    	; 0x1072 <Keypad_getkey+0x60>

}
char Keypad_getkey()
{
	int i,j;
	for(i=0; i<4; i++){
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	91 05       	cpc	r25, r1
    1240:	0c f4       	brge	.+2      	; 0x1244 <Keypad_getkey+0x232>
    1242:	f4 ce       	rjmp	.-536    	; 0x102c <Keypad_getkey+0x1a>
		}


	}

	return 'A';
    1244:	81 e4       	ldi	r24, 0x41	; 65
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	8d 81       	ldd	r24, Y+5	; 0x05

}
    124a:	27 96       	adiw	r28, 0x07	; 7
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <LCD_clear_screen>:
 *      Author: bassam
 */

#include "lcd.h"

void LCD_clear_screen(){
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <LCD_lcd_kick>:

void LCD_lcd_kick(){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2e 97       	sbiw	r28, 0x0e	; 14
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	88 60       	ori	r24, 0x08	; 8
    1290:	8c 93       	st	X, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a8 e4       	ldi	r26, 0x48	; 72
    1298:	b2 e4       	ldi	r27, 0x42	; 66
    129a:	8b 87       	std	Y+11, r24	; 0x0b
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	ad 87       	std	Y+13, r26	; 0x0d
    12a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	a9 87       	std	Y+9, r26	; 0x09
    12c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <LCD_lcd_kick+0x74>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	9e 85       	ldd	r25, Y+14	; 0x0e
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9e 83       	std	Y+6, r25	; 0x06
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <LCD_lcd_kick+0xd4>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_lcd_kick+0xc2>
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <LCD_lcd_kick+0xb6>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_lcd_kick+0xfe>
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	87 7f       	andi	r24, 0xF7	; 247
    1382:	8c 93       	st	X, r24
}
    1384:	2e 96       	adiw	r28, 0x0e	; 14
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <LCD_GOTO_XY+0x6>
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 31       	cpi	r24, 0x10	; 16
    13ae:	20 f4       	brcc	.+8      	; 0x13b8 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 58       	subi	r24, 0x80	; 128
    13b4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	39 f4       	brne	.+14     	; 0x13cc <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 31       	cpi	r24, 0x10	; 16
    13c2:	20 f4       	brcc	.+8      	; 0x13cc <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 54       	subi	r24, 0x40	; 64
    13c8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
		}
	}
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <LCD_INIT>:

void LCD_INIT(){
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	e4 97       	sbiw	r28, 0x34	; 52
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a0 ea       	ldi	r26, 0xA0	; 160
    13f0:	b1 e4       	ldi	r27, 0x41	; 65
    13f2:	89 ab       	std	Y+49, r24	; 0x31
    13f4:	9a ab       	std	Y+50, r25	; 0x32
    13f6:	ab ab       	std	Y+51, r26	; 0x33
    13f8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fa:	69 a9       	ldd	r22, Y+49	; 0x31
    13fc:	7a a9       	ldd	r23, Y+50	; 0x32
    13fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1400:	9c a9       	ldd	r25, Y+52	; 0x34
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4a ef       	ldi	r20, 0xFA	; 250
    1408:	54 e4       	ldi	r21, 0x44	; 68
    140a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	8d a7       	std	Y+45, r24	; 0x2d
    1414:	9e a7       	std	Y+46, r25	; 0x2e
    1416:	af a7       	std	Y+47, r26	; 0x2f
    1418:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    141a:	6d a5       	ldd	r22, Y+45	; 0x2d
    141c:	7e a5       	ldd	r23, Y+46	; 0x2e
    141e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1420:	98 a9       	ldd	r25, Y+48	; 0x30
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e8       	ldi	r20, 0x80	; 128
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    142e:	88 23       	and	r24, r24
    1430:	2c f4       	brge	.+10     	; 0x143c <LCD_INIT+0x66>
		__ticks = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c a7       	std	Y+44, r25	; 0x2c
    1438:	8b a7       	std	Y+43, r24	; 0x2b
    143a:	3f c0       	rjmp	.+126    	; 0x14ba <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    143c:	6d a5       	ldd	r22, Y+45	; 0x2d
    143e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1440:	8f a5       	ldd	r24, Y+47	; 0x2f
    1442:	98 a9       	ldd	r25, Y+48	; 0x30
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	3f ef       	ldi	r19, 0xFF	; 255
    1448:	4f e7       	ldi	r20, 0x7F	; 127
    144a:	57 e4       	ldi	r21, 0x47	; 71
    144c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1450:	18 16       	cp	r1, r24
    1452:	4c f5       	brge	.+82     	; 0x14a6 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1454:	69 a9       	ldd	r22, Y+49	; 0x31
    1456:	7a a9       	ldd	r23, Y+50	; 0x32
    1458:	8b a9       	ldd	r24, Y+51	; 0x33
    145a:	9c a9       	ldd	r25, Y+52	; 0x34
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e2       	ldi	r20, 0x20	; 32
    1462:	51 e4       	ldi	r21, 0x41	; 65
    1464:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9c a7       	std	Y+44, r25	; 0x2c
    147a:	8b a7       	std	Y+43, r24	; 0x2b
    147c:	0f c0       	rjmp	.+30     	; 0x149c <LCD_INIT+0xc6>
    147e:	88 ec       	ldi	r24, 0xC8	; 200
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9a a7       	std	Y+42, r25	; 0x2a
    1484:	89 a7       	std	Y+41, r24	; 0x29
    1486:	89 a5       	ldd	r24, Y+41	; 0x29
    1488:	9a a5       	ldd	r25, Y+42	; 0x2a
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_INIT+0xb4>
    148e:	9a a7       	std	Y+42, r25	; 0x2a
    1490:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1492:	8b a5       	ldd	r24, Y+43	; 0x2b
    1494:	9c a5       	ldd	r25, Y+44	; 0x2c
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	9c a7       	std	Y+44, r25	; 0x2c
    149a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149c:	8b a5       	ldd	r24, Y+43	; 0x2b
    149e:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	69 f7       	brne	.-38     	; 0x147e <LCD_INIT+0xa8>
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    14a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    14aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ac:	98 a9       	ldd	r25, Y+48	; 0x30
    14ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	9c a7       	std	Y+44, r25	; 0x2c
    14b8:	8b a7       	std	Y+43, r24	; 0x2b
    14ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    14bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14be:	98 a7       	std	Y+40, r25	; 0x28
    14c0:	8f a3       	std	Y+39, r24	; 0x27
    14c2:	8f a1       	ldd	r24, Y+39	; 0x27
    14c4:	98 a5       	ldd	r25, Y+40	; 0x28
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <LCD_INIT+0xf0>
    14ca:	98 a7       	std	Y+40, r25	; 0x28
    14cc:	8f a3       	std	Y+39, r24	; 0x27
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
*/
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    14ce:	a7 e3       	ldi	r26, 0x37	; 55
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8e 60       	ori	r24, 0x0E	; 14
    14da:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    14dc:	a8 e3       	ldi	r26, 0x38	; 56
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	81 7f       	andi	r24, 0xF1	; 241
    14e8:	8c 93       	st	X, r24
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e7       	ldi	r26, 0x70	; 112
    14f0:	b1 e4       	ldi	r27, 0x41	; 65
    14f2:	8b a3       	std	Y+35, r24	; 0x23
    14f4:	9c a3       	std	Y+36, r25	; 0x24
    14f6:	ad a3       	std	Y+37, r26	; 0x25
    14f8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fa:	6b a1       	ldd	r22, Y+35	; 0x23
    14fc:	7c a1       	ldd	r23, Y+36	; 0x24
    14fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1500:	9e a1       	ldd	r25, Y+38	; 0x26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4a ef       	ldi	r20, 0xFA	; 250
    1508:	54 e4       	ldi	r21, 0x44	; 68
    150a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	8f 8f       	std	Y+31, r24	; 0x1f
    1514:	98 a3       	std	Y+32, r25	; 0x20
    1516:	a9 a3       	std	Y+33, r26	; 0x21
    1518:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    151a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    151c:	78 a1       	ldd	r23, Y+32	; 0x20
    151e:	89 a1       	ldd	r24, Y+33	; 0x21
    1520:	9a a1       	ldd	r25, Y+34	; 0x22
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	2c f4       	brge	.+10     	; 0x153c <LCD_INIT+0x166>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9e 8f       	std	Y+30, r25	; 0x1e
    1538:	8d 8f       	std	Y+29, r24	; 0x1d
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <LCD_INIT+0x1e4>
	else if (__tmp > 65535)
    153c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    153e:	78 a1       	ldd	r23, Y+32	; 0x20
    1540:	89 a1       	ldd	r24, Y+33	; 0x21
    1542:	9a a1       	ldd	r25, Y+34	; 0x22
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f e7       	ldi	r20, 0x7F	; 127
    154a:	57 e4       	ldi	r21, 0x47	; 71
    154c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	4c f5       	brge	.+82     	; 0x15a6 <LCD_INIT+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1554:	6b a1       	ldd	r22, Y+35	; 0x23
    1556:	7c a1       	ldd	r23, Y+36	; 0x24
    1558:	8d a1       	ldd	r24, Y+37	; 0x25
    155a:	9e a1       	ldd	r25, Y+38	; 0x26
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 8f       	std	Y+30, r25	; 0x1e
    157a:	8d 8f       	std	Y+29, r24	; 0x1d
    157c:	0f c0       	rjmp	.+30     	; 0x159c <LCD_INIT+0x1c6>
    157e:	88 ec       	ldi	r24, 0xC8	; 200
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 8f       	std	Y+28, r25	; 0x1c
    1584:	8b 8f       	std	Y+27, r24	; 0x1b
    1586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <LCD_INIT+0x1b4>
    158e:	9c 8f       	std	Y+28, r25	; 0x1c
    1590:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1592:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1594:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	9e 8f       	std	Y+30, r25	; 0x1e
    159a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f7       	brne	.-38     	; 0x157e <LCD_INIT+0x1a8>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <LCD_INIT+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15a8:	78 a1       	ldd	r23, Y+32	; 0x20
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 8f       	std	Y+30, r25	; 0x1e
    15b8:	8d 8f       	std	Y+29, r24	; 0x1d
    15ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15be:	9a 8f       	std	Y+26, r25	; 0x1a
    15c0:	89 8f       	std	Y+25, r24	; 0x19
    15c2:	89 8d       	ldd	r24, Y+25	; 0x19
    15c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_INIT+0x1f0>
    15ca:	9a 8f       	std	Y+26, r25	; 0x1a
    15cc:	89 8f       	std	Y+25, r24	; 0x19
	//DataDir_LCD_PORT = 0xFF;
	_delay_ms(15);
	LCD_clear_screen();
    15ce:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_clear_screen>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a8 ec       	ldi	r26, 0xC8	; 200
    15d8:	b2 e4       	ldi	r27, 0x42	; 66
    15da:	8d 8b       	std	Y+21, r24	; 0x15
    15dc:	9e 8b       	std	Y+22, r25	; 0x16
    15de:	af 8b       	std	Y+23, r26	; 0x17
    15e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15e2:	6d 89       	ldd	r22, Y+21	; 0x15
    15e4:	7e 89       	ldd	r23, Y+22	; 0x16
    15e6:	8f 89       	ldd	r24, Y+23	; 0x17
    15e8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ea:	2b ea       	ldi	r18, 0xAB	; 171
    15ec:	3a ea       	ldi	r19, 0xAA	; 170
    15ee:	4a e2       	ldi	r20, 0x2A	; 42
    15f0:	50 e4       	ldi	r21, 0x40	; 64
    15f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	89 8b       	std	Y+17, r24	; 0x11
    15fc:	9a 8b       	std	Y+18, r25	; 0x12
    15fe:	ab 8b       	std	Y+19, r26	; 0x13
    1600:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1602:	69 89       	ldd	r22, Y+17	; 0x11
    1604:	7a 89       	ldd	r23, Y+18	; 0x12
    1606:	8b 89       	ldd	r24, Y+19	; 0x13
    1608:	9c 89       	ldd	r25, Y+20	; 0x14
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	1c f4       	brge	.+6      	; 0x1620 <LCD_INIT+0x24a>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	88 8b       	std	Y+16, r24	; 0x10
    161e:	91 c0       	rjmp	.+290    	; 0x1742 <LCD_INIT+0x36c>
	else if (__tmp > 255)
    1620:	69 89       	ldd	r22, Y+17	; 0x11
    1622:	7a 89       	ldd	r23, Y+18	; 0x12
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	53 e4       	ldi	r21, 0x43	; 67
    1630:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	0c f0       	brlt	.+2      	; 0x163a <LCD_INIT+0x264>
    1638:	7b c0       	rjmp	.+246    	; 0x1730 <LCD_INIT+0x35a>
	{
		_delay_ms(__us / 1000.0);
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	4a e7       	ldi	r20, 0x7A	; 122
    1648:	54 e4       	ldi	r21, 0x44	; 68
    164a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	8c 87       	std	Y+12, r24	; 0x0c
    1654:	9d 87       	std	Y+13, r25	; 0x0d
    1656:	ae 87       	std	Y+14, r26	; 0x0e
    1658:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6c 85       	ldd	r22, Y+12	; 0x0c
    165c:	7d 85       	ldd	r23, Y+13	; 0x0d
    165e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1660:	9f 85       	ldd	r25, Y+15	; 0x0f
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a ef       	ldi	r20, 0xFA	; 250
    1668:	54 e4       	ldi	r21, 0x44	; 68
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	88 87       	std	Y+8, r24	; 0x08
    1674:	99 87       	std	Y+9, r25	; 0x09
    1676:	aa 87       	std	Y+10, r26	; 0x0a
    1678:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    167a:	68 85       	ldd	r22, Y+8	; 0x08
    167c:	79 85       	ldd	r23, Y+9	; 0x09
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	9b 85       	ldd	r25, Y+11	; 0x0b
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <LCD_INIT+0x2c6>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9f 83       	std	Y+7, r25	; 0x07
    1698:	8e 83       	std	Y+6, r24	; 0x06
    169a:	3f c0       	rjmp	.+126    	; 0x171a <LCD_INIT+0x344>
	else if (__tmp > 65535)
    169c:	68 85       	ldd	r22, Y+8	; 0x08
    169e:	79 85       	ldd	r23, Y+9	; 0x09
    16a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <LCD_INIT+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    16b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    16b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9f 83       	std	Y+7, r25	; 0x07
    16da:	8e 83       	std	Y+6, r24	; 0x06
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <LCD_INIT+0x326>
    16de:	88 ec       	ldi	r24, 0xC8	; 200
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9d 83       	std	Y+5, r25	; 0x05
    16e4:	8c 83       	std	Y+4, r24	; 0x04
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <LCD_INIT+0x314>
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8e 81       	ldd	r24, Y+6	; 0x06
    16f4:	9f 81       	ldd	r25, Y+7	; 0x07
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9f 83       	std	Y+7, r25	; 0x07
    16fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8e 81       	ldd	r24, Y+6	; 0x06
    16fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <LCD_INIT+0x308>
    1704:	24 c0       	rjmp	.+72     	; 0x174e <LCD_INIT+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	68 85       	ldd	r22, Y+8	; 0x08
    1708:	79 85       	ldd	r23, Y+9	; 0x09
    170a:	8a 85       	ldd	r24, Y+10	; 0x0a
    170c:	9b 85       	ldd	r25, Y+11	; 0x0b
    170e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	9f 81       	ldd	r25, Y+7	; 0x07
    171e:	9b 83       	std	Y+3, r25	; 0x03
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_INIT+0x350>
    172a:	9b 83       	std	Y+3, r25	; 0x03
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_INIT+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1730:	69 89       	ldd	r22, Y+17	; 0x11
    1732:	7a 89       	ldd	r23, Y+18	; 0x12
    1734:	8b 89       	ldd	r24, Y+19	; 0x13
    1736:	9c 89       	ldd	r25, Y+20	; 0x14
    1738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	88 8b       	std	Y+16, r24	; 0x10
    1742:	88 89       	ldd	r24, Y+16	; 0x10
    1744:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	8a 95       	dec	r24
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_INIT+0x372>
    174c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    174e:	88 e3       	ldi	r24, 0x38	; 56
    1750:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    1754:	86 e0       	ldi	r24, 0x06	; 6
    1756:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    175a:	80 e8       	ldi	r24, 0x80	; 128
    175c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
    1760:	8f e0       	ldi	r24, 0x0F	; 15
    1762:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>

}
    1766:	e4 96       	adiw	r28, 0x34	; 52
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <LCD_check_lcd_isbusy+0x6>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    1782:	ea e3       	ldi	r30, 0x3A	; 58
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	ea e3       	ldi	r30, 0x3A	; 58
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    178e:	a8 e3       	ldi	r26, 0x38	; 56
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8d 7f       	andi	r24, 0xFD	; 253
    17a8:	8c 93       	st	X, r24
	LCD_lcd_kick();
    17aa:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    17ae:	ea e3       	ldi	r30, 0x3A	; 58
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	ea e3       	ldi	r30, 0x3A	; 58
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    17bc:	a8 e3       	ldi	r26, 0x38	; 56
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e8 e3       	ldi	r30, 0x38	; 56
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8b 7f       	andi	r24, 0xFB	; 251
    17c8:	8c 93       	st	X, r24
	
}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	2f 97       	sbiw	r28, 0x0f	; 15
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    17ea:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f4:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
    17f6:	a8 e3       	ldi	r26, 0x38	; 56
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	89 7f       	andi	r24, 0xF9	; 249
    1802:	8c 93       	st	X, r24
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e8       	ldi	r26, 0x80	; 128
    180a:	bf e3       	ldi	r27, 0x3F	; 63
    180c:	8b 87       	std	Y+11, r24	; 0x0b
    180e:	9c 87       	std	Y+12, r25	; 0x0c
    1810:	ad 87       	std	Y+13, r26	; 0x0d
    1812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	6b 85       	ldd	r22, Y+11	; 0x0b
    1816:	7c 85       	ldd	r23, Y+12	; 0x0c
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8f 83       	std	Y+7, r24	; 0x07
    182e:	98 87       	std	Y+8, r25	; 0x08
    1830:	a9 87       	std	Y+9, r26	; 0x09
    1832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    1856:	6f 81       	ldd	r22, Y+7	; 0x07
    1858:	78 85       	ldd	r23, Y+8	; 0x08
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	9a 85       	ldd	r25, Y+10	; 0x0a
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1870:	7c 85       	ldd	r23, Y+12	; 0x0c
    1872:	8d 85       	ldd	r24, Y+13	; 0x0d
    1874:	9e 85       	ldd	r25, Y+14	; 0x0e
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9e 83       	std	Y+6, r25	; 0x06
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <LCD_WRITE_COMMAND+0xe2>
    1898:	88 ec       	ldi	r24, 0xC8	; 200
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_WRITE_COMMAND+0xd0>
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	9e 83       	std	Y+6, r25	; 0x06
    18b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <LCD_WRITE_COMMAND+0xc4>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	6f 81       	ldd	r22, Y+7	; 0x07
    18c2:	78 85       	ldd	r23, Y+8	; 0x08
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9e 83       	std	Y+6, r25	; 0x06
    18d2:	8d 83       	std	Y+5, r24	; 0x05
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_WRITE_COMMAND+0x10c>
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    18e8:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    18ec:	2f 96       	adiw	r28, 0x0f	; 15
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	2f 97       	sbiw	r28, 0x0f	; 15
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    1914:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    1918:	eb e3       	ldi	r30, 0x3B	; 59
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8b 7f       	andi	r24, 0xFB	; 251
    192c:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    192e:	a8 e3       	ldi	r26, 0x38	; 56
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e8 e3       	ldi	r30, 0x38	; 56
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	82 60       	ori	r24, 0x02	; 2
    193a:	8c 93       	st	X, r24
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	a0 e8       	ldi	r26, 0x80	; 128
    1942:	bf e3       	ldi	r27, 0x3F	; 63
    1944:	8b 87       	std	Y+11, r24	; 0x0b
    1946:	9c 87       	std	Y+12, r25	; 0x0c
    1948:	ad 87       	std	Y+13, r26	; 0x0d
    194a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	6b 85       	ldd	r22, Y+11	; 0x0b
    194e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1950:	8d 85       	ldd	r24, Y+13	; 0x0d
    1952:	9e 85       	ldd	r25, Y+14	; 0x0e
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a ef       	ldi	r20, 0xFA	; 250
    195a:	54 e4       	ldi	r21, 0x44	; 68
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	8f 83       	std	Y+7, r24	; 0x07
    1966:	98 87       	std	Y+8, r25	; 0x08
    1968:	a9 87       	std	Y+9, r26	; 0x09
    196a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196c:	6f 81       	ldd	r22, Y+7	; 0x07
    196e:	78 85       	ldd	r23, Y+8	; 0x08
    1970:	89 85       	ldd	r24, Y+9	; 0x09
    1972:	9a 85       	ldd	r25, Y+10	; 0x0a
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	89 85       	ldd	r24, Y+9	; 0x09
    1994:	9a 85       	ldd	r25, Y+10	; 0x0a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_WRITE_CHAR+0xf0>
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	8b 83       	std	Y+3, r24	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_WRITE_CHAR+0xde>
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_WRITE_CHAR+0xd2>
    19f6:	14 c0       	rjmp	.+40     	; 0x1a20 <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	6f 81       	ldd	r22, Y+7	; 0x07
    19fa:	78 85       	ldd	r23, Y+8	; 0x08
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_WRITE_CHAR+0x11a>
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    1a20:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    1a24:	2f 96       	adiw	r28, 0x0f	; 15
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <LCD_WRITE_STRING+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <LCD_WRITE_STRING+0x8>
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    1a46:	1a 82       	std	Y+2, r1	; 0x02
    1a48:	19 82       	std	Y+1, r1	; 0x01
    1a4a:	27 c0       	rjmp	.+78     	; 0x1a9a <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    1a56:	eb 81       	ldd	r30, Y+3	; 0x03
    1a58:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5a:	20 81       	ld	r18, Z
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	82 2f       	mov	r24, r18
    1a68:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
		if (count == 16)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	80 31       	cpi	r24, 0x10	; 16
    1a72:	91 05       	cpc	r25, r1
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_GOTO_XY>
    1a7e:	0d c0       	rjmp	.+26     	; 0x1a9a <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	80 32       	cpi	r24, 0x20	; 32
    1a86:	91 05       	cpc	r25, r1
    1a88:	41 f4       	brne	.+16     	; 0x1a9a <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    1a8a:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_GOTO_XY>
			count = 0;
    1a96:	1a 82       	std	Y+2, r1	; 0x02
    1a98:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    1a9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 23       	and	r24, r24
    1aa2:	a1 f6       	brne	.-88     	; 0x1a4c <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <LCD_custom_character>:


void LCD_custom_character(){
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	aa 97       	sbiw	r28, 0x2a	; 42
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITE_COMMAND(64);
    1ac6:	80 e4       	ldi	r24, 0x40	; 64
    1ac8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(14);
    1ad2:	8e e0       	ldi	r24, 0x0E	; 14
    1ad4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1ad8:	81 e1       	ldi	r24, 0x11	; 17
    1ada:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(2);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1af6:	84 e0       	ldi	r24, 0x04	; 4
    1af8:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1afc:	80 e8       	ldi	r24, 0x80	; 128
    1afe:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e2       	ldi	r26, 0x20	; 32
    1b0e:	b1 e4       	ldi	r27, 0x41	; 65
    1b10:	8f a3       	std	Y+39, r24	; 0x27
    1b12:	98 a7       	std	Y+40, r25	; 0x28
    1b14:	a9 a7       	std	Y+41, r26	; 0x29
    1b16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6f a1       	ldd	r22, Y+39	; 0x27
    1b1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8b a3       	std	Y+35, r24	; 0x23
    1b32:	9c a3       	std	Y+36, r25	; 0x24
    1b34:	ad a3       	std	Y+37, r26	; 0x25
    1b36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b38:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_custom_character+0xa8>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9a a3       	std	Y+34, r25	; 0x22
    1b56:	89 a3       	std	Y+33, r24	; 0x21
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_custom_character+0x126>
	else if (__tmp > 65535)
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_custom_character+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6f a1       	ldd	r22, Y+39	; 0x27
    1b74:	78 a5       	ldd	r23, Y+40	; 0x28
    1b76:	89 a5       	ldd	r24, Y+41	; 0x29
    1b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9a a3       	std	Y+34, r25	; 0x22
    1b98:	89 a3       	std	Y+33, r24	; 0x21
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_custom_character+0x108>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	98 a3       	std	Y+32, r25	; 0x20
    1ba2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_custom_character+0xf6>
    1bac:	98 a3       	std	Y+32, r25	; 0x20
    1bae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9a a3       	std	Y+34, r25	; 0x22
    1bb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_custom_character+0xea>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_custom_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bca:	9e a1       	ldd	r25, Y+38	; 0x26
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9a a3       	std	Y+34, r25	; 0x22
    1bd6:	89 a3       	std	Y+33, r24	; 0x21
    1bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bda:	9a a1       	ldd	r25, Y+34	; 0x22
    1bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
    1be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_custom_character+0x132>
    1be8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


	LCD_WRITE_COMMAND(72);
    1bec:	88 e4       	ldi	r24, 0x48	; 72
    1bee:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(10);
    1bf8:	8a e0       	ldi	r24, 0x0A	; 10
    1bfa:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(21);
    1bfe:	85 e1       	ldi	r24, 0x15	; 21
    1c00:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    1c04:	81 e1       	ldi	r24, 0x11	; 17
    1c06:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(18);
    1c0a:	82 e1       	ldi	r24, 0x12	; 18
    1c0c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,3);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	63 e0       	ldi	r22, 0x03	; 3
    1c26:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(1);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	a0 e2       	ldi	r26, 0x20	; 32
    1c36:	b1 e4       	ldi	r27, 0x41	; 65
    1c38:	89 8f       	std	Y+25, r24	; 0x19
    1c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a ef       	ldi	r20, 0xFA	; 250
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8d 8b       	std	Y+21, r24	; 0x15
    1c5a:	9e 8b       	std	Y+22, r25	; 0x16
    1c5c:	af 8b       	std	Y+23, r26	; 0x17
    1c5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <LCD_custom_character+0x1d0>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 8b       	std	Y+20, r25	; 0x14
    1c7e:	8b 8b       	std	Y+19, r24	; 0x13
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <LCD_custom_character+0x24e>
	else if (__tmp > 65535)
    1c82:	6d 89       	ldd	r22, Y+21	; 0x15
    1c84:	7e 89       	ldd	r23, Y+22	; 0x16
    1c86:	8f 89       	ldd	r24, Y+23	; 0x17
    1c88:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <LCD_custom_character+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <LCD_custom_character+0x230>
    1cc4:	88 ec       	ldi	r24, 0xC8	; 200
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a 8b       	std	Y+18, r25	; 0x12
    1cca:	89 8b       	std	Y+17, r24	; 0x11
    1ccc:	89 89       	ldd	r24, Y+17	; 0x11
    1cce:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_custom_character+0x21e>
    1cd4:	9a 8b       	std	Y+18, r25	; 0x12
    1cd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <LCD_custom_character+0x212>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <LCD_custom_character+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6d 89       	ldd	r22, Y+21	; 0x15
    1cee:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9c 8b       	std	Y+20, r25	; 0x14
    1cfe:	8b 8b       	std	Y+19, r24	; 0x13
    1d00:	8b 89       	ldd	r24, Y+19	; 0x13
    1d02:	9c 89       	ldd	r25, Y+20	; 0x14
    1d04:	98 8b       	std	Y+16, r25	; 0x10
    1d06:	8f 87       	std	Y+15, r24	; 0x0f
    1d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0a:	98 89       	ldd	r25, Y+16	; 0x10
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_custom_character+0x25a>
    1d10:	98 8b       	std	Y+16, r25	; 0x10
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_WRITE_COMMAND(80);
    1d14:	80 e5       	ldi	r24, 0x50	; 80
    1d16:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(20);
    1d20:	84 e1       	ldi	r24, 0x14	; 20
    1d22:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(11);
    1d26:	8b e0       	ldi	r24, 0x0B	; 11
    1d28:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(27);
    1d2c:	8b e1       	ldi	r24, 0x1B	; 27
    1d2e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(28);
    1d32:	8c e1       	ldi	r24, 0x1C	; 28
    1d34:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(40);
    1d38:	88 e2       	ldi	r24, 0x28	; 40
    1d3a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,5);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	65 e0       	ldi	r22, 0x05	; 5
    1d4e:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(2);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_WRITE_CHAR>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e2       	ldi	r26, 0x20	; 32
    1d5e:	b1 e4       	ldi	r27, 0x41	; 65
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	9c 87       	std	Y+12, r25	; 0x0c
    1d64:	ad 87       	std	Y+13, r26	; 0x0d
    1d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4a ef       	ldi	r20, 0xFA	; 250
    1d76:	54 e4       	ldi	r21, 0x44	; 68
    1d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8f 83       	std	Y+7, r24	; 0x07
    1d82:	98 87       	std	Y+8, r25	; 0x08
    1d84:	a9 87       	std	Y+9, r26	; 0x09
    1d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <LCD_custom_character+0x2f8>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <LCD_custom_character+0x376>
	else if (__tmp > 65535)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <LCD_custom_character+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <LCD_custom_character+0x358>
    1dec:	88 ec       	ldi	r24, 0xC8	; 200
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_custom_character+0x346>
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <LCD_custom_character+0x33a>
    1e12:	14 c0       	rjmp	.+40     	; 0x1e3c <LCD_custom_character+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_custom_character+0x382>
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    1e3c:	aa 96       	adiw	r28, 0x2a	; 42
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <main>:
#include "STD_TYPES.h"

#define F_CPU 8000000UL

int main()
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	6e 97       	sbiw	r28, 0x1e	; 30
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
   LCD_INIT();
    1e62:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <LCD_INIT>
 //  _delay_ms(30);
   UART_Init();
    1e66:	0e 94 47 06 	call	0xc8e	; 0xc8e <UART_Init>
   Keypad_init();
    1e6a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <Keypad_init>

   LCD_WRITE_STRING("UART Section");
    1e6e:	80 e6       	ldi	r24, 0x60	; 96
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_WRITE_STRING>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a0 e2       	ldi	r26, 0x20	; 32
    1e7c:	b1 e4       	ldi	r27, 0x41	; 65
    1e7e:	8b 87       	std	Y+11, r24	; 0x0b
    1e80:	9c 87       	std	Y+12, r25	; 0x0c
    1e82:	ad 87       	std	Y+13, r26	; 0x0d
    1e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a ef       	ldi	r20, 0xFA	; 250
    1e94:	54 e4       	ldi	r21, 0x44	; 68
    1e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8f 83       	std	Y+7, r24	; 0x07
    1ea0:	98 87       	std	Y+8, r25	; 0x08
    1ea2:	a9 87       	std	Y+9, r26	; 0x09
    1ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <main+0x7a>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
    1ec6:	3f c0       	rjmp	.+126    	; 0x1f46 <main+0xf8>
	else if (__tmp > 65535)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	3f ef       	ldi	r19, 0xFF	; 255
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	4c f5       	brge	.+82     	; 0x1f32 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e2       	ldi	r20, 0x20	; 32
    1eee:	51 e4       	ldi	r21, 0x41	; 65
    1ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	bc 01       	movw	r22, r24
    1efa:	cd 01       	movw	r24, r26
    1efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <main+0xda>
    1f0a:	88 ec       	ldi	r24, 0xC8	; 200
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	9c 81       	ldd	r25, Y+4	; 0x04
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <main+0xc8>
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f20:	9e 81       	ldd	r25, Y+6	; 0x06
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <main+0xbc>
    1f30:	14 c0       	rjmp	.+40     	; 0x1f5a <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <main+0x104>
    1f56:	9a 83       	std	Y+2, r25	; 0x02
    1f58:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(10);
  UART_Init();
    1f5a:	0e 94 47 06 	call	0xc8e	; 0xc8e <UART_Init>


 // unsigned char X;
	while (1){

     UART_ReceiveString(arr, 16);
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0f 96       	adiw	r24, 0x0f	; 15
    1f62:	60 e1       	ldi	r22, 0x10	; 16
    1f64:	0e 94 b9 07 	call	0xf72	; 0xf72 <UART_ReceiveString>
        LCD_GOTO_XY(2,0);
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	0e 94 cb 09 	call	0x1396	; 0x1396 <LCD_GOTO_XY>
      LCD_WRITE_STRING((char *)arr);
    1f70:	ce 01       	movw	r24, r28
    1f72:	0f 96       	adiw	r24, 0x0f	; 15
    1f74:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_WRITE_STRING>
    1f78:	f2 cf       	rjmp	.-28     	; 0x1f5e <main+0x110>

00001f7a <__prologue_saves__>:
    1f7a:	2f 92       	push	r2
    1f7c:	3f 92       	push	r3
    1f7e:	4f 92       	push	r4
    1f80:	5f 92       	push	r5
    1f82:	6f 92       	push	r6
    1f84:	7f 92       	push	r7
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	ca 1b       	sub	r28, r26
    1fa4:	db 0b       	sbc	r29, r27
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	09 94       	ijmp

00001fb2 <__epilogue_restores__>:
    1fb2:	2a 88       	ldd	r2, Y+18	; 0x12
    1fb4:	39 88       	ldd	r3, Y+17	; 0x11
    1fb6:	48 88       	ldd	r4, Y+16	; 0x10
    1fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fba:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fc4:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc6:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc8:	df 80       	ldd	r13, Y+7	; 0x07
    1fca:	ee 80       	ldd	r14, Y+6	; 0x06
    1fcc:	fd 80       	ldd	r15, Y+5	; 0x05
    1fce:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd0:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fd4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd6:	ce 0f       	add	r28, r30
    1fd8:	d1 1d       	adc	r29, r1
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	ed 01       	movw	r28, r26
    1fe6:	08 95       	ret

00001fe8 <_exit>:
    1fe8:	f8 94       	cli

00001fea <__stop_program>:
    1fea:	ff cf       	rjmp	.-2      	; 0x1fea <__stop_program>
