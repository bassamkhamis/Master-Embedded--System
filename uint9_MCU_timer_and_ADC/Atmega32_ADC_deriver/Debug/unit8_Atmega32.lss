
unit8_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00003368  000033fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800082  00800082  0000341e  2**0
                  ALLOC
  3 .stab         00003b4c  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ee1  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  00008fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000023ca  00000000  00000000  000091bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012df  00000000  00000000  0000b585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001108  00000000  00000000  0000c864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000032e  00000000  00000000  0000db2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a52  00000000  00000000  0000de5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_10>
      2c:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_11>
      30:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_12>
      34:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <main>
      8a:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 6f 05 	call	0xade	; 0xade <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 3b 03 	call	0x676	; 0x676 <__subsf3>
     3b2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <_fpadd_parts>:
     3de:	a0 e0       	ldi	r26, 0x00	; 0
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
     3ea:	dc 01       	movw	r26, r24
     3ec:	2b 01       	movw	r4, r22
     3ee:	fa 01       	movw	r30, r20
     3f0:	9c 91       	ld	r25, X
     3f2:	92 30       	cpi	r25, 0x02	; 2
     3f4:	08 f4       	brcc	.+2      	; 0x3f8 <_fpadd_parts+0x1a>
     3f6:	39 c1       	rjmp	.+626    	; 0x66a <_fpadd_parts+0x28c>
     3f8:	eb 01       	movw	r28, r22
     3fa:	88 81       	ld	r24, Y
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	08 f4       	brcc	.+2      	; 0x402 <_fpadd_parts+0x24>
     400:	33 c1       	rjmp	.+614    	; 0x668 <_fpadd_parts+0x28a>
     402:	94 30       	cpi	r25, 0x04	; 4
     404:	69 f4       	brne	.+26     	; 0x420 <_fpadd_parts+0x42>
     406:	84 30       	cpi	r24, 0x04	; 4
     408:	09 f0       	breq	.+2      	; 0x40c <_fpadd_parts+0x2e>
     40a:	2f c1       	rjmp	.+606    	; 0x66a <_fpadd_parts+0x28c>
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	98 17       	cp	r25, r24
     416:	09 f4       	brne	.+2      	; 0x41a <_fpadd_parts+0x3c>
     418:	28 c1       	rjmp	.+592    	; 0x66a <_fpadd_parts+0x28c>
     41a:	a1 e7       	ldi	r26, 0x71	; 113
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	25 c1       	rjmp	.+586    	; 0x66a <_fpadd_parts+0x28c>
     420:	84 30       	cpi	r24, 0x04	; 4
     422:	09 f4       	brne	.+2      	; 0x426 <_fpadd_parts+0x48>
     424:	21 c1       	rjmp	.+578    	; 0x668 <_fpadd_parts+0x28a>
     426:	82 30       	cpi	r24, 0x02	; 2
     428:	a9 f4       	brne	.+42     	; 0x454 <_fpadd_parts+0x76>
     42a:	92 30       	cpi	r25, 0x02	; 2
     42c:	09 f0       	breq	.+2      	; 0x430 <_fpadd_parts+0x52>
     42e:	1d c1       	rjmp	.+570    	; 0x66a <_fpadd_parts+0x28c>
     430:	9a 01       	movw	r18, r20
     432:	ad 01       	movw	r20, r26
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	ea 01       	movw	r28, r20
     438:	09 90       	ld	r0, Y+
     43a:	ae 01       	movw	r20, r28
     43c:	e9 01       	movw	r28, r18
     43e:	09 92       	st	Y+, r0
     440:	9e 01       	movw	r18, r28
     442:	81 50       	subi	r24, 0x01	; 1
     444:	c1 f7       	brne	.-16     	; 0x436 <_fpadd_parts+0x58>
     446:	e2 01       	movw	r28, r4
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	11 96       	adiw	r26, 0x01	; 1
     44c:	9c 91       	ld	r25, X
     44e:	89 23       	and	r24, r25
     450:	81 83       	std	Z+1, r24	; 0x01
     452:	08 c1       	rjmp	.+528    	; 0x664 <_fpadd_parts+0x286>
     454:	92 30       	cpi	r25, 0x02	; 2
     456:	09 f4       	brne	.+2      	; 0x45a <_fpadd_parts+0x7c>
     458:	07 c1       	rjmp	.+526    	; 0x668 <_fpadd_parts+0x28a>
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	2d 90       	ld	r2, X+
     45e:	3c 90       	ld	r3, X
     460:	13 97       	sbiw	r26, 0x03	; 3
     462:	eb 01       	movw	r28, r22
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	9b 81       	ldd	r25, Y+3	; 0x03
     468:	14 96       	adiw	r26, 0x04	; 4
     46a:	ad 90       	ld	r10, X+
     46c:	bd 90       	ld	r11, X+
     46e:	cd 90       	ld	r12, X+
     470:	dc 90       	ld	r13, X
     472:	17 97       	sbiw	r26, 0x07	; 7
     474:	ec 80       	ldd	r14, Y+4	; 0x04
     476:	fd 80       	ldd	r15, Y+5	; 0x05
     478:	0e 81       	ldd	r16, Y+6	; 0x06
     47a:	1f 81       	ldd	r17, Y+7	; 0x07
     47c:	91 01       	movw	r18, r2
     47e:	28 1b       	sub	r18, r24
     480:	39 0b       	sbc	r19, r25
     482:	b9 01       	movw	r22, r18
     484:	37 ff       	sbrs	r19, 7
     486:	04 c0       	rjmp	.+8      	; 0x490 <_fpadd_parts+0xb2>
     488:	66 27       	eor	r22, r22
     48a:	77 27       	eor	r23, r23
     48c:	62 1b       	sub	r22, r18
     48e:	73 0b       	sbc	r23, r19
     490:	60 32       	cpi	r22, 0x20	; 32
     492:	71 05       	cpc	r23, r1
     494:	0c f0       	brlt	.+2      	; 0x498 <_fpadd_parts+0xba>
     496:	61 c0       	rjmp	.+194    	; 0x55a <_fpadd_parts+0x17c>
     498:	12 16       	cp	r1, r18
     49a:	13 06       	cpc	r1, r19
     49c:	6c f5       	brge	.+90     	; 0x4f8 <_fpadd_parts+0x11a>
     49e:	37 01       	movw	r6, r14
     4a0:	48 01       	movw	r8, r16
     4a2:	06 2e       	mov	r0, r22
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <_fpadd_parts+0xd0>
     4a6:	96 94       	lsr	r9
     4a8:	87 94       	ror	r8
     4aa:	77 94       	ror	r7
     4ac:	67 94       	ror	r6
     4ae:	0a 94       	dec	r0
     4b0:	d2 f7       	brpl	.-12     	; 0x4a6 <_fpadd_parts+0xc8>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <_fpadd_parts+0xe6>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	44 1f       	adc	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	6a 95       	dec	r22
     4c6:	d2 f7       	brpl	.-12     	; 0x4bc <_fpadd_parts+0xde>
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	30 40       	sbci	r19, 0x00	; 0
     4cc:	40 40       	sbci	r20, 0x00	; 0
     4ce:	50 40       	sbci	r21, 0x00	; 0
     4d0:	2e 21       	and	r18, r14
     4d2:	3f 21       	and	r19, r15
     4d4:	40 23       	and	r20, r16
     4d6:	51 23       	and	r21, r17
     4d8:	21 15       	cp	r18, r1
     4da:	31 05       	cpc	r19, r1
     4dc:	41 05       	cpc	r20, r1
     4de:	51 05       	cpc	r21, r1
     4e0:	21 f0       	breq	.+8      	; 0x4ea <_fpadd_parts+0x10c>
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	79 01       	movw	r14, r18
     4ec:	8a 01       	movw	r16, r20
     4ee:	e6 28       	or	r14, r6
     4f0:	f7 28       	or	r15, r7
     4f2:	08 29       	or	r16, r8
     4f4:	19 29       	or	r17, r9
     4f6:	3c c0       	rjmp	.+120    	; 0x570 <_fpadd_parts+0x192>
     4f8:	23 2b       	or	r18, r19
     4fa:	d1 f1       	breq	.+116    	; 0x570 <_fpadd_parts+0x192>
     4fc:	26 0e       	add	r2, r22
     4fe:	37 1e       	adc	r3, r23
     500:	35 01       	movw	r6, r10
     502:	46 01       	movw	r8, r12
     504:	06 2e       	mov	r0, r22
     506:	04 c0       	rjmp	.+8      	; 0x510 <_fpadd_parts+0x132>
     508:	96 94       	lsr	r9
     50a:	87 94       	ror	r8
     50c:	77 94       	ror	r7
     50e:	67 94       	ror	r6
     510:	0a 94       	dec	r0
     512:	d2 f7       	brpl	.-12     	; 0x508 <_fpadd_parts+0x12a>
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	04 c0       	rjmp	.+8      	; 0x526 <_fpadd_parts+0x148>
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	44 1f       	adc	r20, r20
     524:	55 1f       	adc	r21, r21
     526:	6a 95       	dec	r22
     528:	d2 f7       	brpl	.-12     	; 0x51e <_fpadd_parts+0x140>
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	30 40       	sbci	r19, 0x00	; 0
     52e:	40 40       	sbci	r20, 0x00	; 0
     530:	50 40       	sbci	r21, 0x00	; 0
     532:	2a 21       	and	r18, r10
     534:	3b 21       	and	r19, r11
     536:	4c 21       	and	r20, r12
     538:	5d 21       	and	r21, r13
     53a:	21 15       	cp	r18, r1
     53c:	31 05       	cpc	r19, r1
     53e:	41 05       	cpc	r20, r1
     540:	51 05       	cpc	r21, r1
     542:	21 f0       	breq	.+8      	; 0x54c <_fpadd_parts+0x16e>
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	59 01       	movw	r10, r18
     54e:	6a 01       	movw	r12, r20
     550:	a6 28       	or	r10, r6
     552:	b7 28       	or	r11, r7
     554:	c8 28       	or	r12, r8
     556:	d9 28       	or	r13, r9
     558:	0b c0       	rjmp	.+22     	; 0x570 <_fpadd_parts+0x192>
     55a:	82 15       	cp	r24, r2
     55c:	93 05       	cpc	r25, r3
     55e:	2c f0       	brlt	.+10     	; 0x56a <_fpadd_parts+0x18c>
     560:	1c 01       	movw	r2, r24
     562:	aa 24       	eor	r10, r10
     564:	bb 24       	eor	r11, r11
     566:	65 01       	movw	r12, r10
     568:	03 c0       	rjmp	.+6      	; 0x570 <_fpadd_parts+0x192>
     56a:	ee 24       	eor	r14, r14
     56c:	ff 24       	eor	r15, r15
     56e:	87 01       	movw	r16, r14
     570:	11 96       	adiw	r26, 0x01	; 1
     572:	9c 91       	ld	r25, X
     574:	d2 01       	movw	r26, r4
     576:	11 96       	adiw	r26, 0x01	; 1
     578:	8c 91       	ld	r24, X
     57a:	98 17       	cp	r25, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <_fpadd_parts+0x1a2>
     57e:	45 c0       	rjmp	.+138    	; 0x60a <_fpadd_parts+0x22c>
     580:	99 23       	and	r25, r25
     582:	39 f0       	breq	.+14     	; 0x592 <_fpadd_parts+0x1b4>
     584:	a8 01       	movw	r20, r16
     586:	97 01       	movw	r18, r14
     588:	2a 19       	sub	r18, r10
     58a:	3b 09       	sbc	r19, r11
     58c:	4c 09       	sbc	r20, r12
     58e:	5d 09       	sbc	r21, r13
     590:	06 c0       	rjmp	.+12     	; 0x59e <_fpadd_parts+0x1c0>
     592:	a6 01       	movw	r20, r12
     594:	95 01       	movw	r18, r10
     596:	2e 19       	sub	r18, r14
     598:	3f 09       	sbc	r19, r15
     59a:	40 0b       	sbc	r20, r16
     59c:	51 0b       	sbc	r21, r17
     59e:	57 fd       	sbrc	r21, 7
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <_fpadd_parts+0x1d4>
     5a2:	11 82       	std	Z+1, r1	; 0x01
     5a4:	33 82       	std	Z+3, r3	; 0x03
     5a6:	22 82       	std	Z+2, r2	; 0x02
     5a8:	24 83       	std	Z+4, r18	; 0x04
     5aa:	35 83       	std	Z+5, r19	; 0x05
     5ac:	46 83       	std	Z+6, r20	; 0x06
     5ae:	57 83       	std	Z+7, r21	; 0x07
     5b0:	1d c0       	rjmp	.+58     	; 0x5ec <_fpadd_parts+0x20e>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	81 83       	std	Z+1, r24	; 0x01
     5b6:	33 82       	std	Z+3, r3	; 0x03
     5b8:	22 82       	std	Z+2, r2	; 0x02
     5ba:	88 27       	eor	r24, r24
     5bc:	99 27       	eor	r25, r25
     5be:	dc 01       	movw	r26, r24
     5c0:	82 1b       	sub	r24, r18
     5c2:	93 0b       	sbc	r25, r19
     5c4:	a4 0b       	sbc	r26, r20
     5c6:	b5 0b       	sbc	r27, r21
     5c8:	84 83       	std	Z+4, r24	; 0x04
     5ca:	95 83       	std	Z+5, r25	; 0x05
     5cc:	a6 83       	std	Z+6, r26	; 0x06
     5ce:	b7 83       	std	Z+7, r27	; 0x07
     5d0:	0d c0       	rjmp	.+26     	; 0x5ec <_fpadd_parts+0x20e>
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	44 1f       	adc	r20, r20
     5d8:	55 1f       	adc	r21, r21
     5da:	24 83       	std	Z+4, r18	; 0x04
     5dc:	35 83       	std	Z+5, r19	; 0x05
     5de:	46 83       	std	Z+6, r20	; 0x06
     5e0:	57 83       	std	Z+7, r21	; 0x07
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	93 83       	std	Z+3, r25	; 0x03
     5ea:	82 83       	std	Z+2, r24	; 0x02
     5ec:	24 81       	ldd	r18, Z+4	; 0x04
     5ee:	35 81       	ldd	r19, Z+5	; 0x05
     5f0:	46 81       	ldd	r20, Z+6	; 0x06
     5f2:	57 81       	ldd	r21, Z+7	; 0x07
     5f4:	da 01       	movw	r26, r20
     5f6:	c9 01       	movw	r24, r18
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 09       	sbc	r26, r1
     5fc:	b1 09       	sbc	r27, r1
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	af 4f       	sbci	r26, 0xFF	; 255
     604:	bf 43       	sbci	r27, 0x3F	; 63
     606:	28 f3       	brcs	.-54     	; 0x5d2 <_fpadd_parts+0x1f4>
     608:	0b c0       	rjmp	.+22     	; 0x620 <_fpadd_parts+0x242>
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	33 82       	std	Z+3, r3	; 0x03
     60e:	22 82       	std	Z+2, r2	; 0x02
     610:	ea 0c       	add	r14, r10
     612:	fb 1c       	adc	r15, r11
     614:	0c 1d       	adc	r16, r12
     616:	1d 1d       	adc	r17, r13
     618:	e4 82       	std	Z+4, r14	; 0x04
     61a:	f5 82       	std	Z+5, r15	; 0x05
     61c:	06 83       	std	Z+6, r16	; 0x06
     61e:	17 83       	std	Z+7, r17	; 0x07
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 83       	st	Z, r24
     624:	24 81       	ldd	r18, Z+4	; 0x04
     626:	35 81       	ldd	r19, Z+5	; 0x05
     628:	46 81       	ldd	r20, Z+6	; 0x06
     62a:	57 81       	ldd	r21, Z+7	; 0x07
     62c:	57 ff       	sbrs	r21, 7
     62e:	1a c0       	rjmp	.+52     	; 0x664 <_fpadd_parts+0x286>
     630:	c9 01       	movw	r24, r18
     632:	aa 27       	eor	r26, r26
     634:	97 fd       	sbrc	r25, 7
     636:	a0 95       	com	r26
     638:	ba 2f       	mov	r27, r26
     63a:	81 70       	andi	r24, 0x01	; 1
     63c:	90 70       	andi	r25, 0x00	; 0
     63e:	a0 70       	andi	r26, 0x00	; 0
     640:	b0 70       	andi	r27, 0x00	; 0
     642:	56 95       	lsr	r21
     644:	47 95       	ror	r20
     646:	37 95       	ror	r19
     648:	27 95       	ror	r18
     64a:	82 2b       	or	r24, r18
     64c:	93 2b       	or	r25, r19
     64e:	a4 2b       	or	r26, r20
     650:	b5 2b       	or	r27, r21
     652:	84 83       	std	Z+4, r24	; 0x04
     654:	95 83       	std	Z+5, r25	; 0x05
     656:	a6 83       	std	Z+6, r26	; 0x06
     658:	b7 83       	std	Z+7, r27	; 0x07
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	93 83       	std	Z+3, r25	; 0x03
     662:	82 83       	std	Z+2, r24	; 0x02
     664:	df 01       	movw	r26, r30
     666:	01 c0       	rjmp	.+2      	; 0x66a <_fpadd_parts+0x28c>
     668:	d2 01       	movw	r26, r4
     66a:	cd 01       	movw	r24, r26
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	e2 e1       	ldi	r30, 0x12	; 18
     672:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000676 <__subsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	e9 e0       	ldi	r30, 0x09	; 9
     694:	ee 2e       	mov	r14, r30
     696:	f1 2c       	mov	r15, r1
     698:	ec 0e       	add	r14, r28
     69a:	fd 1e       	adc	r15, r29
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	b7 01       	movw	r22, r14
     6a2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5e       	subi	r16, 0xEF	; 239
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	ce 01       	movw	r24, r28
     6ae:	05 96       	adiw	r24, 0x05	; 5
     6b0:	b8 01       	movw	r22, r16
     6b2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     6b6:	8a 89       	ldd	r24, Y+18	; 0x12
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	89 27       	eor	r24, r25
     6bc:	8a 8b       	std	Y+18, r24	; 0x12
     6be:	c7 01       	movw	r24, r14
     6c0:	b8 01       	movw	r22, r16
     6c2:	ae 01       	movw	r20, r28
     6c4:	47 5e       	subi	r20, 0xE7	; 231
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	0e 94 ef 01 	call	0x3de	; 0x3de <_fpadd_parts>
     6cc:	0e 94 23 06 	call	0xc46	; 0xc46 <__pack_f>
     6d0:	a0 96       	adiw	r28, 0x20	; 32
     6d2:	e6 e0       	ldi	r30, 0x06	; 6
     6d4:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

000006d8 <__addsf3>:
     6d8:	a0 e2       	ldi	r26, 0x20	; 32
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e2 e7       	ldi	r30, 0x72	; 114
     6de:	f3 e0       	ldi	r31, 0x03	; 3
     6e0:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     6e4:	69 83       	std	Y+1, r22	; 0x01
     6e6:	7a 83       	std	Y+2, r23	; 0x02
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	2d 83       	std	Y+5, r18	; 0x05
     6ee:	3e 83       	std	Y+6, r19	; 0x06
     6f0:	4f 83       	std	Y+7, r20	; 0x07
     6f2:	58 87       	std	Y+8, r21	; 0x08
     6f4:	f9 e0       	ldi	r31, 0x09	; 9
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f1 2c       	mov	r15, r1
     6fa:	ec 0e       	add	r14, r28
     6fc:	fd 1e       	adc	r15, r29
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	b7 01       	movw	r22, r14
     704:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     708:	8e 01       	movw	r16, r28
     70a:	0f 5e       	subi	r16, 0xEF	; 239
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	ce 01       	movw	r24, r28
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	b8 01       	movw	r22, r16
     714:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     718:	c7 01       	movw	r24, r14
     71a:	b8 01       	movw	r22, r16
     71c:	ae 01       	movw	r20, r28
     71e:	47 5e       	subi	r20, 0xE7	; 231
     720:	5f 4f       	sbci	r21, 0xFF	; 255
     722:	0e 94 ef 01 	call	0x3de	; 0x3de <_fpadd_parts>
     726:	0e 94 23 06 	call	0xc46	; 0xc46 <__pack_f>
     72a:	a0 96       	adiw	r28, 0x20	; 32
     72c:	e6 e0       	ldi	r30, 0x06	; 6
     72e:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

00000732 <__mulsf3>:
     732:	a0 e2       	ldi	r26, 0x20	; 32
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	ef e9       	ldi	r30, 0x9F	; 159
     738:	f3 e0       	ldi	r31, 0x03	; 3
     73a:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__>
     73e:	69 83       	std	Y+1, r22	; 0x01
     740:	7a 83       	std	Y+2, r23	; 0x02
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	9c 83       	std	Y+4, r25	; 0x04
     746:	2d 83       	std	Y+5, r18	; 0x05
     748:	3e 83       	std	Y+6, r19	; 0x06
     74a:	4f 83       	std	Y+7, r20	; 0x07
     74c:	58 87       	std	Y+8, r21	; 0x08
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	be 01       	movw	r22, r28
     754:	67 5f       	subi	r22, 0xF7	; 247
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     75c:	ce 01       	movw	r24, r28
     75e:	05 96       	adiw	r24, 0x05	; 5
     760:	be 01       	movw	r22, r28
     762:	6f 5e       	subi	r22, 0xEF	; 239
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     76a:	99 85       	ldd	r25, Y+9	; 0x09
     76c:	92 30       	cpi	r25, 0x02	; 2
     76e:	88 f0       	brcs	.+34     	; 0x792 <__mulsf3+0x60>
     770:	89 89       	ldd	r24, Y+17	; 0x11
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	c8 f0       	brcs	.+50     	; 0x7a8 <__mulsf3+0x76>
     776:	94 30       	cpi	r25, 0x04	; 4
     778:	19 f4       	brne	.+6      	; 0x780 <__mulsf3+0x4e>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	51 f4       	brne	.+20     	; 0x792 <__mulsf3+0x60>
     77e:	04 c0       	rjmp	.+8      	; 0x788 <__mulsf3+0x56>
     780:	84 30       	cpi	r24, 0x04	; 4
     782:	29 f4       	brne	.+10     	; 0x78e <__mulsf3+0x5c>
     784:	92 30       	cpi	r25, 0x02	; 2
     786:	81 f4       	brne	.+32     	; 0x7a8 <__mulsf3+0x76>
     788:	81 e7       	ldi	r24, 0x71	; 113
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	c6 c0       	rjmp	.+396    	; 0x91a <__stack+0xbb>
     78e:	92 30       	cpi	r25, 0x02	; 2
     790:	49 f4       	brne	.+18     	; 0x7a4 <__mulsf3+0x72>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	9a 85       	ldd	r25, Y+10	; 0x0a
     796:	8a 89       	ldd	r24, Y+18	; 0x12
     798:	98 13       	cpse	r25, r24
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	2a 87       	std	Y+10, r18	; 0x0a
     79e:	ce 01       	movw	r24, r28
     7a0:	09 96       	adiw	r24, 0x09	; 9
     7a2:	bb c0       	rjmp	.+374    	; 0x91a <__stack+0xbb>
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	49 f4       	brne	.+18     	; 0x7ba <__mulsf3+0x88>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ac:	8a 89       	ldd	r24, Y+18	; 0x12
     7ae:	98 13       	cpse	r25, r24
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	2a 8b       	std	Y+18, r18	; 0x12
     7b4:	ce 01       	movw	r24, r28
     7b6:	41 96       	adiw	r24, 0x11	; 17
     7b8:	b0 c0       	rjmp	.+352    	; 0x91a <__stack+0xbb>
     7ba:	2d 84       	ldd	r2, Y+13	; 0x0d
     7bc:	3e 84       	ldd	r3, Y+14	; 0x0e
     7be:	4f 84       	ldd	r4, Y+15	; 0x0f
     7c0:	58 88       	ldd	r5, Y+16	; 0x10
     7c2:	6d 88       	ldd	r6, Y+21	; 0x15
     7c4:	7e 88       	ldd	r7, Y+22	; 0x16
     7c6:	8f 88       	ldd	r8, Y+23	; 0x17
     7c8:	98 8c       	ldd	r9, Y+24	; 0x18
     7ca:	ee 24       	eor	r14, r14
     7cc:	ff 24       	eor	r15, r15
     7ce:	87 01       	movw	r16, r14
     7d0:	aa 24       	eor	r10, r10
     7d2:	bb 24       	eor	r11, r11
     7d4:	65 01       	movw	r12, r10
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	e0 e0       	ldi	r30, 0x00	; 0
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	c1 01       	movw	r24, r2
     7e4:	81 70       	andi	r24, 0x01	; 1
     7e6:	90 70       	andi	r25, 0x00	; 0
     7e8:	89 2b       	or	r24, r25
     7ea:	e9 f0       	breq	.+58     	; 0x826 <__mulsf3+0xf4>
     7ec:	e6 0c       	add	r14, r6
     7ee:	f7 1c       	adc	r15, r7
     7f0:	08 1d       	adc	r16, r8
     7f2:	19 1d       	adc	r17, r9
     7f4:	9a 01       	movw	r18, r20
     7f6:	ab 01       	movw	r20, r22
     7f8:	2a 0d       	add	r18, r10
     7fa:	3b 1d       	adc	r19, r11
     7fc:	4c 1d       	adc	r20, r12
     7fe:	5d 1d       	adc	r21, r13
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	e6 14       	cp	r14, r6
     80a:	f7 04       	cpc	r15, r7
     80c:	08 05       	cpc	r16, r8
     80e:	19 05       	cpc	r17, r9
     810:	20 f4       	brcc	.+8      	; 0x81a <__mulsf3+0xe8>
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	a0 e0       	ldi	r26, 0x00	; 0
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	ba 01       	movw	r22, r20
     81c:	a9 01       	movw	r20, r18
     81e:	48 0f       	add	r20, r24
     820:	59 1f       	adc	r21, r25
     822:	6a 1f       	adc	r22, r26
     824:	7b 1f       	adc	r23, r27
     826:	aa 0c       	add	r10, r10
     828:	bb 1c       	adc	r11, r11
     82a:	cc 1c       	adc	r12, r12
     82c:	dd 1c       	adc	r13, r13
     82e:	97 fe       	sbrs	r9, 7
     830:	08 c0       	rjmp	.+16     	; 0x842 <__mulsf3+0x110>
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	a8 2a       	or	r10, r24
     83c:	b9 2a       	or	r11, r25
     83e:	ca 2a       	or	r12, r26
     840:	db 2a       	or	r13, r27
     842:	31 96       	adiw	r30, 0x01	; 1
     844:	e0 32       	cpi	r30, 0x20	; 32
     846:	f1 05       	cpc	r31, r1
     848:	49 f0       	breq	.+18     	; 0x85c <__mulsf3+0x12a>
     84a:	66 0c       	add	r6, r6
     84c:	77 1c       	adc	r7, r7
     84e:	88 1c       	adc	r8, r8
     850:	99 1c       	adc	r9, r9
     852:	56 94       	lsr	r5
     854:	47 94       	ror	r4
     856:	37 94       	ror	r3
     858:	27 94       	ror	r2
     85a:	c3 cf       	rjmp	.-122    	; 0x7e2 <__mulsf3+0xb0>
     85c:	fa 85       	ldd	r31, Y+10	; 0x0a
     85e:	ea 89       	ldd	r30, Y+18	; 0x12
     860:	2b 89       	ldd	r18, Y+19	; 0x13
     862:	3c 89       	ldd	r19, Y+20	; 0x14
     864:	8b 85       	ldd	r24, Y+11	; 0x0b
     866:	9c 85       	ldd	r25, Y+12	; 0x0c
     868:	28 0f       	add	r18, r24
     86a:	39 1f       	adc	r19, r25
     86c:	2e 5f       	subi	r18, 0xFE	; 254
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	17 c0       	rjmp	.+46     	; 0x8a0 <__stack+0x41>
     872:	ca 01       	movw	r24, r20
     874:	81 70       	andi	r24, 0x01	; 1
     876:	90 70       	andi	r25, 0x00	; 0
     878:	89 2b       	or	r24, r25
     87a:	61 f0       	breq	.+24     	; 0x894 <__stack+0x35>
     87c:	16 95       	lsr	r17
     87e:	07 95       	ror	r16
     880:	f7 94       	ror	r15
     882:	e7 94       	ror	r14
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e8       	ldi	r27, 0x80	; 128
     88c:	e8 2a       	or	r14, r24
     88e:	f9 2a       	or	r15, r25
     890:	0a 2b       	or	r16, r26
     892:	1b 2b       	or	r17, r27
     894:	76 95       	lsr	r23
     896:	67 95       	ror	r22
     898:	57 95       	ror	r21
     89a:	47 95       	ror	r20
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	77 fd       	sbrc	r23, 7
     8a2:	e7 cf       	rjmp	.-50     	; 0x872 <__stack+0x13>
     8a4:	0c c0       	rjmp	.+24     	; 0x8be <__stack+0x5f>
     8a6:	44 0f       	add	r20, r20
     8a8:	55 1f       	adc	r21, r21
     8aa:	66 1f       	adc	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	17 fd       	sbrc	r17, 7
     8b0:	41 60       	ori	r20, 0x01	; 1
     8b2:	ee 0c       	add	r14, r14
     8b4:	ff 1c       	adc	r15, r15
     8b6:	00 1f       	adc	r16, r16
     8b8:	11 1f       	adc	r17, r17
     8ba:	21 50       	subi	r18, 0x01	; 1
     8bc:	30 40       	sbci	r19, 0x00	; 0
     8be:	40 30       	cpi	r20, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	59 07       	cpc	r21, r25
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	69 07       	cpc	r22, r25
     8c8:	90 e4       	ldi	r25, 0x40	; 64
     8ca:	79 07       	cpc	r23, r25
     8cc:	60 f3       	brcs	.-40     	; 0x8a6 <__stack+0x47>
     8ce:	2b 8f       	std	Y+27, r18	; 0x1b
     8d0:	3c 8f       	std	Y+28, r19	; 0x1c
     8d2:	db 01       	movw	r26, r22
     8d4:	ca 01       	movw	r24, r20
     8d6:	8f 77       	andi	r24, 0x7F	; 127
     8d8:	90 70       	andi	r25, 0x00	; 0
     8da:	a0 70       	andi	r26, 0x00	; 0
     8dc:	b0 70       	andi	r27, 0x00	; 0
     8de:	80 34       	cpi	r24, 0x40	; 64
     8e0:	91 05       	cpc	r25, r1
     8e2:	a1 05       	cpc	r26, r1
     8e4:	b1 05       	cpc	r27, r1
     8e6:	61 f4       	brne	.+24     	; 0x900 <__stack+0xa1>
     8e8:	47 fd       	sbrc	r20, 7
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <__stack+0xa1>
     8ec:	e1 14       	cp	r14, r1
     8ee:	f1 04       	cpc	r15, r1
     8f0:	01 05       	cpc	r16, r1
     8f2:	11 05       	cpc	r17, r1
     8f4:	29 f0       	breq	.+10     	; 0x900 <__stack+0xa1>
     8f6:	40 5c       	subi	r20, 0xC0	; 192
     8f8:	5f 4f       	sbci	r21, 0xFF	; 255
     8fa:	6f 4f       	sbci	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	40 78       	andi	r20, 0x80	; 128
     900:	1a 8e       	std	Y+26, r1	; 0x1a
     902:	fe 17       	cp	r31, r30
     904:	11 f0       	breq	.+4      	; 0x90a <__stack+0xab>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	8a 8f       	std	Y+26, r24	; 0x1a
     90a:	4d 8f       	std	Y+29, r20	; 0x1d
     90c:	5e 8f       	std	Y+30, r21	; 0x1e
     90e:	6f 8f       	std	Y+31, r22	; 0x1f
     910:	78 a3       	std	Y+32, r23	; 0x20
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 8f       	std	Y+25, r24	; 0x19
     916:	ce 01       	movw	r24, r28
     918:	49 96       	adiw	r24, 0x19	; 25
     91a:	0e 94 23 06 	call	0xc46	; 0xc46 <__pack_f>
     91e:	a0 96       	adiw	r28, 0x20	; 32
     920:	e2 e1       	ldi	r30, 0x12	; 18
     922:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__>

00000926 <__divsf3>:
     926:	a8 e1       	ldi	r26, 0x18	; 24
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e9 e9       	ldi	r30, 0x99	; 153
     92c:	f4 e0       	ldi	r31, 0x04	; 4
     92e:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x10>
     932:	69 83       	std	Y+1, r22	; 0x01
     934:	7a 83       	std	Y+2, r23	; 0x02
     936:	8b 83       	std	Y+3, r24	; 0x03
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	2d 83       	std	Y+5, r18	; 0x05
     93c:	3e 83       	std	Y+6, r19	; 0x06
     93e:	4f 83       	std	Y+7, r20	; 0x07
     940:	58 87       	std	Y+8, r21	; 0x08
     942:	b9 e0       	ldi	r27, 0x09	; 9
     944:	eb 2e       	mov	r14, r27
     946:	f1 2c       	mov	r15, r1
     948:	ec 0e       	add	r14, r28
     94a:	fd 1e       	adc	r15, r29
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	b7 01       	movw	r22, r14
     952:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     956:	8e 01       	movw	r16, r28
     958:	0f 5e       	subi	r16, 0xEF	; 239
     95a:	1f 4f       	sbci	r17, 0xFF	; 255
     95c:	ce 01       	movw	r24, r28
     95e:	05 96       	adiw	r24, 0x05	; 5
     960:	b8 01       	movw	r22, r16
     962:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     966:	29 85       	ldd	r18, Y+9	; 0x09
     968:	22 30       	cpi	r18, 0x02	; 2
     96a:	08 f4       	brcc	.+2      	; 0x96e <__divsf3+0x48>
     96c:	7e c0       	rjmp	.+252    	; 0xa6a <__divsf3+0x144>
     96e:	39 89       	ldd	r19, Y+17	; 0x11
     970:	32 30       	cpi	r19, 0x02	; 2
     972:	10 f4       	brcc	.+4      	; 0x978 <__divsf3+0x52>
     974:	b8 01       	movw	r22, r16
     976:	7c c0       	rjmp	.+248    	; 0xa70 <__divsf3+0x14a>
     978:	8a 85       	ldd	r24, Y+10	; 0x0a
     97a:	9a 89       	ldd	r25, Y+18	; 0x12
     97c:	89 27       	eor	r24, r25
     97e:	8a 87       	std	Y+10, r24	; 0x0a
     980:	24 30       	cpi	r18, 0x04	; 4
     982:	11 f0       	breq	.+4      	; 0x988 <__divsf3+0x62>
     984:	22 30       	cpi	r18, 0x02	; 2
     986:	31 f4       	brne	.+12     	; 0x994 <__divsf3+0x6e>
     988:	23 17       	cp	r18, r19
     98a:	09 f0       	breq	.+2      	; 0x98e <__divsf3+0x68>
     98c:	6e c0       	rjmp	.+220    	; 0xa6a <__divsf3+0x144>
     98e:	61 e7       	ldi	r22, 0x71	; 113
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	6e c0       	rjmp	.+220    	; 0xa70 <__divsf3+0x14a>
     994:	34 30       	cpi	r19, 0x04	; 4
     996:	39 f4       	brne	.+14     	; 0x9a6 <__divsf3+0x80>
     998:	1d 86       	std	Y+13, r1	; 0x0d
     99a:	1e 86       	std	Y+14, r1	; 0x0e
     99c:	1f 86       	std	Y+15, r1	; 0x0f
     99e:	18 8a       	std	Y+16, r1	; 0x10
     9a0:	1c 86       	std	Y+12, r1	; 0x0c
     9a2:	1b 86       	std	Y+11, r1	; 0x0b
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__divsf3+0x88>
     9a6:	32 30       	cpi	r19, 0x02	; 2
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <__divsf3+0x8c>
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	89 87       	std	Y+9, r24	; 0x09
     9ae:	b7 01       	movw	r22, r14
     9b0:	5f c0       	rjmp	.+190    	; 0xa70 <__divsf3+0x14a>
     9b2:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b4:	3c 85       	ldd	r19, Y+12	; 0x0c
     9b6:	8b 89       	ldd	r24, Y+19	; 0x13
     9b8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ba:	28 1b       	sub	r18, r24
     9bc:	39 0b       	sbc	r19, r25
     9be:	3c 87       	std	Y+12, r19	; 0x0c
     9c0:	2b 87       	std	Y+11, r18	; 0x0b
     9c2:	ed 84       	ldd	r14, Y+13	; 0x0d
     9c4:	fe 84       	ldd	r15, Y+14	; 0x0e
     9c6:	0f 85       	ldd	r16, Y+15	; 0x0f
     9c8:	18 89       	ldd	r17, Y+16	; 0x10
     9ca:	ad 88       	ldd	r10, Y+21	; 0x15
     9cc:	be 88       	ldd	r11, Y+22	; 0x16
     9ce:	cf 88       	ldd	r12, Y+23	; 0x17
     9d0:	d8 8c       	ldd	r13, Y+24	; 0x18
     9d2:	ea 14       	cp	r14, r10
     9d4:	fb 04       	cpc	r15, r11
     9d6:	0c 05       	cpc	r16, r12
     9d8:	1d 05       	cpc	r17, r13
     9da:	40 f4       	brcc	.+16     	; 0x9ec <__divsf3+0xc6>
     9dc:	ee 0c       	add	r14, r14
     9de:	ff 1c       	adc	r15, r15
     9e0:	00 1f       	adc	r16, r16
     9e2:	11 1f       	adc	r17, r17
     9e4:	21 50       	subi	r18, 0x01	; 1
     9e6:	30 40       	sbci	r19, 0x00	; 0
     9e8:	3c 87       	std	Y+12, r19	; 0x0c
     9ea:	2b 87       	std	Y+11, r18	; 0x0b
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e4       	ldi	r27, 0x40	; 64
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	ea 14       	cp	r14, r10
     a02:	fb 04       	cpc	r15, r11
     a04:	0c 05       	cpc	r16, r12
     a06:	1d 05       	cpc	r17, r13
     a08:	40 f0       	brcs	.+16     	; 0xa1a <__divsf3+0xf4>
     a0a:	28 2b       	or	r18, r24
     a0c:	39 2b       	or	r19, r25
     a0e:	4a 2b       	or	r20, r26
     a10:	5b 2b       	or	r21, r27
     a12:	ea 18       	sub	r14, r10
     a14:	fb 08       	sbc	r15, r11
     a16:	0c 09       	sbc	r16, r12
     a18:	1d 09       	sbc	r17, r13
     a1a:	b6 95       	lsr	r27
     a1c:	a7 95       	ror	r26
     a1e:	97 95       	ror	r25
     a20:	87 95       	ror	r24
     a22:	ee 0c       	add	r14, r14
     a24:	ff 1c       	adc	r15, r15
     a26:	00 1f       	adc	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	6f 31       	cpi	r22, 0x1F	; 31
     a30:	71 05       	cpc	r23, r1
     a32:	31 f7       	brne	.-52     	; 0xa00 <__divsf3+0xda>
     a34:	da 01       	movw	r26, r20
     a36:	c9 01       	movw	r24, r18
     a38:	8f 77       	andi	r24, 0x7F	; 127
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	a0 70       	andi	r26, 0x00	; 0
     a3e:	b0 70       	andi	r27, 0x00	; 0
     a40:	80 34       	cpi	r24, 0x40	; 64
     a42:	91 05       	cpc	r25, r1
     a44:	a1 05       	cpc	r26, r1
     a46:	b1 05       	cpc	r27, r1
     a48:	61 f4       	brne	.+24     	; 0xa62 <__divsf3+0x13c>
     a4a:	27 fd       	sbrc	r18, 7
     a4c:	0a c0       	rjmp	.+20     	; 0xa62 <__divsf3+0x13c>
     a4e:	e1 14       	cp	r14, r1
     a50:	f1 04       	cpc	r15, r1
     a52:	01 05       	cpc	r16, r1
     a54:	11 05       	cpc	r17, r1
     a56:	29 f0       	breq	.+10     	; 0xa62 <__divsf3+0x13c>
     a58:	20 5c       	subi	r18, 0xC0	; 192
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	4f 4f       	sbci	r20, 0xFF	; 255
     a5e:	5f 4f       	sbci	r21, 0xFF	; 255
     a60:	20 78       	andi	r18, 0x80	; 128
     a62:	2d 87       	std	Y+13, r18	; 0x0d
     a64:	3e 87       	std	Y+14, r19	; 0x0e
     a66:	4f 87       	std	Y+15, r20	; 0x0f
     a68:	58 8b       	std	Y+16, r21	; 0x10
     a6a:	be 01       	movw	r22, r28
     a6c:	67 5f       	subi	r22, 0xF7	; 247
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	cb 01       	movw	r24, r22
     a72:	0e 94 23 06 	call	0xc46	; 0xc46 <__pack_f>
     a76:	68 96       	adiw	r28, 0x18	; 24
     a78:	ea e0       	ldi	r30, 0x0A	; 10
     a7a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x10>

00000a7e <__gtsf2>:
     a7e:	a8 e1       	ldi	r26, 0x18	; 24
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e5 e4       	ldi	r30, 0x45	; 69
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     a8a:	69 83       	std	Y+1, r22	; 0x01
     a8c:	7a 83       	std	Y+2, r23	; 0x02
     a8e:	8b 83       	std	Y+3, r24	; 0x03
     a90:	9c 83       	std	Y+4, r25	; 0x04
     a92:	2d 83       	std	Y+5, r18	; 0x05
     a94:	3e 83       	std	Y+6, r19	; 0x06
     a96:	4f 83       	std	Y+7, r20	; 0x07
     a98:	58 87       	std	Y+8, r21	; 0x08
     a9a:	89 e0       	ldi	r24, 0x09	; 9
     a9c:	e8 2e       	mov	r14, r24
     a9e:	f1 2c       	mov	r15, r1
     aa0:	ec 0e       	add	r14, r28
     aa2:	fd 1e       	adc	r15, r29
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	b7 01       	movw	r22, r14
     aaa:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     aae:	8e 01       	movw	r16, r28
     ab0:	0f 5e       	subi	r16, 0xEF	; 239
     ab2:	1f 4f       	sbci	r17, 0xFF	; 255
     ab4:	ce 01       	movw	r24, r28
     ab6:	05 96       	adiw	r24, 0x05	; 5
     ab8:	b8 01       	movw	r22, r16
     aba:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     abe:	89 85       	ldd	r24, Y+9	; 0x09
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	40 f0       	brcs	.+16     	; 0xad4 <__gtsf2+0x56>
     ac4:	89 89       	ldd	r24, Y+17	; 0x11
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	28 f0       	brcs	.+10     	; 0xad4 <__gtsf2+0x56>
     aca:	c7 01       	movw	r24, r14
     acc:	b8 01       	movw	r22, r16
     ace:	0e 94 70 07 	call	0xee0	; 0xee0 <__fpcmp_parts_f>
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__gtsf2+0x58>
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	68 96       	adiw	r28, 0x18	; 24
     ad8:	e6 e0       	ldi	r30, 0x06	; 6
     ada:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

00000ade <__gesf2>:
     ade:	a8 e1       	ldi	r26, 0x18	; 24
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	e5 e7       	ldi	r30, 0x75	; 117
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     aea:	69 83       	std	Y+1, r22	; 0x01
     aec:	7a 83       	std	Y+2, r23	; 0x02
     aee:	8b 83       	std	Y+3, r24	; 0x03
     af0:	9c 83       	std	Y+4, r25	; 0x04
     af2:	2d 83       	std	Y+5, r18	; 0x05
     af4:	3e 83       	std	Y+6, r19	; 0x06
     af6:	4f 83       	std	Y+7, r20	; 0x07
     af8:	58 87       	std	Y+8, r21	; 0x08
     afa:	89 e0       	ldi	r24, 0x09	; 9
     afc:	e8 2e       	mov	r14, r24
     afe:	f1 2c       	mov	r15, r1
     b00:	ec 0e       	add	r14, r28
     b02:	fd 1e       	adc	r15, r29
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	b7 01       	movw	r22, r14
     b0a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     b0e:	8e 01       	movw	r16, r28
     b10:	0f 5e       	subi	r16, 0xEF	; 239
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	ce 01       	movw	r24, r28
     b16:	05 96       	adiw	r24, 0x05	; 5
     b18:	b8 01       	movw	r22, r16
     b1a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	40 f0       	brcs	.+16     	; 0xb34 <__gesf2+0x56>
     b24:	89 89       	ldd	r24, Y+17	; 0x11
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	28 f0       	brcs	.+10     	; 0xb34 <__gesf2+0x56>
     b2a:	c7 01       	movw	r24, r14
     b2c:	b8 01       	movw	r22, r16
     b2e:	0e 94 70 07 	call	0xee0	; 0xee0 <__fpcmp_parts_f>
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <__gesf2+0x58>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	68 96       	adiw	r28, 0x18	; 24
     b38:	e6 e0       	ldi	r30, 0x06	; 6
     b3a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

00000b3e <__ltsf2>:
     b3e:	a8 e1       	ldi	r26, 0x18	; 24
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e5 ea       	ldi	r30, 0xA5	; 165
     b44:	f5 e0       	ldi	r31, 0x05	; 5
     b46:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x18>
     b4a:	69 83       	std	Y+1, r22	; 0x01
     b4c:	7a 83       	std	Y+2, r23	; 0x02
     b4e:	8b 83       	std	Y+3, r24	; 0x03
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	2d 83       	std	Y+5, r18	; 0x05
     b54:	3e 83       	std	Y+6, r19	; 0x06
     b56:	4f 83       	std	Y+7, r20	; 0x07
     b58:	58 87       	std	Y+8, r21	; 0x08
     b5a:	89 e0       	ldi	r24, 0x09	; 9
     b5c:	e8 2e       	mov	r14, r24
     b5e:	f1 2c       	mov	r15, r1
     b60:	ec 0e       	add	r14, r28
     b62:	fd 1e       	adc	r15, r29
     b64:	ce 01       	movw	r24, r28
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	b7 01       	movw	r22, r14
     b6a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5e       	subi	r16, 0xEF	; 239
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	ce 01       	movw	r24, r28
     b76:	05 96       	adiw	r24, 0x05	; 5
     b78:	b8 01       	movw	r22, r16
     b7a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     b7e:	89 85       	ldd	r24, Y+9	; 0x09
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	40 f0       	brcs	.+16     	; 0xb94 <__ltsf2+0x56>
     b84:	89 89       	ldd	r24, Y+17	; 0x11
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	28 f0       	brcs	.+10     	; 0xb94 <__ltsf2+0x56>
     b8a:	c7 01       	movw	r24, r14
     b8c:	b8 01       	movw	r22, r16
     b8e:	0e 94 70 07 	call	0xee0	; 0xee0 <__fpcmp_parts_f>
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <__ltsf2+0x58>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	68 96       	adiw	r28, 0x18	; 24
     b98:	e6 e0       	ldi	r30, 0x06	; 6
     b9a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x18>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__epilogue_restores__+0x20>

00000c46 <__pack_f>:
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	fc 01       	movw	r30, r24
     c52:	e4 80       	ldd	r14, Z+4	; 0x04
     c54:	f5 80       	ldd	r15, Z+5	; 0x05
     c56:	06 81       	ldd	r16, Z+6	; 0x06
     c58:	17 81       	ldd	r17, Z+7	; 0x07
     c5a:	d1 80       	ldd	r13, Z+1	; 0x01
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	48 f4       	brcc	.+18     	; 0xc74 <__pack_f+0x2e>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e1       	ldi	r26, 0x10	; 16
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e8 2a       	or	r14, r24
     c6c:	f9 2a       	or	r15, r25
     c6e:	0a 2b       	or	r16, r26
     c70:	1b 2b       	or	r17, r27
     c72:	a5 c0       	rjmp	.+330    	; 0xdbe <__pack_f+0x178>
     c74:	84 30       	cpi	r24, 0x04	; 4
     c76:	09 f4       	brne	.+2      	; 0xc7a <__pack_f+0x34>
     c78:	9f c0       	rjmp	.+318    	; 0xdb8 <__pack_f+0x172>
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	21 f4       	brne	.+8      	; 0xc86 <__pack_f+0x40>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	05 c0       	rjmp	.+10     	; 0xc90 <__pack_f+0x4a>
     c86:	e1 14       	cp	r14, r1
     c88:	f1 04       	cpc	r15, r1
     c8a:	01 05       	cpc	r16, r1
     c8c:	11 05       	cpc	r17, r1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <__pack_f+0x50>
     c90:	e0 e0       	ldi	r30, 0x00	; 0
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	96 c0       	rjmp	.+300    	; 0xdc2 <__pack_f+0x17c>
     c96:	62 81       	ldd	r22, Z+2	; 0x02
     c98:	73 81       	ldd	r23, Z+3	; 0x03
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	62 38       	cpi	r22, 0x82	; 130
     c9e:	79 07       	cpc	r23, r25
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <__pack_f+0x5e>
     ca2:	5b c0       	rjmp	.+182    	; 0xd5a <__pack_f+0x114>
     ca4:	22 e8       	ldi	r18, 0x82	; 130
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	26 1b       	sub	r18, r22
     caa:	37 0b       	sbc	r19, r23
     cac:	2a 31       	cpi	r18, 0x1A	; 26
     cae:	31 05       	cpc	r19, r1
     cb0:	2c f0       	brlt	.+10     	; 0xcbc <__pack_f+0x76>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	2a c0       	rjmp	.+84     	; 0xd10 <__pack_f+0xca>
     cbc:	b8 01       	movw	r22, r16
     cbe:	a7 01       	movw	r20, r14
     cc0:	02 2e       	mov	r0, r18
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__pack_f+0x86>
     cc4:	76 95       	lsr	r23
     cc6:	67 95       	ror	r22
     cc8:	57 95       	ror	r21
     cca:	47 95       	ror	r20
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <__pack_f+0x7e>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__pack_f+0x9c>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	2a 95       	dec	r18
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <__pack_f+0x94>
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	a1 09       	sbc	r26, r1
     cea:	b1 09       	sbc	r27, r1
     cec:	8e 21       	and	r24, r14
     cee:	9f 21       	and	r25, r15
     cf0:	a0 23       	and	r26, r16
     cf2:	b1 23       	and	r27, r17
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	a1 05       	cpc	r26, r1
     cf8:	b1 05       	cpc	r27, r1
     cfa:	21 f0       	breq	.+8      	; 0xd04 <__pack_f+0xbe>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	a0 e0       	ldi	r26, 0x00	; 0
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	28 2b       	or	r18, r24
     d0a:	39 2b       	or	r19, r25
     d0c:	4a 2b       	or	r20, r26
     d0e:	5b 2b       	or	r21, r27
     d10:	da 01       	movw	r26, r20
     d12:	c9 01       	movw	r24, r18
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	90 70       	andi	r25, 0x00	; 0
     d18:	a0 70       	andi	r26, 0x00	; 0
     d1a:	b0 70       	andi	r27, 0x00	; 0
     d1c:	80 34       	cpi	r24, 0x40	; 64
     d1e:	91 05       	cpc	r25, r1
     d20:	a1 05       	cpc	r26, r1
     d22:	b1 05       	cpc	r27, r1
     d24:	39 f4       	brne	.+14     	; 0xd34 <__pack_f+0xee>
     d26:	27 ff       	sbrs	r18, 7
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <__pack_f+0xf6>
     d2a:	20 5c       	subi	r18, 0xC0	; 192
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	4f 4f       	sbci	r20, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <__pack_f+0xf6>
     d34:	21 5c       	subi	r18, 0xC1	; 193
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	4f 4f       	sbci	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	20 30       	cpi	r18, 0x00	; 0
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	3a 07       	cpc	r19, r26
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	4a 07       	cpc	r20, r26
     d4a:	a0 e4       	ldi	r26, 0x40	; 64
     d4c:	5a 07       	cpc	r21, r26
     d4e:	10 f0       	brcs	.+4      	; 0xd54 <__pack_f+0x10e>
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	79 01       	movw	r14, r18
     d56:	8a 01       	movw	r16, r20
     d58:	27 c0       	rjmp	.+78     	; 0xda8 <__pack_f+0x162>
     d5a:	60 38       	cpi	r22, 0x80	; 128
     d5c:	71 05       	cpc	r23, r1
     d5e:	64 f5       	brge	.+88     	; 0xdb8 <__pack_f+0x172>
     d60:	fb 01       	movw	r30, r22
     d62:	e1 58       	subi	r30, 0x81	; 129
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	d8 01       	movw	r26, r16
     d68:	c7 01       	movw	r24, r14
     d6a:	8f 77       	andi	r24, 0x7F	; 127
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	a0 70       	andi	r26, 0x00	; 0
     d70:	b0 70       	andi	r27, 0x00	; 0
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	91 05       	cpc	r25, r1
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	39 f4       	brne	.+14     	; 0xd8a <__pack_f+0x144>
     d7c:	e7 fe       	sbrs	r14, 7
     d7e:	0d c0       	rjmp	.+26     	; 0xd9a <__pack_f+0x154>
     d80:	80 e4       	ldi	r24, 0x40	; 64
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a0 e0       	ldi	r26, 0x00	; 0
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__pack_f+0x14c>
     d8a:	8f e3       	ldi	r24, 0x3F	; 63
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e8 0e       	add	r14, r24
     d94:	f9 1e       	adc	r15, r25
     d96:	0a 1f       	adc	r16, r26
     d98:	1b 1f       	adc	r17, r27
     d9a:	17 ff       	sbrs	r17, 7
     d9c:	05 c0       	rjmp	.+10     	; 0xda8 <__pack_f+0x162>
     d9e:	16 95       	lsr	r17
     da0:	07 95       	ror	r16
     da2:	f7 94       	ror	r15
     da4:	e7 94       	ror	r14
     da6:	31 96       	adiw	r30, 0x01	; 1
     da8:	87 e0       	ldi	r24, 0x07	; 7
     daa:	16 95       	lsr	r17
     dac:	07 95       	ror	r16
     dae:	f7 94       	ror	r15
     db0:	e7 94       	ror	r14
     db2:	8a 95       	dec	r24
     db4:	d1 f7       	brne	.-12     	; 0xdaa <__pack_f+0x164>
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__pack_f+0x17c>
     db8:	ee 24       	eor	r14, r14
     dba:	ff 24       	eor	r15, r15
     dbc:	87 01       	movw	r16, r14
     dbe:	ef ef       	ldi	r30, 0xFF	; 255
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	6e 2f       	mov	r22, r30
     dc4:	67 95       	ror	r22
     dc6:	66 27       	eor	r22, r22
     dc8:	67 95       	ror	r22
     dca:	90 2f       	mov	r25, r16
     dcc:	9f 77       	andi	r25, 0x7F	; 127
     dce:	d7 94       	ror	r13
     dd0:	dd 24       	eor	r13, r13
     dd2:	d7 94       	ror	r13
     dd4:	8e 2f       	mov	r24, r30
     dd6:	86 95       	lsr	r24
     dd8:	49 2f       	mov	r20, r25
     dda:	46 2b       	or	r20, r22
     ddc:	58 2f       	mov	r21, r24
     dde:	5d 29       	or	r21, r13
     de0:	b7 01       	movw	r22, r14
     de2:	ca 01       	movw	r24, r20
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	df 90       	pop	r13
     dee:	08 95       	ret

00000df0 <__unpack_f>:
     df0:	fc 01       	movw	r30, r24
     df2:	db 01       	movw	r26, r22
     df4:	40 81       	ld	r20, Z
     df6:	51 81       	ldd	r21, Z+1	; 0x01
     df8:	22 81       	ldd	r18, Z+2	; 0x02
     dfa:	62 2f       	mov	r22, r18
     dfc:	6f 77       	andi	r22, 0x7F	; 127
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	22 1f       	adc	r18, r18
     e02:	22 27       	eor	r18, r18
     e04:	22 1f       	adc	r18, r18
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	89 2f       	mov	r24, r25
     e0a:	88 0f       	add	r24, r24
     e0c:	82 2b       	or	r24, r18
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	99 1f       	adc	r25, r25
     e14:	99 27       	eor	r25, r25
     e16:	99 1f       	adc	r25, r25
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 93       	st	X, r25
     e1c:	11 97       	sbiw	r26, 0x01	; 1
     e1e:	21 15       	cp	r18, r1
     e20:	31 05       	cpc	r19, r1
     e22:	a9 f5       	brne	.+106    	; 0xe8e <__unpack_f+0x9e>
     e24:	41 15       	cp	r20, r1
     e26:	51 05       	cpc	r21, r1
     e28:	61 05       	cpc	r22, r1
     e2a:	71 05       	cpc	r23, r1
     e2c:	11 f4       	brne	.+4      	; 0xe32 <__unpack_f+0x42>
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	37 c0       	rjmp	.+110    	; 0xea0 <__unpack_f+0xb0>
     e32:	82 e8       	ldi	r24, 0x82	; 130
     e34:	9f ef       	ldi	r25, 0xFF	; 255
     e36:	13 96       	adiw	r26, 0x03	; 3
     e38:	9c 93       	st	X, r25
     e3a:	8e 93       	st	-X, r24
     e3c:	12 97       	sbiw	r26, 0x02	; 2
     e3e:	9a 01       	movw	r18, r20
     e40:	ab 01       	movw	r20, r22
     e42:	67 e0       	ldi	r22, 0x07	; 7
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	44 1f       	adc	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	6a 95       	dec	r22
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <__unpack_f+0x54>
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	8c 93       	st	X, r24
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <__unpack_f+0x80>
     e56:	22 0f       	add	r18, r18
     e58:	33 1f       	adc	r19, r19
     e5a:	44 1f       	adc	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	8d 91       	ld	r24, X+
     e62:	9c 91       	ld	r25, X
     e64:	13 97       	sbiw	r26, 0x03	; 3
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	9c 93       	st	X, r25
     e6c:	8e 93       	st	-X, r24
     e6e:	12 97       	sbiw	r26, 0x02	; 2
     e70:	20 30       	cpi	r18, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	38 07       	cpc	r19, r24
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	48 07       	cpc	r20, r24
     e7a:	80 e4       	ldi	r24, 0x40	; 64
     e7c:	58 07       	cpc	r21, r24
     e7e:	58 f3       	brcs	.-42     	; 0xe56 <__unpack_f+0x66>
     e80:	14 96       	adiw	r26, 0x04	; 4
     e82:	2d 93       	st	X+, r18
     e84:	3d 93       	st	X+, r19
     e86:	4d 93       	st	X+, r20
     e88:	5c 93       	st	X, r21
     e8a:	17 97       	sbiw	r26, 0x07	; 7
     e8c:	08 95       	ret
     e8e:	2f 3f       	cpi	r18, 0xFF	; 255
     e90:	31 05       	cpc	r19, r1
     e92:	79 f4       	brne	.+30     	; 0xeb2 <__unpack_f+0xc2>
     e94:	41 15       	cp	r20, r1
     e96:	51 05       	cpc	r21, r1
     e98:	61 05       	cpc	r22, r1
     e9a:	71 05       	cpc	r23, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <__unpack_f+0xb4>
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	8c 93       	st	X, r24
     ea2:	08 95       	ret
     ea4:	64 ff       	sbrs	r22, 4
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <__unpack_f+0xbe>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	8c 93       	st	X, r24
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <__unpack_f+0xe2>
     eae:	1c 92       	st	X, r1
     eb0:	10 c0       	rjmp	.+32     	; 0xed2 <__unpack_f+0xe2>
     eb2:	2f 57       	subi	r18, 0x7F	; 127
     eb4:	30 40       	sbci	r19, 0x00	; 0
     eb6:	13 96       	adiw	r26, 0x03	; 3
     eb8:	3c 93       	st	X, r19
     eba:	2e 93       	st	-X, r18
     ebc:	12 97       	sbiw	r26, 0x02	; 2
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	8c 93       	st	X, r24
     ec2:	87 e0       	ldi	r24, 0x07	; 7
     ec4:	44 0f       	add	r20, r20
     ec6:	55 1f       	adc	r21, r21
     ec8:	66 1f       	adc	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	8a 95       	dec	r24
     ece:	d1 f7       	brne	.-12     	; 0xec4 <__unpack_f+0xd4>
     ed0:	70 64       	ori	r23, 0x40	; 64
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	4d 93       	st	X+, r20
     ed6:	5d 93       	st	X+, r21
     ed8:	6d 93       	st	X+, r22
     eda:	7c 93       	st	X, r23
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret

00000ee0 <__fpcmp_parts_f>:
     ee0:	1f 93       	push	r17
     ee2:	dc 01       	movw	r26, r24
     ee4:	fb 01       	movw	r30, r22
     ee6:	9c 91       	ld	r25, X
     ee8:	92 30       	cpi	r25, 0x02	; 2
     eea:	08 f4       	brcc	.+2      	; 0xeee <__fpcmp_parts_f+0xe>
     eec:	47 c0       	rjmp	.+142    	; 0xf7c <__fpcmp_parts_f+0x9c>
     eee:	80 81       	ld	r24, Z
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <__fpcmp_parts_f+0x16>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <__fpcmp_parts_f+0x9c>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	51 f4       	brne	.+20     	; 0xf0e <__fpcmp_parts_f+0x2e>
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	1c 91       	ld	r17, X
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	99 f5       	brne	.+102    	; 0xf68 <__fpcmp_parts_f+0x88>
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	68 2f       	mov	r22, r24
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	61 1b       	sub	r22, r17
     f0a:	71 09       	sbc	r23, r1
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <__fpcmp_parts_f+0xac>
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	21 f0       	breq	.+8      	; 0xf1a <__fpcmp_parts_f+0x3a>
     f12:	92 30       	cpi	r25, 0x02	; 2
     f14:	31 f4       	brne	.+12     	; 0xf22 <__fpcmp_parts_f+0x42>
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	b9 f1       	breq	.+110    	; 0xf88 <__fpcmp_parts_f+0xa8>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	88 23       	and	r24, r24
     f1e:	89 f1       	breq	.+98     	; 0xf82 <__fpcmp_parts_f+0xa2>
     f20:	2d c0       	rjmp	.+90     	; 0xf7c <__fpcmp_parts_f+0x9c>
     f22:	11 96       	adiw	r26, 0x01	; 1
     f24:	1c 91       	ld	r17, X
     f26:	11 97       	sbiw	r26, 0x01	; 1
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	f1 f0       	breq	.+60     	; 0xf68 <__fpcmp_parts_f+0x88>
     f2c:	81 81       	ldd	r24, Z+1	; 0x01
     f2e:	18 17       	cp	r17, r24
     f30:	d9 f4       	brne	.+54     	; 0xf68 <__fpcmp_parts_f+0x88>
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	2d 91       	ld	r18, X+
     f36:	3c 91       	ld	r19, X
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	82 17       	cp	r24, r18
     f40:	93 07       	cpc	r25, r19
     f42:	94 f0       	brlt	.+36     	; 0xf68 <__fpcmp_parts_f+0x88>
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	bc f0       	brlt	.+46     	; 0xf78 <__fpcmp_parts_f+0x98>
     f4a:	14 96       	adiw	r26, 0x04	; 4
     f4c:	8d 91       	ld	r24, X+
     f4e:	9d 91       	ld	r25, X+
     f50:	0d 90       	ld	r0, X+
     f52:	bc 91       	ld	r27, X
     f54:	a0 2d       	mov	r26, r0
     f56:	24 81       	ldd	r18, Z+4	; 0x04
     f58:	35 81       	ldd	r19, Z+5	; 0x05
     f5a:	46 81       	ldd	r20, Z+6	; 0x06
     f5c:	57 81       	ldd	r21, Z+7	; 0x07
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	4a 07       	cpc	r20, r26
     f64:	5b 07       	cpc	r21, r27
     f66:	18 f4       	brcc	.+6      	; 0xf6e <__fpcmp_parts_f+0x8e>
     f68:	11 23       	and	r17, r17
     f6a:	41 f0       	breq	.+16     	; 0xf7c <__fpcmp_parts_f+0x9c>
     f6c:	0a c0       	rjmp	.+20     	; 0xf82 <__fpcmp_parts_f+0xa2>
     f6e:	82 17       	cp	r24, r18
     f70:	93 07       	cpc	r25, r19
     f72:	a4 07       	cpc	r26, r20
     f74:	b5 07       	cpc	r27, r21
     f76:	40 f4       	brcc	.+16     	; 0xf88 <__fpcmp_parts_f+0xa8>
     f78:	11 23       	and	r17, r17
     f7a:	19 f0       	breq	.+6      	; 0xf82 <__fpcmp_parts_f+0xa2>
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__fpcmp_parts_f+0xac>
     f82:	6f ef       	ldi	r22, 0xFF	; 255
     f84:	7f ef       	ldi	r23, 0xFF	; 255
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <__fpcmp_parts_f+0xac>
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	cb 01       	movw	r24, r22
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <MCAL_ADC_Init>:

//*************************************************************
//******************* APIs Implementation**********************
//*************************************************************
void MCAL_ADC_Init(ADC_VREF_t  LVref, ADC_PRESCALER_t Lprescaller)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <MCAL_ADC_Init+0x6>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	6a 83       	std	Y+2, r22	; 0x02
   // Set Volt Referrance
	ADMUX |= LVref ;
     fa0:	a7 e2       	ldi	r26, 0x27	; 39
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e7 e2       	ldi	r30, 0x27	; 39
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	90 81       	ld	r25, Z
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	89 2b       	or	r24, r25
     fae:	8c 93       	st	X, r24

	// Set Prescaler
	ADCSRA &= 0xF8;
     fb0:	a6 e2       	ldi	r26, 0x26	; 38
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e6 e2       	ldi	r30, 0x26	; 38
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	8c 93       	st	X, r24
	ADCSRA |= Lprescaller;
     fbe:	a6 e2       	ldi	r26, 0x26	; 38
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e6 e2       	ldi	r30, 0x26	; 38
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	90 81       	ld	r25, Z
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	89 2b       	or	r24, r25
     fcc:	8c 93       	st	X, r24


	// Enable ADC
	ADCSRA |= 1<<ADEN ;   //bin 7
     fce:	a6 e2       	ldi	r26, 0x26	; 38
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	8c 93       	st	X, r24
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <MCAL_ADC_READ>:


u16 MCAL_ADC_READ(ADC_CHANNEL_t LCHn)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	89 83       	std	Y+1, r24	; 0x01
   // select channel
	ADMUX &= 0xE0;  // Clear first 5 bit
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 7e       	andi	r24, 0xE0	; 224
     ffe:	8c 93       	st	X, r24
	ADMUX |= LCHn;
    1000:	a7 e2       	ldi	r26, 0x27	; 39
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e7 e2       	ldi	r30, 0x27	; 39
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	90 81       	ld	r25, Z
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	89 2b       	or	r24, r25
    100e:	8c 93       	st	X, r24

	// Start conversion
	ADCSRA |= 1<<ADSC   ;    //bin 6
    1010:	a6 e2       	ldi	r26, 0x26	; 38
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e6 e2       	ldi	r30, 0x26	; 38
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	80 64       	ori	r24, 0x40	; 64
    101c:	8c 93       	st	X, r24

	while( (ADCSRA & 1<<ADSC) );
    101e:	e6 e2       	ldi	r30, 0x26	; 38
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	80 74       	andi	r24, 0x40	; 64
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	b9 f7       	brne	.-18     	; 0x101e <MCAL_ADC_READ+0x38>

	return ADC;
    1030:	e4 e2       	ldi	r30, 0x24	; 36
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <PWM0_Init>:
//*************************************************************
//******************* APIs Implementation**********************
//*************************************************************

E_Status_t PWM0_Init(ST_PWM0Config_t *config)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <PWM0_Init+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	89 83       	std	Y+1, r24	; 0x01
	if( null == config)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	19 f4       	brne	.+6      	; 0x1062 <PWM0_Init+0x22>
	{
		u8_retVal = E_NOK;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	77 c0       	rjmp	.+238    	; 0x1150 <PWM0_Init+0x110>
	}
	else
	{
		PWM0config = config;
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	90 93 8b 00 	sts	0x008B, r25
    106a:	80 93 8a 00 	sts	0x008A, r24
		if( PWM_FAST == PWM0config->Mode  ||  PWM_PHASE_CORRECT == PWM0config->Mode )
    106e:	e0 91 8a 00 	lds	r30, 0x008A
    1072:	f0 91 8b 00 	lds	r31, 0x008B
    1076:	80 81       	ld	r24, Z
    1078:	88 34       	cpi	r24, 0x48	; 72
    107a:	39 f0       	breq	.+14     	; 0x108a <PWM0_Init+0x4a>
    107c:	e0 91 8a 00 	lds	r30, 0x008A
    1080:	f0 91 8b 00 	lds	r31, 0x008B
    1084:	80 81       	ld	r24, Z
    1086:	80 34       	cpi	r24, 0x40	; 64
    1088:	71 f4       	brne	.+28     	; 0x10a6 <PWM0_Init+0x66>
		{
			TCCR0 |=  PWM0config->Mode;
    108a:	a3 e5       	ldi	r26, 0x53	; 83
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e3 e5       	ldi	r30, 0x53	; 83
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	90 81       	ld	r25, Z
    1094:	e0 91 8a 00 	lds	r30, 0x008A
    1098:	f0 91 8b 00 	lds	r31, 0x008B
    109c:	80 81       	ld	r24, Z
    109e:	89 2b       	or	r24, r25
    10a0:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <PWM0_Init+0x6a>
		}
		else
		{
			u8_retVal = E_NOK;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_NO_CLCK <= PWM0config->Clok  &&  PWM_EXTERNAL_CLK_RISING >= PWM0config->Clok )
    10aa:	e0 91 8a 00 	lds	r30, 0x008A
    10ae:	f0 91 8b 00 	lds	r31, 0x008B
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	70 f4       	brcc	.+28     	; 0x10d4 <PWM0_Init+0x94>
		{
			TCCR0 |=  PWM0config->Clok;
    10b8:	a3 e5       	ldi	r26, 0x53	; 83
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e3 e5       	ldi	r30, 0x53	; 83
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	90 81       	ld	r25, Z
    10c2:	e0 91 8a 00 	lds	r30, 0x008A
    10c6:	f0 91 8b 00 	lds	r31, 0x008B
    10ca:	81 81       	ldd	r24, Z+1	; 0x01
    10cc:	89 2b       	or	r24, r25
    10ce:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <PWM0_Init+0x98>
		}
		else
		{
			u8_retVal = E_NOK;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_TOF_ENABLE == PWM0config->TOFE_Interrupt  ||  PWM_TOF_DISABLE == PWM0config->TOFE_Interrupt )
    10d8:	e0 91 8a 00 	lds	r30, 0x008A
    10dc:	f0 91 8b 00 	lds	r31, 0x008B
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <PWM0_Init+0xb4>
    10e6:	e0 91 8a 00 	lds	r30, 0x008A
    10ea:	f0 91 8b 00 	lds	r31, 0x008B
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	88 23       	and	r24, r24
    10f2:	71 f4       	brne	.+28     	; 0x1110 <PWM0_Init+0xd0>
		{
			TIMSK |=  PWM0config->TOFE_Interrupt;
    10f4:	a9 e5       	ldi	r26, 0x59	; 89
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e9 e5       	ldi	r30, 0x59	; 89
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	e0 91 8a 00 	lds	r30, 0x008A
    1102:	f0 91 8b 00 	lds	r31, 0x008B
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <PWM0_Init+0xd4>
		}
		else
		{
			u8_retVal = E_NOK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_Non_Inverted == PWM0config->Waveform ||  PWM_Inverted == PWM0config->Waveform )
    1114:	e0 91 8a 00 	lds	r30, 0x008A
    1118:	f0 91 8b 00 	lds	r31, 0x008B
    111c:	83 81       	ldd	r24, Z+3	; 0x03
    111e:	80 32       	cpi	r24, 0x20	; 32
    1120:	39 f0       	breq	.+14     	; 0x1130 <PWM0_Init+0xf0>
    1122:	e0 91 8a 00 	lds	r30, 0x008A
    1126:	f0 91 8b 00 	lds	r31, 0x008B
    112a:	83 81       	ldd	r24, Z+3	; 0x03
    112c:	80 33       	cpi	r24, 0x30	; 48
    112e:	71 f4       	brne	.+28     	; 0x114c <PWM0_Init+0x10c>
		{
			TCCR0 |=  PWM0config->Waveform;
    1130:	a3 e5       	ldi	r26, 0x53	; 83
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e5       	ldi	r30, 0x53	; 83
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	90 81       	ld	r25, Z
    113a:	e0 91 8a 00 	lds	r30, 0x008A
    113e:	f0 91 8b 00 	lds	r31, 0x008B
    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	89 2b       	or	r24, r25
    1146:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <PWM0_Init+0x110>
		}
		else
		{
			u8_retVal = E_NOK;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
		}


	}

	return u8_retVal;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
}
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <PWM0_STOP>:
E_Status_t PWM0_STOP(void)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	E_Status_t u8_retVal = E_NOK;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
	// CLOCK No source
	// TCCR0 = NO_CLCK
	CLEAR_BIT(TCCR0,CS00);
    116c:	a3 e5       	ldi	r26, 0x53	; 83
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8e 7f       	andi	r24, 0xFE	; 254
    1178:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    117a:	a3 e5       	ldi	r26, 0x53	; 83
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 e5       	ldi	r30, 0x53	; 83
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8d 7f       	andi	r24, 0xFD	; 253
    1186:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    1188:	a3 e5       	ldi	r26, 0x53	; 83
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e3 e5       	ldi	r30, 0x53	; 83
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8b 7f       	andi	r24, 0xFB	; 251
    1194:	8c 93       	st	X, r24

	return u8_retVal;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
}
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <PWM0_GetComapreValue>:


E_Status_t PWM0_GetComapreValue(ptr_uint8_t pu8_Ticks)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <PWM0_GetComapreValue+0x6>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
	*pu8_Ticks = OCR0 ;
    11b4:	ec e5       	ldi	r30, 0x5C	; 92
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	ea 81       	ldd	r30, Y+2	; 0x02
    11bc:	fb 81       	ldd	r31, Y+3	; 0x03
    11be:	80 83       	st	Z, r24
	return u8_retVal;
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <PWM0_SetComapreValue>:
E_Status_t PWM0_SetComapreValue(u8 u8_Ticks)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <PWM0_SetComapreValue+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8_Ticks ;
    11de:	ec e5       	ldi	r30, 0x5C	; 92
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
	return u8_retVal;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <PWM0_SetCallBack_OVERFLOW>:

void PWM0_SetCallBack_OVERFLOW(Ptr_VoidFunVoid CallBack )
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <PWM0_SetCallBack_OVERFLOW+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
	PWM0CallBack_OverFlow = CallBack ;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	90 93 83 00 	sts	0x0083, r25
    1208:	80 93 82 00 	sts	0x0082, r24
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <MCAL_SPI_Init>:



static void (*SPI_ISR)(void);

void MCAL_SPI_Init(SPI_ConfigType* config){
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <MCAL_SPI_Init+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9b 83       	std	Y+3, r25	; 0x03
    1224:	8a 83       	std	Y+2, r24	; 0x02

	u8 tempConfig = 0;
    1226:	19 82       	std	Y+1, r1	; 0x01
	//Set mode Master/Slave
	tempConfig |= (config->mode)<<MSTR;
    1228:	ea 81       	ldd	r30, Y+2	; 0x02
    122a:	fb 81       	ldd	r31, Y+3	; 0x03
    122c:	80 81       	ld	r24, Z
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	82 95       	swap	r24
    1234:	92 95       	swap	r25
    1236:	90 7f       	andi	r25, 0xF0	; 240
    1238:	98 27       	eor	r25, r24
    123a:	80 7f       	andi	r24, 0xF0	; 240
    123c:	98 27       	eor	r25, r24
    123e:	98 2f       	mov	r25, r24
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	89 2b       	or	r24, r25
    1244:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK_Polarity)<<CPOL ;// operate only IDEL low// its a bug in software (proteus)
    1246:	ea 81       	ldd	r30, Y+2	; 0x02
    1248:	fb 81       	ldd	r31, Y+3	; 0x03
    124a:	83 81       	ldd	r24, Z+3	; 0x03
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	98 2f       	mov	r25, r24
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	89 2b       	or	r24, r25
    1262:	89 83       	std	Y+1, r24	; 0x01


	//Set CLK Phase
	tempConfig |= (config->Sampling_EDG)<<CPHA ;
    1264:	ea 81       	ldd	r30, Y+2	; 0x02
    1266:	fb 81       	ldd	r31, Y+3	; 0x03
    1268:	84 81       	ldd	r24, Z+4	; 0x04
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	98 2f       	mov	r25, r24
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	89 2b       	or	r24, r25
    127c:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->order)<<DORD ;
    127e:	ea 81       	ldd	r30, Y+2	; 0x02
    1280:	fb 81       	ldd	r31, Y+3	; 0x03
    1282:	85 81       	ldd	r24, Z+5	; 0x05
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	82 95       	swap	r24
    128e:	92 95       	swap	r25
    1290:	90 7f       	andi	r25, 0xF0	; 240
    1292:	98 27       	eor	r25, r24
    1294:	80 7f       	andi	r24, 0xF0	; 240
    1296:	98 27       	eor	r25, r24
    1298:	98 2f       	mov	r25, r24
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	89 2b       	or	r24, r25
    129e:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK)<<SPR0 ;
    12a0:	ea 81       	ldd	r30, Y+2	; 0x02
    12a2:	fb 81       	ldd	r31, Y+3	; 0x03
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	89 2b       	or	r24, r25
    12aa:	89 83       	std	Y+1, r24	; 0x01

	//Set Double SPEED
	SPSR |= (config->DoubleSpedd)<<SPI2X;
    12ac:	ae e2       	ldi	r26, 0x2E	; 46
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ee e2       	ldi	r30, 0x2E	; 46
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	90 81       	ld	r25, Z
    12b6:	ea 81       	ldd	r30, Y+2	; 0x02
    12b8:	fb 81       	ldd	r31, Y+3	; 0x03
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	89 2b       	or	r24, r25
    12be:	8c 93       	st	X, r24

	//Set interrupt
	tempConfig |= (config->interrupt_state)<<SPIE ;
    12c0:	ea 81       	ldd	r30, Y+2	; 0x02
    12c2:	fb 81       	ldd	r31, Y+3	; 0x03
    12c4:	87 81       	ldd	r24, Z+7	; 0x07
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	96 95       	lsr	r25
    12cc:	98 2f       	mov	r25, r24
    12ce:	88 27       	eor	r24, r24
    12d0:	97 95       	ror	r25
    12d2:	87 95       	ror	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	89 2b       	or	r24, r25
    12da:	89 83       	std	Y+1, r24	; 0x01


	//Enable SPI
	tempConfig |= (config->Enable)<<SPE;
    12dc:	ea 81       	ldd	r30, Y+2	; 0x02
    12de:	fb 81       	ldd	r31, Y+3	; 0x03
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	00 24       	eor	r0, r0
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	07 94       	ror	r0
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	07 94       	ror	r0
    12f4:	98 2f       	mov	r25, r24
    12f6:	80 2d       	mov	r24, r0
    12f8:	98 2f       	mov	r25, r24
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	89 2b       	or	r24, r25
    12fe:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= tempConfig;
    1300:	ad e2       	ldi	r26, 0x2D	; 45
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ed e2       	ldi	r30, 0x2D	; 45
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	90 81       	ld	r25, Z
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	89 2b       	or	r24, r25
    130e:	8c 93       	st	X, r24

}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <MCAL_SPI_SendAndReceive>:

u8 MCAL_SPI_SendAndReceive(u8 Copy_Data){
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	0f 92       	push	r0
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	89 83       	std	Y+1, r24	; 0x01

	//PORTC ^= 0xFF;
	SPDR = Copy_Data; //write dtat
    1328:	ef e2       	ldi	r30, 0x2F	; 47
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	80 83       	st	Z, r24

	while( !( SPSR&(1<<SPIF) ) );
    1330:	ee e2       	ldi	r30, 0x2E	; 46
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	88 23       	and	r24, r24
    1338:	dc f7       	brge	.-10     	; 0x1330 <MCAL_SPI_SendAndReceive+0x14>

	return SPDR ;
    133a:	ef e2       	ldi	r30, 0x2F	; 47
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z

}
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <MCAL_SPI_Send>:
void MCAL_SPI_Send(u8 Copy_Data){
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01

	   SPDR = Copy_Data; //write dtat
    1354:	ef e2       	ldi	r30, 0x2F	; 47
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	80 83       	st	Z, r24

		while( !( SPSR&(1<<SPIF) ) );
    135c:	ee e2       	ldi	r30, 0x2E	; 46
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	88 23       	and	r24, r24
    1364:	dc f7       	brge	.-10     	; 0x135c <MCAL_SPI_Send+0x14>
}
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <MCAL_SPI_CheckForCollsion>:
u8 MCAL_SPI_CheckForCollsion(void){
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62

  u8 localData = READ_BIT(SPSR, WCOL);
    1378:	ee e2       	ldi	r30, 0x2E	; 46
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	82 95       	swap	r24
    1380:	86 95       	lsr	r24
    1382:	86 95       	lsr	r24
    1384:	83 70       	andi	r24, 0x03	; 3
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01

  return localData;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <MCAL_SPI_AssignCallBack>:
void MCAL_SPI_AssignCallBack(void (*PCallBack)(void)){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <MCAL_SPI_AssignCallBack+0x6>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01

	SPI_ISR = PCallBack;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	90 93 85 00 	sts	0x0085, r25
    13aa:	80 93 84 00 	sts	0x0084, r24

}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <__vector_12>:
ISR(SPI_STC_vect){
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	2f 93       	push	r18
    13c4:	3f 93       	push	r19
    13c6:	4f 93       	push	r20
    13c8:	5f 93       	push	r21
    13ca:	6f 93       	push	r22
    13cc:	7f 93       	push	r23
    13ce:	8f 93       	push	r24
    13d0:	9f 93       	push	r25
    13d2:	af 93       	push	r26
    13d4:	bf 93       	push	r27
    13d6:	ef 93       	push	r30
    13d8:	ff 93       	push	r31
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62

	SPI_ISR();
    13e2:	e0 91 84 00 	lds	r30, 0x0084
    13e6:	f0 91 85 00 	lds	r31, 0x0085
    13ea:	09 95       	icall

}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	0f 90       	pop	r0
    140e:	1f 90       	pop	r1
    1410:	18 95       	reti

00001412 <MCAL_TWI_Init>:
#define F_CPU 1000000UL

TWI_typedef *GTWIconfig ;

void MCAL_TWI_Init(TWI_typedef *TWIconfig)
{
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <MCAL_TWI_Init+0xa>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
	GTWIconfig = TWIconfig;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	90 93 8d 00 	sts	0x008D, r25
    142c:	80 93 8c 00 	sts	0x008C, r24

	// check master:
	if(TWIconfig->mode == MASTER_RECEIVE || TWIconfig->mode == MASTER_TRANSMIT )
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	80 81       	ld	r24, Z
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	29 f0       	breq	.+10     	; 0x1444 <MCAL_TWI_Init+0x32>
    143a:	e9 81       	ldd	r30, Y+1	; 0x01
    143c:	fa 81       	ldd	r31, Y+2	; 0x02
    143e:	80 81       	ld	r24, Z
    1440:	88 23       	and	r24, r24
    1442:	e9 f4       	brne	.+58     	; 0x147e <MCAL_TWI_Init+0x6c>
	{
		TWBR =  ( (  (F_CPU/TWIconfig->SerialCLK) -16 ) / 2 )  ;  //Per scaler always 1
    1444:	00 e2       	ldi	r16, 0x20	; 32
    1446:	10 e0       	ldi	r17, 0x00	; 0
    1448:	e9 81       	ldd	r30, Y+1	; 0x01
    144a:	fa 81       	ldd	r31, Y+2	; 0x02
    144c:	81 81       	ldd	r24, Z+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	80 e4       	ldi	r24, 0x40	; 64
    1458:	92 e4       	ldi	r25, 0x42	; 66
    145a:	af e0       	ldi	r26, 0x0F	; 15
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 26 19 	call	0x324c	; 0x324c <__udivmodsi4>
    1466:	da 01       	movw	r26, r20
    1468:	c9 01       	movw	r24, r18
    146a:	40 97       	sbiw	r24, 0x10	; 16
    146c:	a1 09       	sbc	r26, r1
    146e:	b1 09       	sbc	r27, r1
    1470:	b6 95       	lsr	r27
    1472:	a7 95       	ror	r26
    1474:	97 95       	ror	r25
    1476:	87 95       	ror	r24
    1478:	f8 01       	movw	r30, r16
    147a:	80 83       	st	Z, r24
    147c:	12 c0       	rjmp	.+36     	; 0x14a2 <MCAL_TWI_Init+0x90>
	}


	// check slave:
	else if(TWIconfig->mode == SLAVE_RECEIVE || TWIconfig->mode == SLAVE_TRANSMIT)
    147e:	e9 81       	ldd	r30, Y+1	; 0x01
    1480:	fa 81       	ldd	r31, Y+2	; 0x02
    1482:	80 81       	ld	r24, Z
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	29 f0       	breq	.+10     	; 0x1492 <MCAL_TWI_Init+0x80>
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	80 81       	ld	r24, Z
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	41 f4       	brne	.+16     	; 0x14a2 <MCAL_TWI_Init+0x90>
	{
		TWAR = TWIconfig->Address_Slave;
    1492:	e2 e2       	ldi	r30, 0x22	; 34
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	a9 81       	ldd	r26, Y+1	; 0x01
    1498:	ba 81       	ldd	r27, Y+2	; 0x02
    149a:	12 96       	adiw	r26, 0x02	; 2
    149c:	8c 91       	ld	r24, X
    149e:	12 97       	sbiw	r26, 0x02	; 2
    14a0:	80 83       	st	Z, r24
	}


}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <MCAL_TWI_Write>:


void MCAL_TWI_Write(u8 Ldata)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
	if(GTWIconfig->mode == MASTER_TRANSMIT)
    14bc:	e0 91 8c 00 	lds	r30, 0x008C
    14c0:	f0 91 8d 00 	lds	r31, 0x008D
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	d9 f5       	brne	.+118    	; 0x1540 <MCAL_TWI_Write+0x90>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);   // send Start Condition
    14ca:	e6 e5       	ldi	r30, 0x56	; 86
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	84 ea       	ldi	r24, 0xA4	; 164
    14d0:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
    14d2:	e6 e5       	ldi	r30, 0x56	; 86
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	88 23       	and	r24, r24
    14da:	dc f7       	brge	.-10     	; 0x14d2 <MCAL_TWI_Write+0x22>
		while ( TWSR  != 0x08 );                      // wait status register to confirm
    14dc:	e1 e2       	ldi	r30, 0x21	; 33
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	88 30       	cpi	r24, 0x08	; 8
    14e4:	d9 f7       	brne	.-10     	; 0x14dc <MCAL_TWI_Write+0x2c>

		TWDR = GTWIconfig->Address_Slave + 0 ;       // write address of slave + W =0 write
    14e6:	a3 e2       	ldi	r26, 0x23	; 35
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e0 91 8c 00 	lds	r30, 0x008C
    14ee:	f0 91 8d 00 	lds	r31, 0x008D
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	8c 93       	st	X, r24
		TWCR = (1<<TWINT) | (1<<TWEN);              // Reset flag of interrupt
    14f6:	e6 e5       	ldi	r30, 0x56	; 86
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	84 e8       	ldi	r24, 0x84	; 132
    14fc:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    14fe:	e6 e5       	ldi	r30, 0x56	; 86
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 23       	and	r24, r24
    1506:	dc f7       	brge	.-10     	; 0x14fe <MCAL_TWI_Write+0x4e>
		while ( TWSR  != 0x18 );                    // wait status register to confirm
    1508:	e1 e2       	ldi	r30, 0x21	; 33
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	88 31       	cpi	r24, 0x18	; 24
    1510:	d9 f7       	brne	.-10     	; 0x1508 <MCAL_TWI_Write+0x58>

		TWDR = Ldata;                             //write data
    1512:	e3 e2       	ldi	r30, 0x23	; 35
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	80 83       	st	Z, r24
		TWCR = (1<<TWINT) | (1<<TWEN);             // Reset flag of interrupt and Enable TWI
    151a:	e6 e5       	ldi	r30, 0x56	; 86
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	84 e8       	ldi	r24, 0x84	; 132
    1520:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1522:	e6 e5       	ldi	r30, 0x56	; 86
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	88 23       	and	r24, r24
    152a:	dc f7       	brge	.-10     	; 0x1522 <MCAL_TWI_Write+0x72>
		while ( TWSR  != 0x28 );                   // wait status register to confirm
    152c:	e1 e2       	ldi	r30, 0x21	; 33
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	88 32       	cpi	r24, 0x28	; 40
    1534:	d9 f7       	brne	.-10     	; 0x152c <MCAL_TWI_Write+0x7c>

		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // stop condition
    1536:	e6 e5       	ldi	r30, 0x56	; 86
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	84 e9       	ldi	r24, 0x94	; 148
    153c:	80 83       	st	Z, r24
    153e:	27 c0       	rjmp	.+78     	; 0x158e <MCAL_TWI_Write+0xde>


	}
	else if(GTWIconfig->mode == MASTER_RECEIVE)
    1540:	e0 91 8c 00 	lds	r30, 0x008C
    1544:	f0 91 8d 00 	lds	r31, 0x008D
    1548:	80 81       	ld	r24, Z
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	01 f5       	brne	.+64     	; 0x158e <MCAL_TWI_Write+0xde>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);   // send Start Condition
    154e:	e6 e5       	ldi	r30, 0x56	; 86
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	84 ea       	ldi	r24, 0xA4	; 164
    1554:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
    1556:	e6 e5       	ldi	r30, 0x56	; 86
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	dc f7       	brge	.-10     	; 0x1556 <MCAL_TWI_Write+0xa6>
		while ( TWSR  != 0x08 );                      // wait status register to confirm
    1560:	e1 e2       	ldi	r30, 0x21	; 33
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	88 30       	cpi	r24, 0x08	; 8
    1568:	d9 f7       	brne	.-10     	; 0x1560 <MCAL_TWI_Write+0xb0>
       // _delay_ms(10);
		TWDR = GTWIconfig->Address_Slave + 0x01 ;       // write address of slave + W =0 write
    156a:	a3 e2       	ldi	r26, 0x23	; 35
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e0 91 8c 00 	lds	r30, 0x008C
    1572:	f0 91 8d 00 	lds	r31, 0x008D
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	8c 93       	st	X, r24
		TWCR = (1<<TWINT) | (1<<TWEN);              // Reset flag of interrupt
    157c:	e6 e5       	ldi	r30, 0x56	; 86
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	84 e8       	ldi	r24, 0x84	; 132
    1582:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1584:	e6 e5       	ldi	r30, 0x56	; 86
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	88 23       	and	r24, r24
    158c:	dc f7       	brge	.-10     	; 0x1584 <MCAL_TWI_Write+0xd4>
		//while ( TWSR  != 0x40 );                    // wait status register to confirm
	}
	if(GTWIconfig->mode == SLAVE_TRANSMIT)
    158e:	e0 91 8c 00 	lds	r30, 0x008C
    1592:	f0 91 8d 00 	lds	r31, 0x008D
    1596:	80 81       	ld	r24, Z
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	69 f4       	brne	.+26     	; 0x15b6 <MCAL_TWI_Write+0x106>
	{
//		TWCR = (1<<TWINT) | (1<<TWEN);               // Enable TWI and Clear flag
//		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
//		while ( TWSR  != 0xA8 );                      // wait status register to confirm

		TWDR = Ldata;                             //write data
    159c:	e3 e2       	ldi	r30, 0x23	; 35
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	80 83       	st	Z, r24
		TWCR = (1<<TWINT) | (1<<TWEN);             // Reset flag of interrupt and Enable TWI
    15a4:	e6 e5       	ldi	r30, 0x56	; 86
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	84 e8       	ldi	r24, 0x84	; 132
    15aa:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    15ac:	e6 e5       	ldi	r30, 0x56	; 86
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 23       	and	r24, r24
    15b4:	dc f7       	brge	.-10     	; 0x15ac <MCAL_TWI_Write+0xfc>
	//	if(GTWIconfig->mode == SLAVE_RECEIVE)  // N/A
	//	{
	//
	//	}

}
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <MCAL_TWI_Read>:


u8 MCAL_TWI_Read(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	u8 Ldata = 0;
    15c8:	19 82       	std	Y+1, r1	; 0x01

	if(GTWIconfig->mode == MASTER_RECEIVE)
    15ca:	e0 91 8c 00 	lds	r30, 0x008C
    15ce:	f0 91 8d 00 	lds	r31, 0x008D
    15d2:	80 81       	ld	r24, Z
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 f4       	brne	.+36     	; 0x15fc <MCAL_TWI_Read+0x3e>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    15d8:	e6 e5       	ldi	r30, 0x56	; 86
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	84 ec       	ldi	r24, 0xC4	; 196
    15de:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    15e0:	e6 e5       	ldi	r30, 0x56	; 86
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	88 23       	and	r24, r24
    15e8:	dc f7       	brge	.-10     	; 0x15e0 <MCAL_TWI_Read+0x22>
		//while ( TWSR  != 0x50 );                   // wait status register to confirm
		Ldata = TWDR ;
    15ea:	e3 e2       	ldi	r30, 0x23	; 35
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	89 83       	std	Y+1, r24	; 0x01

		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // stop condition
    15f2:	e6 e5       	ldi	r30, 0x56	; 86
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	84 e9       	ldi	r24, 0x94	; 148
    15f8:	80 83       	st	Z, r24
    15fa:	38 c0       	rjmp	.+112    	; 0x166c <MCAL_TWI_Read+0xae>
	}

	else if(GTWIconfig->mode == SLAVE_RECEIVE)
    15fc:	e0 91 8c 00 	lds	r30, 0x008C
    1600:	f0 91 8d 00 	lds	r31, 0x008D
    1604:	80 81       	ld	r24, Z
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	c1 f4       	brne	.+48     	; 0x163a <MCAL_TWI_Read+0x7c>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    160a:	e6 e5       	ldi	r30, 0x56	; 86
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	84 ec       	ldi	r24, 0xC4	; 196
    1610:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1612:	e6 e5       	ldi	r30, 0x56	; 86
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	dc f7       	brge	.-10     	; 0x1612 <MCAL_TWI_Read+0x54>
		while ( TWSR  != 0x60 );                   // wait status register to confirm
    161c:	e1 e2       	ldi	r30, 0x21	; 33
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 36       	cpi	r24, 0x60	; 96
    1624:	d9 f7       	brne	.-10     	; 0x161c <MCAL_TWI_Read+0x5e>

		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1626:	e6 e5       	ldi	r30, 0x56	; 86
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	84 ec       	ldi	r24, 0xC4	; 196
    162c:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    162e:	e6 e5       	ldi	r30, 0x56	; 86
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 23       	and	r24, r24
    1636:	dc f7       	brge	.-10     	; 0x162e <MCAL_TWI_Read+0x70>
    1638:	19 c0       	rjmp	.+50     	; 0x166c <MCAL_TWI_Read+0xae>
		//while ( TWSR  != 0x80 );                   // wait status register to confirm
		//Ldata = TWDR ;
	}


	else if(GTWIconfig->mode == SLAVE_TRANSMIT)
    163a:	e0 91 8c 00 	lds	r30, 0x008C
    163e:	f0 91 8d 00 	lds	r31, 0x008D
    1642:	80 81       	ld	r24, Z
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	91 f4       	brne	.+36     	; 0x166c <MCAL_TWI_Read+0xae>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1648:	e6 e5       	ldi	r30, 0x56	; 86
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	84 ec       	ldi	r24, 0xC4	; 196
    164e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1650:	e6 e5       	ldi	r30, 0x56	; 86
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 23       	and	r24, r24
    1658:	dc f7       	brge	.-10     	; 0x1650 <MCAL_TWI_Read+0x92>
		while ( TWSR  != 0xA8 );                   // wait status register to confirm
    165a:	e1 e2       	ldi	r30, 0x21	; 33
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 3a       	cpi	r24, 0xA8	; 168
    1662:	d9 f7       	brne	.-10     	; 0x165a <MCAL_TWI_Read+0x9c>
		Ldata = TWDR ;
    1664:	e3 e2       	ldi	r30, 0x23	; 35
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01


	}

	return Ldata;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <TIMER0_Init>:
//*************************************************************
//********************APIs Implementation**********************
//*************************************************************

E_Status_t TIMER0_Init(ST_TIMER0Config_t *config)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <TIMER0_Init+0x6>
    167c:	0f 92       	push	r0
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01

	if( null == config )
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	19 f4       	brne	.+6      	; 0x1698 <TIMER0_Init+0x22>
	{
		u8_retVal = E_NOK;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	87 c0       	rjmp	.+270    	; 0x17a6 <TIMER0_Init+0x130>
	}
	else
	{
		TIMER0config = config ;
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	90 93 90 00 	sts	0x0090, r25
    16a0:	80 93 8f 00 	sts	0x008F, r24

		if(NORMAL == config->Mode || CTC == config->Mode )
    16a4:	ea 81       	ldd	r30, Y+2	; 0x02
    16a6:	fb 81       	ldd	r31, Y+3	; 0x03
    16a8:	80 81       	ld	r24, Z
    16aa:	88 23       	and	r24, r24
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <TIMER0_Init+0x42>
    16ae:	ea 81       	ldd	r30, Y+2	; 0x02
    16b0:	fb 81       	ldd	r31, Y+3	; 0x03
    16b2:	80 81       	ld	r24, Z
    16b4:	88 30       	cpi	r24, 0x08	; 8
    16b6:	c1 f4       	brne	.+48     	; 0x16e8 <TIMER0_Init+0x72>
		{
			TCCR0 &= ~(config->Mode ) ;
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	98 2f       	mov	r25, r24
    16c4:	ea 81       	ldd	r30, Y+2	; 0x02
    16c6:	fb 81       	ldd	r31, Y+3	; 0x03
    16c8:	80 81       	ld	r24, Z
    16ca:	80 95       	com	r24
    16cc:	89 23       	and	r24, r25
    16ce:	8c 93       	st	X, r24
			TCCR0 |= config->Mode ;
    16d0:	a3 e5       	ldi	r26, 0x53	; 83
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e3 e5       	ldi	r30, 0x53	; 83
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	90 81       	ld	r25, Z
    16da:	ea 81       	ldd	r30, Y+2	; 0x02
    16dc:	fb 81       	ldd	r31, Y+3	; 0x03
    16de:	80 81       	ld	r24, Z
    16e0:	89 2b       	or	r24, r25
    16e2:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <TIMER0_Init+0x76>
		}
		else
		{
			u8_retVal = E_NOK;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
		}

		if(NO_CLCK <= config->Clok && EXTERNAL_CLK_RISING >= config->Clok )
    16ec:	ea 81       	ldd	r30, Y+2	; 0x02
    16ee:	fb 81       	ldd	r31, Y+3	; 0x03
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	88 30       	cpi	r24, 0x08	; 8
    16f4:	c0 f4       	brcc	.+48     	; 0x1726 <TIMER0_Init+0xb0>
		{
			TCCR0 &= ~(config->Clok) ;
    16f6:	a3 e5       	ldi	r26, 0x53	; 83
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e3 e5       	ldi	r30, 0x53	; 83
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	98 2f       	mov	r25, r24
    1702:	ea 81       	ldd	r30, Y+2	; 0x02
    1704:	fb 81       	ldd	r31, Y+3	; 0x03
    1706:	81 81       	ldd	r24, Z+1	; 0x01
    1708:	80 95       	com	r24
    170a:	89 23       	and	r24, r25
    170c:	8c 93       	st	X, r24
			TCCR0 |= config->Clok ;
    170e:	a3 e5       	ldi	r26, 0x53	; 83
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e3 e5       	ldi	r30, 0x53	; 83
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	90 81       	ld	r25, Z
    1718:	ea 81       	ldd	r30, Y+2	; 0x02
    171a:	fb 81       	ldd	r31, Y+3	; 0x03
    171c:	81 81       	ldd	r24, Z+1	; 0x01
    171e:	89 2b       	or	r24, r25
    1720:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    1722:	19 82       	std	Y+1, r1	; 0x01
    1724:	02 c0       	rjmp	.+4      	; 0x172a <TIMER0_Init+0xb4>
		}
		else
		{
			u8_retVal = E_NOK;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	89 83       	std	Y+1, r24	; 0x01
		}

		if( OCMI_ENABLE == config->OCME_Interrupt || OCMI_DISABLE == config->OCME_Interrupt )
    172a:	ea 81       	ldd	r30, Y+2	; 0x02
    172c:	fb 81       	ldd	r31, Y+3	; 0x03
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	29 f0       	breq	.+10     	; 0x173e <TIMER0_Init+0xc8>
    1734:	ea 81       	ldd	r30, Y+2	; 0x02
    1736:	fb 81       	ldd	r31, Y+3	; 0x03
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	88 23       	and	r24, r24
    173c:	99 f4       	brne	.+38     	; 0x1764 <TIMER0_Init+0xee>
		{
			TIMSK &= ~(OCMI_ENABLE) ;
    173e:	a9 e5       	ldi	r26, 0x59	; 89
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e9 e5       	ldi	r30, 0x59	; 89
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8d 7f       	andi	r24, 0xFD	; 253
    174a:	8c 93       	st	X, r24
			TIMSK |= config->OCME_Interrupt ;
    174c:	a9 e5       	ldi	r26, 0x59	; 89
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e9 e5       	ldi	r30, 0x59	; 89
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	90 81       	ld	r25, Z
    1756:	ea 81       	ldd	r30, Y+2	; 0x02
    1758:	fb 81       	ldd	r31, Y+3	; 0x03
    175a:	82 81       	ldd	r24, Z+2	; 0x02
    175c:	89 2b       	or	r24, r25
    175e:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <TIMER0_Init+0xf2>
		}
		else
		{
			u8_retVal = E_NOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
		}

		if(TOF_ENABLE == config->TOFE_Interrupt || TOF_DISABLE == config->TOFE_Interrupt )
    1768:	ea 81       	ldd	r30, Y+2	; 0x02
    176a:	fb 81       	ldd	r31, Y+3	; 0x03
    176c:	83 81       	ldd	r24, Z+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	29 f0       	breq	.+10     	; 0x177c <TIMER0_Init+0x106>
    1772:	ea 81       	ldd	r30, Y+2	; 0x02
    1774:	fb 81       	ldd	r31, Y+3	; 0x03
    1776:	83 81       	ldd	r24, Z+3	; 0x03
    1778:	88 23       	and	r24, r24
    177a:	99 f4       	brne	.+38     	; 0x17a2 <TIMER0_Init+0x12c>
		{

			TIMSK &= ~(TOF_ENABLE) ;
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8e 7f       	andi	r24, 0xFE	; 254
    1788:	8c 93       	st	X, r24
			TIMSK |= config->TOFE_Interrupt ;
    178a:	a9 e5       	ldi	r26, 0x59	; 89
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e9 e5       	ldi	r30, 0x59	; 89
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	ea 81       	ldd	r30, Y+2	; 0x02
    1796:	fb 81       	ldd	r31, Y+3	; 0x03
    1798:	83 81       	ldd	r24, Z+3	; 0x03
    179a:	89 2b       	or	r24, r25
    179c:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    179e:	19 82       	std	Y+1, r1	; 0x01
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <TIMER0_Init+0x130>
		}
		else
		{
			u8_retVal = E_NOK;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01



	}

return 	u8_retVal;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <TIMER0_STOP>:
E_Status_t TIMER0_STOP(void)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	E_Status_t u8_retVal = E_OK;
    17be:	19 82       	std	Y+1, r1	; 0x01
	// CLOCK No source
	// TCCR0 = NO_CLCK
	CLEAR_BIT(TCCR0,CS00);
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8e 7f       	andi	r24, 0xFE	; 254
    17cc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    17ce:	a3 e5       	ldi	r26, 0x53	; 83
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e3 e5       	ldi	r30, 0x53	; 83
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8d 7f       	andi	r24, 0xFD	; 253
    17da:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    17dc:	a3 e5       	ldi	r26, 0x53	; 83
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e3 e5       	ldi	r30, 0x53	; 83
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8b 7f       	andi	r24, 0xFB	; 251
    17e8:	8c 93       	st	X, r24
	return 	u8_retVal;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <TIMER0_GetComapreValue>:


E_Status_t TIMER0_GetComapreValue(ptr_uint8_t pu8_Ticks)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <TIMER0_GetComapreValue+0x6>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
	*pu8_Ticks = OCR0 ;
    1808:	ec e5       	ldi	r30, 0x5C	; 92
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	80 83       	st	Z, r24
	return 	u8_retVal;
    1814:	89 81       	ldd	r24, Y+1	; 0x01

}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <TIMER0_SetComapreValue>:
E_Status_t TIMER0_SetComapreValue(u8 u8_Ticks)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <TIMER0_SetComapreValue+0x6>
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    182e:	19 82       	std	Y+1, r1	; 0x01
    OCR0 = u8_Ticks ;
    1830:	ec e5       	ldi	r30, 0x5C	; 92
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	80 83       	st	Z, r24
	return 	u8_retVal;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <TIMER0_GetCounterValue>:

E_Status_t TIMER0_GetCounterValue(ptr_uint8_t pu8_Ticks)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <TIMER0_GetCounterValue+0x6>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9b 83       	std	Y+3, r25	; 0x03
    1852:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    1854:	19 82       	std	Y+1, r1	; 0x01
	*pu8_Ticks = TCNT0 ;
    1856:	e2 e5       	ldi	r30, 0x52	; 82
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	ea 81       	ldd	r30, Y+2	; 0x02
    185e:	fb 81       	ldd	r31, Y+3	; 0x03
    1860:	80 83       	st	Z, r24
	return 	u8_retVal;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <TIMER0_SetCounterValue>:
E_Status_t TIMER0_SetCounterValue(u8 u8_Ticks)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <TIMER0_SetCounterValue+0x6>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    187c:	19 82       	std	Y+1, r1	; 0x01
	TCNT0 = u8_Ticks ;
    187e:	e2 e5       	ldi	r30, 0x52	; 82
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
	return 	u8_retVal;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <TIMER0_GetOverflowValue>:

E_Status_t TIMER0_GetOverflowValue(ptr_uint8_t pu8_Ticks)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <TIMER0_GetOverflowValue+0x6>
    1898:	0f 92       	push	r0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	9b 83       	std	Y+3, r25	; 0x03
    18a0:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    18a2:	19 82       	std	Y+1, r1	; 0x01
   *pu8_Ticks = u8_TOFNUMBER ;
    18a4:	80 91 8e 00 	lds	r24, 0x008E
    18a8:	ea 81       	ldd	r30, Y+2	; 0x02
    18aa:	fb 81       	ldd	r31, Y+3	; 0x03
    18ac:	80 83       	st	Z, r24
	return 	u8_retVal;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01

}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <TIMER0_SetOverflowValue>:
E_Status_t TIMER0_SetOverflowValue(u8 u8_Ticks)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <TIMER0_SetOverflowValue+0x6>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
	u8_TOFNUMBER = u8_Ticks;
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 93 8e 00 	sts	0x008E, r24
	return 	u8_retVal;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <TIMER0_SetCallBack_OVERFLOW>:

E_Status_t TIMER0_SetCallBack_OVERFLOW(Ptr_VoidFunVoid CallBack )
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <TIMER0_SetCallBack_OVERFLOW+0x6>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9b 83       	std	Y+3, r25	; 0x03
    18ea:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    CallBack_OverFlow = CallBack ;
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	90 93 87 00 	sts	0x0087, r25
    18f6:	80 93 86 00 	sts	0x0086, r24
	return 	u8_retVal;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <TIMER0_SetCallBack_CompareMatch>:
E_Status_t TIMER0_SetCallBack_CompareMatch(Ptr_VoidFunVoid CallBack )
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <TIMER0_SetCallBack_CompareMatch+0x6>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9b 83       	std	Y+3, r25	; 0x03
    1916:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    1918:	19 82       	std	Y+1, r1	; 0x01
    CallBack_Cmpare_Match = CallBack;
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	90 93 89 00 	sts	0x0089, r25
    1922:	80 93 88 00 	sts	0x0088, r24
	return 	u8_retVal;
    1926:	89 81       	ldd	r24, Y+1	; 0x01
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <__vector_10>:


// ISR

ISR(TIMER0_COMP_vect)
{   u8_TOFNUMBER++;
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	80 91 8e 00 	lds	r24, 0x008E
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	80 93 8e 00 	sts	0x008E, r24
	CallBack_Cmpare_Match();
    1968:	e0 91 88 00 	lds	r30, 0x0088
    196c:	f0 91 89 00 	lds	r31, 0x0089
    1970:	09 95       	icall
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	u8_TOFNUMBER++;
    19c2:	80 91 8e 00 	lds	r24, 0x008E
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 8e 00 	sts	0x008E, r24
	CallBack_OverFlow();
    19cc:	e0 91 86 00 	lds	r30, 0x0086
    19d0:	f0 91 87 00 	lds	r31, 0x0087
    19d4:	09 95       	icall


}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti

000019fc <UART_Init>:
 */
#include "UART.h"
void (*GP_IRQ_CallBack)(void);

void UART_Init(void)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62

	UBRRL = 51;    // 9600 buad rate
    1a04:	e9 e2       	ldi	r30, 0x29	; 41
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	83 e3       	ldi	r24, 0x33	; 51
    1a0a:	80 83       	st	Z, r24

   CLEAR_BIT(UCSRA, U2X);
    1a0c:	ab e2       	ldi	r26, 0x2B	; 43
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e2       	ldi	r30, 0x2B	; 43
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8d 7f       	andi	r24, 0xFD	; 253
    1a18:	8c 93       	st	X, r24
   * all by default we wantn't  to config it
   *
   * */

	//Enable UART Receive and Transmit
	SET_BIT(UCSRB,TXEN);
    1a1a:	aa e2       	ldi	r26, 0x2A	; 42
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ea e2       	ldi	r30, 0x2A	; 42
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 60       	ori	r24, 0x08	; 8
    1a26:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    1a28:	aa e2       	ldi	r26, 0x2A	; 42
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ea e2       	ldi	r30, 0x2A	; 42
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 61       	ori	r24, 0x10	; 16
    1a34:	8c 93       	st	X, r24


}
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <UART_SendChar>:
void UART_SendChar(u8 Data)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
	while (!READ_BIT(UCSRA,UDRE));
    1a48:	eb e2       	ldi	r30, 0x2B	; 43
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	82 95       	swap	r24
    1a50:	86 95       	lsr	r24
    1a52:	87 70       	andi	r24, 0x07	; 7
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	90 70       	andi	r25, 0x00	; 0
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	a1 f3       	breq	.-24     	; 0x1a48 <UART_SendChar+0xc>
	UDR = Data;
    1a60:	ec e2       	ldi	r30, 0x2C	; 44
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	80 83       	st	Z, r24


}
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <UART_ReceiveChar>:
u8 UART_ReceiveChar(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62

	while (!READ_BIT(UCSRA,RXC));
    1a7a:	eb e2       	ldi	r30, 0x2B	; 43
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	dc f7       	brge	.-10     	; 0x1a7a <UART_ReceiveChar+0xa>
	u8 temp = UDR;
    1a84:	ec e2       	ldi	r30, 0x2C	; 44
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <UART_SendString>:

void UART_SendString(u8 *ptr){
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <UART_SendString+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <UART_SendString+0x24>


	while(*ptr){
		UART_SendChar(*ptr);
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	80 81       	ld	r24, Z
    1aac:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
		ptr++;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(u8 *ptr){


	while(*ptr){
    1aba:	e9 81       	ldd	r30, Y+1	; 0x01
    1abc:	fa 81       	ldd	r31, Y+2	; 0x02
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	89 f7       	brne	.-30     	; 0x1aa6 <UART_SendString+0x10>
		UART_SendChar(*ptr);
		ptr++;
	}
	UART_SendChar(STOPCHAR);
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <UART_Send32>:

void UART_Send32(u32 data){
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	2a 97       	sbiw	r28, 0x0a	; 10
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	2b 83       	std	Y+3, r18	; 0x03
    1aea:	3c 83       	std	Y+4, r19	; 0x04
    1aec:	4d 83       	std	Y+5, r20	; 0x05
    1aee:	5e 83       	std	Y+6, r21	; 0x06
    1af0:	6f 83       	std	Y+7, r22	; 0x07
    1af2:	78 87       	std	Y+8, r23	; 0x08
    1af4:	89 87       	std	Y+9, r24	; 0x09
    1af6:	9a 87       	std	Y+10, r25	; 0x0a
	u32 *ptr = &data;
    1af8:	ce 01       	movw	r24, r28
    1afa:	03 96       	adiw	r24, 0x03	; 3
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
	UART_SendChar(ptr[0]);
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	20 81       	ld	r18, Z
    1b06:	31 81       	ldd	r19, Z+1	; 0x01
    1b08:	42 81       	ldd	r20, Z+2	; 0x02
    1b0a:	53 81       	ldd	r21, Z+3	; 0x03
    1b0c:	64 81       	ldd	r22, Z+4	; 0x04
    1b0e:	75 81       	ldd	r23, Z+5	; 0x05
    1b10:	86 81       	ldd	r24, Z+6	; 0x06
    1b12:	97 81       	ldd	r25, Z+7	; 0x07
    1b14:	82 2f       	mov	r24, r18
    1b16:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
	UART_SendChar(ptr[1]);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	fc 01       	movw	r30, r24
    1b20:	38 96       	adiw	r30, 0x08	; 8
    1b22:	20 81       	ld	r18, Z
    1b24:	31 81       	ldd	r19, Z+1	; 0x01
    1b26:	42 81       	ldd	r20, Z+2	; 0x02
    1b28:	53 81       	ldd	r21, Z+3	; 0x03
    1b2a:	64 81       	ldd	r22, Z+4	; 0x04
    1b2c:	75 81       	ldd	r23, Z+5	; 0x05
    1b2e:	86 81       	ldd	r24, Z+6	; 0x06
    1b30:	97 81       	ldd	r25, Z+7	; 0x07
    1b32:	82 2f       	mov	r24, r18
    1b34:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
	UART_SendChar(ptr[2]);
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	70 96       	adiw	r30, 0x10	; 16
    1b40:	20 81       	ld	r18, Z
    1b42:	31 81       	ldd	r19, Z+1	; 0x01
    1b44:	42 81       	ldd	r20, Z+2	; 0x02
    1b46:	53 81       	ldd	r21, Z+3	; 0x03
    1b48:	64 81       	ldd	r22, Z+4	; 0x04
    1b4a:	75 81       	ldd	r23, Z+5	; 0x05
    1b4c:	86 81       	ldd	r24, Z+6	; 0x06
    1b4e:	97 81       	ldd	r25, Z+7	; 0x07
    1b50:	82 2f       	mov	r24, r18
    1b52:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
	UART_SendChar(ptr[3]);
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	78 96       	adiw	r30, 0x18	; 24
    1b5e:	20 81       	ld	r18, Z
    1b60:	31 81       	ldd	r19, Z+1	; 0x01
    1b62:	42 81       	ldd	r20, Z+2	; 0x02
    1b64:	53 81       	ldd	r21, Z+3	; 0x03
    1b66:	64 81       	ldd	r22, Z+4	; 0x04
    1b68:	75 81       	ldd	r23, Z+5	; 0x05
    1b6a:	86 81       	ldd	r24, Z+6	; 0x06
    1b6c:	97 81       	ldd	r25, Z+7	; 0x07
    1b6e:	82 2f       	mov	r24, r18
    1b70:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <UART_SendChar>
}
    1b74:	2a 96       	adiw	r28, 0x0a	; 10
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <UART_Receive32>:

u32 UART_Receive32(void){
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	2a 97       	sbiw	r28, 0x0a	; 10
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
   u32 *ptr, data;
   ptr = &data;
    1baa:	ce 01       	movw	r24, r28
    1bac:	03 96       	adiw	r24, 0x03	; 3
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
   ptr[0] = UART_ReceiveChar();
    1bb2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bca:	20 83       	st	Z, r18
    1bcc:	31 83       	std	Z+1, r19	; 0x01
    1bce:	42 83       	std	Z+2, r20	; 0x02
    1bd0:	53 83       	std	Z+3, r21	; 0x03
    1bd2:	64 83       	std	Z+4, r22	; 0x04
    1bd4:	75 83       	std	Z+5, r23	; 0x05
    1bd6:	86 83       	std	Z+6, r24	; 0x06
    1bd8:	97 83       	std	Z+7, r25	; 0x07
   ptr[1] = UART_ReceiveChar();
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	8c 01       	movw	r16, r24
    1be0:	08 5f       	subi	r16, 0xF8	; 248
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	20 83       	st	Z, r18
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	31 83       	std	Z+1, r19	; 0x01
    1c00:	f8 01       	movw	r30, r16
    1c02:	42 83       	std	Z+2, r20	; 0x02
    1c04:	f8 01       	movw	r30, r16
    1c06:	53 83       	std	Z+3, r21	; 0x03
    1c08:	f8 01       	movw	r30, r16
    1c0a:	64 83       	std	Z+4, r22	; 0x04
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	75 83       	std	Z+5, r23	; 0x05
    1c10:	f8 01       	movw	r30, r16
    1c12:	86 83       	std	Z+6, r24	; 0x06
    1c14:	f8 01       	movw	r30, r16
    1c16:	97 83       	std	Z+7, r25	; 0x07
   ptr[2] = UART_ReceiveChar();
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	8c 01       	movw	r16, r24
    1c1e:	00 5f       	subi	r16, 0xF0	; 240
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	f8 01       	movw	r30, r16
    1c38:	20 83       	st	Z, r18
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	31 83       	std	Z+1, r19	; 0x01
    1c3e:	f8 01       	movw	r30, r16
    1c40:	42 83       	std	Z+2, r20	; 0x02
    1c42:	f8 01       	movw	r30, r16
    1c44:	53 83       	std	Z+3, r21	; 0x03
    1c46:	f8 01       	movw	r30, r16
    1c48:	64 83       	std	Z+4, r22	; 0x04
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	75 83       	std	Z+5, r23	; 0x05
    1c4e:	f8 01       	movw	r30, r16
    1c50:	86 83       	std	Z+6, r24	; 0x06
    1c52:	f8 01       	movw	r30, r16
    1c54:	97 83       	std	Z+7, r25	; 0x07
   ptr[3] = UART_ReceiveChar();
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	08 5e       	subi	r16, 0xE8	; 232
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	f8 01       	movw	r30, r16
    1c76:	20 83       	st	Z, r18
    1c78:	f8 01       	movw	r30, r16
    1c7a:	31 83       	std	Z+1, r19	; 0x01
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	42 83       	std	Z+2, r20	; 0x02
    1c80:	f8 01       	movw	r30, r16
    1c82:	53 83       	std	Z+3, r21	; 0x03
    1c84:	f8 01       	movw	r30, r16
    1c86:	64 83       	std	Z+4, r22	; 0x04
    1c88:	f8 01       	movw	r30, r16
    1c8a:	75 83       	std	Z+5, r23	; 0x05
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	86 83       	std	Z+6, r24	; 0x06
    1c90:	f8 01       	movw	r30, r16
    1c92:	97 83       	std	Z+7, r25	; 0x07

   return data;
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	4d 81       	ldd	r20, Y+5	; 0x05
    1c9a:	5e 81       	ldd	r21, Y+6	; 0x06
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	a2 2e       	mov	r10, r18
    1ca6:	b3 2e       	mov	r11, r19
    1ca8:	c4 2e       	mov	r12, r20
    1caa:	d5 2e       	mov	r13, r21
    1cac:	e6 2e       	mov	r14, r22
    1cae:	f7 2e       	mov	r15, r23
    1cb0:	08 2f       	mov	r16, r24
    1cb2:	19 2f       	mov	r17, r25
}
    1cb4:	2a 2d       	mov	r18, r10
    1cb6:	3b 2d       	mov	r19, r11
    1cb8:	4c 2d       	mov	r20, r12
    1cba:	5d 2d       	mov	r21, r13
    1cbc:	6e 2d       	mov	r22, r14
    1cbe:	7f 2d       	mov	r23, r15
    1cc0:	80 2f       	mov	r24, r16
    1cc2:	91 2f       	mov	r25, r17
    1cc4:	2a 96       	adiw	r28, 0x0a	; 10
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	08 95       	ret

00001ce6 <UART_ReceiveString>:

void UART_ReceiveString(u8 *ptr, u8 MAX){
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <UART_ReceiveString+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <UART_ReceiveString+0x8>
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, temp;
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
	temp = UART_ReceiveChar();
    1cfc:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	10 c0       	rjmp	.+32     	; 0x1d24 <UART_ReceiveString+0x3e>
	while( i<MAX && temp != STOPCHAR ){
		ptr[i] = temp;
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e2 0f       	add	r30, r18
    1d12:	f3 1f       	adc	r31, r19
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	80 83       	st	Z, r24
		temp = UART_ReceiveChar();
    1d18:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <UART_ReceiveChar>
    1d1c:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(u8 *ptr, u8 MAX){
	u8 i = 0, temp;
	temp = UART_ReceiveChar();
	while( i<MAX && temp != STOPCHAR ){
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	98 17       	cp	r25, r24
    1d2a:	18 f4       	brcc	.+6      	; 0x1d32 <UART_ReceiveString+0x4c>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	8d 30       	cpi	r24, 0x0D	; 13
    1d30:	49 f7       	brne	.-46     	; 0x1d04 <UART_ReceiveString+0x1e>
		ptr[i] = temp;
		temp = UART_ReceiveChar();
		i++;
	}
	ptr[i] = '\0';
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	e2 0f       	add	r30, r18
    1d40:	f3 1f       	adc	r31, r19
    1d42:	10 82       	st	Z, r1
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <UART_Receive_periodChech>:

u8 UART_Receive_periodChech(u8 *ptr){
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <UART_Receive_periodChech+0x6>
    1d5a:	0f 92       	push	r0
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01

	if(READ_BIT(UCSRA,RXC))
    1d64:	eb e2       	ldi	r30, 0x2B	; 43
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 23       	and	r24, r24
    1d6c:	4c f4       	brge	.+18     	; 0x1d80 <UART_Receive_periodChech+0x2c>
	{
		*ptr = UDR;
    1d6e:	ec e2       	ldi	r30, 0x2C	; 44
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	80 83       	st	Z, r24
		return 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <UART_Receive_periodChech+0x2e>

	}
	else
	{
		return 0;
    1d80:	1b 82       	std	Y+3, r1	; 0x03
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <UART_RX_Interrupt_Enable>:

void UART_RX_Interrupt_Enable(void)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,RXCIE);
    1d98:	ab e2       	ldi	r26, 0x2B	; 43
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e2       	ldi	r30, 0x2B	; 43
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 68       	ori	r24, 0x80	; 128
    1da4:	8c 93       	st	X, r24
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <UART_RX_Interrupt_Disable>:
void UART_RX_Interrupt_Disable(void)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,RXCIE);
    1db4:	ab e2       	ldi	r26, 0x2B	; 43
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e2       	ldi	r30, 0x2B	; 43
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8f 77       	andi	r24, 0x7F	; 127
    1dc0:	8c 93       	st	X, r24
}
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <UART_TX_Interrupt_Enable>:
void UART_TX_Interrupt_Enable(void)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,TXCIE);
    1dd0:	ab e2       	ldi	r26, 0x2B	; 43
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	eb e2       	ldi	r30, 0x2B	; 43
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 64       	ori	r24, 0x40	; 64
    1ddc:	8c 93       	st	X, r24
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <UART_TX_Interrupt_Disable>:
void UART_TX_Interrupt_Disable(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,TXCIE);
    1dec:	ab e2       	ldi	r26, 0x2B	; 43
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e2       	ldi	r30, 0x2B	; 43
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	8c 93       	st	X, r24
}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <UART_SendNoblock>:


void UART_SendNoblock(u8 data){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1e0c:	ec e2       	ldi	r30, 0x2C	; 44
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	80 83       	st	Z, r24
}
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <UART_ReceiveNoblock>:
u8 UART_ReceiveNoblock(void){
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62


	return UDR;
    1e24:	ec e2       	ldi	r30, 0x2C	; 44
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <__vector_13>:


ISR(USART_RXC_vect)
{
    1e30:	1f 92       	push	r1
    1e32:	0f 92       	push	r0
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	0f 92       	push	r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	2f 93       	push	r18
    1e3c:	3f 93       	push	r19
    1e3e:	4f 93       	push	r20
    1e40:	5f 93       	push	r21
    1e42:	6f 93       	push	r22
    1e44:	7f 93       	push	r23
    1e46:	8f 93       	push	r24
    1e48:	9f 93       	push	r25
    1e4a:	af 93       	push	r26
    1e4c:	bf 93       	push	r27
    1e4e:	ef 93       	push	r30
    1e50:	ff 93       	push	r31
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    1e5a:	e0 91 91 00 	lds	r30, 0x0091
    1e5e:	f0 91 92 00 	lds	r31, 0x0092
    1e62:	09 95       	icall
}
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	ff 91       	pop	r31
    1e6a:	ef 91       	pop	r30
    1e6c:	bf 91       	pop	r27
    1e6e:	af 91       	pop	r26
    1e70:	9f 91       	pop	r25
    1e72:	8f 91       	pop	r24
    1e74:	7f 91       	pop	r23
    1e76:	6f 91       	pop	r22
    1e78:	5f 91       	pop	r21
    1e7a:	4f 91       	pop	r20
    1e7c:	3f 91       	pop	r19
    1e7e:	2f 91       	pop	r18
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <__vector_15>:

ISR(USART_TXC_vect)
{
    1e8a:	1f 92       	push	r1
    1e8c:	0f 92       	push	r0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	0f 92       	push	r0
    1e92:	11 24       	eor	r1, r1
    1e94:	2f 93       	push	r18
    1e96:	3f 93       	push	r19
    1e98:	4f 93       	push	r20
    1e9a:	5f 93       	push	r21
    1e9c:	6f 93       	push	r22
    1e9e:	7f 93       	push	r23
    1ea0:	8f 93       	push	r24
    1ea2:	9f 93       	push	r25
    1ea4:	af 93       	push	r26
    1ea6:	bf 93       	push	r27
    1ea8:	ef 93       	push	r30
    1eaa:	ff 93       	push	r31
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    1eb4:	e0 91 91 00 	lds	r30, 0x0091
    1eb8:	f0 91 92 00 	lds	r31, 0x0092
    1ebc:	09 95       	icall
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	bf 91       	pop	r27
    1ec8:	af 91       	pop	r26
    1eca:	9f 91       	pop	r25
    1ecc:	8f 91       	pop	r24
    1ece:	7f 91       	pop	r23
    1ed0:	6f 91       	pop	r22
    1ed2:	5f 91       	pop	r21
    1ed4:	4f 91       	pop	r20
    1ed6:	3f 91       	pop	r19
    1ed8:	2f 91       	pop	r18
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	0f 90       	pop	r0
    1ee0:	1f 90       	pop	r1
    1ee2:	18 95       	reti

00001ee4 <MCAL_WDT_ON>:




void MCAL_WDT_ON(void)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ( 1 << WDE | 1 << WDP1 | 1<<WDP2);    // Time out 1sec
    1eec:	a1 e4       	ldi	r26, 0x41	; 65
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e1 e4       	ldi	r30, 0x41	; 65
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8e 60       	ori	r24, 0x0E	; 14
    1ef8:	8c 93       	st	X, r24
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <MCAL_WDT_OFF>:

void MCAL_WDT_OFF(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDE | 1<<WDTOE);
    1f08:	a1 e4       	ldi	r26, 0x41	; 65
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e1 e4       	ldi	r30, 0x41	; 65
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	88 61       	ori	r24, 0x18	; 24
    1f14:	8c 93       	st	X, r24
	WDTCR = 0x00;
    1f16:	e1 e4       	ldi	r30, 0x41	; 65
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	10 82       	st	Z, r1
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <HAL_MAX7221Init>:
#include "../MCAL/SPI.h"
#include "MAX7221.h"
#include <avr/io.h>


void HAL_MAX7221Init(){
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	28 97       	sbiw	r28, 0x08	; 8
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigType config;
		config.CLK = SPI_Fosc4;
    1f36:	1a 82       	std	Y+2, r1	; 0x02
		config.DoubleSpedd = SPI_DOUBLE_SPEDD_DISABLE;
    1f38:	1f 82       	std	Y+7, r1	; 0x07
		config.CLK_Polarity = SPI_IDL_CLK_LOW;
    1f3a:	1c 82       	std	Y+4, r1	; 0x04
		config.Sampling_EDG = SPI_First_EDG;
    1f3c:	1d 82       	std	Y+5, r1	; 0x05
		config.Enable= SPI_Enable_ON;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	8b 83       	std	Y+3, r24	; 0x03
		config.interrupt_state = SPI_interruptDisable;
    1f42:	18 86       	std	Y+8, r1	; 0x08
		config.order = SPI_MSB;
    1f44:	1e 82       	std	Y+6, r1	; 0x06
		config.mode = SPI_MODE_Master;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	89 83       	std	Y+1, r24	; 0x01


		DDRB |=  1<<MOSI  | 1<<SS   | 1<<SCK;
    1f4a:	a7 e3       	ldi	r26, 0x37	; 55
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e3       	ldi	r30, 0x37	; 55
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	80 6b       	ori	r24, 0xB0	; 176
    1f56:	8c 93       	st	X, r24
		/* Set MISO input */
		DDRB &= ~(1<<MISO);
    1f58:	a7 e3       	ldi	r26, 0x37	; 55
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e7 e3       	ldi	r30, 0x37	; 55
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 7b       	andi	r24, 0xBF	; 191
    1f64:	8c 93       	st	X, r24

		 MCAL_SPI_Init(&config);
    1f66:	ce 01       	movw	r24, r28
    1f68:	01 96       	adiw	r24, 0x01	; 1
    1f6a:	0e 94 0b 09 	call	0x1216	; 0x1216 <MCAL_SPI_Init>
}
    1f6e:	28 96       	adiw	r28, 0x08	; 8
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <HAL_MAX7221_Send>:

void HAL_MAX7221_Send(u8 cmd, u8 data){
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <HAL_MAX7221_Send+0x6>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	6a 83       	std	Y+2, r22	; 0x02



	PORTB &= ~(1<<SS);  //drive low
    1f8e:	a8 e3       	ldi	r26, 0x38	; 56
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e8 e3       	ldi	r30, 0x38	; 56
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 7e       	andi	r24, 0xEF	; 239
    1f9a:	8c 93       	st	X, r24
	MCAL_SPI_Send(cmd);  //write CMD
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	0e 94 a4 09 	call	0x1348	; 0x1348 <MCAL_SPI_Send>
	MCAL_SPI_Send(data); //Write Data
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	0e 94 a4 09 	call	0x1348	; 0x1348 <MCAL_SPI_Send>
	PORTB |= (1<<SS);   // drive High
    1fa8:	a8 e3       	ldi	r26, 0x38	; 56
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e8 e3       	ldi	r30, 0x38	; 56
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 61       	ori	r24, 0x10	; 16
    1fb4:	8c 93       	st	X, r24




}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <Keypad_init>:
char key_row[]={R0, R1, R2, R3};
char key_column[]={C0, C1, C2, C3};


void Keypad_init()
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);
    1fc8:	a1 e3       	ldi	r26, 0x31	; 49
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e1 e3       	ldi	r30, 0x31	; 49
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 7f       	andi	r24, 0xF0	; 240
    1fd4:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
    1fd6:	a1 e3       	ldi	r26, 0x31	; 49
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e1 e3       	ldi	r30, 0x31	; 49
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 6f       	ori	r24, 0xF0	; 240
    1fe2:	8c 93       	st	X, r24
	KEYPAD_PORT =0xff; //active PUR for input pins
    1fe4:	e2 e3       	ldi	r30, 0x32	; 50
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	80 83       	st	Z, r24



}
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <Keypad_getkey>:
char Keypad_getkey()
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	27 97       	sbiw	r28, 0x07	; 7
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for(i=0; i<4; i++){
    2006:	1c 82       	std	Y+4, r1	; 0x04
    2008:	1b 82       	std	Y+3, r1	; 0x03
    200a:	06 c1       	rjmp	.+524    	; 0x2218 <Keypad_getkey+0x226>

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
    200c:	a2 e3       	ldi	r26, 0x32	; 50
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e2 e3       	ldi	r30, 0x32	; 50
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 6f       	ori	r24, 0xF0	; 240
    2018:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<key_column[i]);
    201a:	a2 e3       	ldi	r26, 0x32	; 50
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e2 e3       	ldi	r30, 0x32	; 50
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	e3 58       	subi	r30, 0x83	; 131
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 81       	ld	r24, Z
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <Keypad_getkey+0x50>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <Keypad_getkey+0x4c>
    2046:	80 95       	com	r24
    2048:	84 23       	and	r24, r20
    204a:	8c 93       	st	X, r24

		for(j=0; j<4; j++){
    204c:	1a 82       	std	Y+2, r1	; 0x02
    204e:	19 82       	std	Y+1, r1	; 0x01
    2050:	d8 c0       	rjmp	.+432    	; 0x2202 <Keypad_getkey+0x210>

			if(!(keypadPIN & (1<<key_row[j]))){
    2052:	e0 e3       	ldi	r30, 0x30	; 48
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	fc 01       	movw	r30, r24
    2062:	e7 58       	subi	r30, 0x87	; 135
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a9 01       	movw	r20, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <Keypad_getkey+0x82>
    2070:	55 95       	asr	r21
    2072:	47 95       	ror	r20
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <Keypad_getkey+0x7e>
    2078:	ca 01       	movw	r24, r20
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	90 70       	andi	r25, 0x00	; 0
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	09 f0       	breq	.+2      	; 0x2084 <Keypad_getkey+0x92>
    2082:	ba c0       	rjmp	.+372    	; 0x21f8 <Keypad_getkey+0x206>

				while(!(keypadPIN & (1<<key_row[j])));
    2084:	e0 e3       	ldi	r30, 0x30	; 48
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	fc 01       	movw	r30, r24
    2094:	e7 58       	subi	r30, 0x87	; 135
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	80 81       	ld	r24, Z
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <Keypad_getkey+0xb4>
    20a2:	55 95       	asr	r21
    20a4:	47 95       	ror	r20
    20a6:	8a 95       	dec	r24
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <Keypad_getkey+0xb0>
    20aa:	ca 01       	movw	r24, r20
    20ac:	81 70       	andi	r24, 0x01	; 1
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	41 f3       	breq	.-48     	; 0x2084 <Keypad_getkey+0x92>

				switch(i){
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	9f 83       	std	Y+7, r25	; 0x07
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	4e 81       	ldd	r20, Y+6	; 0x06
    20be:	5f 81       	ldd	r21, Y+7	; 0x07
    20c0:	41 30       	cpi	r20, 0x01	; 1
    20c2:	51 05       	cpc	r21, r1
    20c4:	c1 f1       	breq	.+112    	; 0x2136 <Keypad_getkey+0x144>
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	91 05       	cpc	r25, r1
    20ce:	34 f4       	brge	.+12     	; 0x20dc <Keypad_getkey+0xea>
    20d0:	4e 81       	ldd	r20, Y+6	; 0x06
    20d2:	5f 81       	ldd	r21, Y+7	; 0x07
    20d4:	41 15       	cp	r20, r1
    20d6:	51 05       	cpc	r21, r1
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <Keypad_getkey+0x104>
    20da:	8b c0       	rjmp	.+278    	; 0x21f2 <Keypad_getkey+0x200>
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	9f 81       	ldd	r25, Y+7	; 0x07
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	91 05       	cpc	r25, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <Keypad_getkey+0xf6>
    20e6:	47 c0       	rjmp	.+142    	; 0x2176 <Keypad_getkey+0x184>
    20e8:	4e 81       	ldd	r20, Y+6	; 0x06
    20ea:	5f 81       	ldd	r21, Y+7	; 0x07
    20ec:	43 30       	cpi	r20, 0x03	; 3
    20ee:	51 05       	cpc	r21, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <Keypad_getkey+0x102>
    20f2:	60 c0       	rjmp	.+192    	; 0x21b4 <Keypad_getkey+0x1c2>
    20f4:	7e c0       	rjmp	.+252    	; 0x21f2 <Keypad_getkey+0x200>

				case 0:
					if(0 == j) return '7';
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	19 f4       	brne	.+6      	; 0x2104 <Keypad_getkey+0x112>
    20fe:	57 e3       	ldi	r21, 0x37	; 55
    2100:	5d 83       	std	Y+5, r21	; 0x05
    2102:	92 c0       	rjmp	.+292    	; 0x2228 <Keypad_getkey+0x236>
					else if(1 == j) return '4';
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	19 f4       	brne	.+6      	; 0x2114 <Keypad_getkey+0x122>
    210e:	84 e3       	ldi	r24, 0x34	; 52
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8a c0       	rjmp	.+276    	; 0x2228 <Keypad_getkey+0x236>
					else if(2 == j) return '1';
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	91 05       	cpc	r25, r1
    211c:	19 f4       	brne	.+6      	; 0x2124 <Keypad_getkey+0x132>
    211e:	91 e3       	ldi	r25, 0x31	; 49
    2120:	9d 83       	std	Y+5, r25	; 0x05
    2122:	82 c0       	rjmp	.+260    	; 0x2228 <Keypad_getkey+0x236>
					else if(3 == j) return '@';
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	91 05       	cpc	r25, r1
    212c:	09 f0       	breq	.+2      	; 0x2130 <Keypad_getkey+0x13e>
    212e:	64 c0       	rjmp	.+200    	; 0x21f8 <Keypad_getkey+0x206>
    2130:	40 e4       	ldi	r20, 0x40	; 64
    2132:	4d 83       	std	Y+5, r20	; 0x05
    2134:	79 c0       	rjmp	.+242    	; 0x2228 <Keypad_getkey+0x236>
					break;
				case 1:
					if(0 == j) return '8';
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	19 f4       	brne	.+6      	; 0x2144 <Keypad_getkey+0x152>
    213e:	58 e3       	ldi	r21, 0x38	; 56
    2140:	5d 83       	std	Y+5, r21	; 0x05
    2142:	72 c0       	rjmp	.+228    	; 0x2228 <Keypad_getkey+0x236>
					else if(1 == j) return '5';
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	19 f4       	brne	.+6      	; 0x2154 <Keypad_getkey+0x162>
    214e:	85 e3       	ldi	r24, 0x35	; 53
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	6a c0       	rjmp	.+212    	; 0x2228 <Keypad_getkey+0x236>
					else if(2 == j) return '2';
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	82 30       	cpi	r24, 0x02	; 2
    215a:	91 05       	cpc	r25, r1
    215c:	19 f4       	brne	.+6      	; 0x2164 <Keypad_getkey+0x172>
    215e:	92 e3       	ldi	r25, 0x32	; 50
    2160:	9d 83       	std	Y+5, r25	; 0x05
    2162:	62 c0       	rjmp	.+196    	; 0x2228 <Keypad_getkey+0x236>
					else if(3 == j) return '0';
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	09 f0       	breq	.+2      	; 0x2170 <Keypad_getkey+0x17e>
    216e:	44 c0       	rjmp	.+136    	; 0x21f8 <Keypad_getkey+0x206>
    2170:	40 e3       	ldi	r20, 0x30	; 48
    2172:	4d 83       	std	Y+5, r20	; 0x05
    2174:	59 c0       	rjmp	.+178    	; 0x2228 <Keypad_getkey+0x236>
					break;
				case 2:
					if(0 == j) return '9';
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	19 f4       	brne	.+6      	; 0x2184 <Keypad_getkey+0x192>
    217e:	59 e3       	ldi	r21, 0x39	; 57
    2180:	5d 83       	std	Y+5, r21	; 0x05
    2182:	52 c0       	rjmp	.+164    	; 0x2228 <Keypad_getkey+0x236>
					else if(1 == j) return '6';
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	91 05       	cpc	r25, r1
    218c:	19 f4       	brne	.+6      	; 0x2194 <Keypad_getkey+0x1a2>
    218e:	86 e3       	ldi	r24, 0x36	; 54
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	4a c0       	rjmp	.+148    	; 0x2228 <Keypad_getkey+0x236>
					else if(2 == j) return '3';
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	91 05       	cpc	r25, r1
    219c:	19 f4       	brne	.+6      	; 0x21a4 <Keypad_getkey+0x1b2>
    219e:	93 e3       	ldi	r25, 0x33	; 51
    21a0:	9d 83       	std	Y+5, r25	; 0x05
    21a2:	42 c0       	rjmp	.+132    	; 0x2228 <Keypad_getkey+0x236>
					else if(3 == j) return '=';
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	29 f5       	brne	.+74     	; 0x21f8 <Keypad_getkey+0x206>
    21ae:	4d e3       	ldi	r20, 0x3D	; 61
    21b0:	4d 83       	std	Y+5, r20	; 0x05
    21b2:	3a c0       	rjmp	.+116    	; 0x2228 <Keypad_getkey+0x236>
					break;
				case 3:
					if(0 == j) return '/';
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	19 f4       	brne	.+6      	; 0x21c2 <Keypad_getkey+0x1d0>
    21bc:	5f e2       	ldi	r21, 0x2F	; 47
    21be:	5d 83       	std	Y+5, r21	; 0x05
    21c0:	33 c0       	rjmp	.+102    	; 0x2228 <Keypad_getkey+0x236>
					else if(1 == j) return '*';
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	19 f4       	brne	.+6      	; 0x21d2 <Keypad_getkey+0x1e0>
    21cc:	8a e2       	ldi	r24, 0x2A	; 42
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	2b c0       	rjmp	.+86     	; 0x2228 <Keypad_getkey+0x236>
					else if(2 == j) return '-';
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	91 05       	cpc	r25, r1
    21da:	19 f4       	brne	.+6      	; 0x21e2 <Keypad_getkey+0x1f0>
    21dc:	9d e2       	ldi	r25, 0x2D	; 45
    21de:	9d 83       	std	Y+5, r25	; 0x05
    21e0:	23 c0       	rjmp	.+70     	; 0x2228 <Keypad_getkey+0x236>
					else if(3 == j) return '+';
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	83 30       	cpi	r24, 0x03	; 3
    21e8:	91 05       	cpc	r25, r1
    21ea:	31 f4       	brne	.+12     	; 0x21f8 <Keypad_getkey+0x206>
    21ec:	4b e2       	ldi	r20, 0x2B	; 43
    21ee:	4d 83       	std	Y+5, r20	; 0x05
    21f0:	1b c0       	rjmp	.+54     	; 0x2228 <Keypad_getkey+0x236>
					break;
				default:
					return 'A';
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	5d 83       	std	Y+5, r21	; 0x05
    21f6:	18 c0       	rjmp	.+48     	; 0x2228 <Keypad_getkey+0x236>
	for(i=0; i<4; i++){

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	84 30       	cpi	r24, 0x04	; 4
    2208:	91 05       	cpc	r25, r1
    220a:	0c f4       	brge	.+2      	; 0x220e <Keypad_getkey+0x21c>
    220c:	22 cf       	rjmp	.-444    	; 0x2052 <Keypad_getkey+0x60>

}
char Keypad_getkey()
{
	int i,j;
	for(i=0; i<4; i++){
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	91 05       	cpc	r25, r1
    2220:	0c f4       	brge	.+2      	; 0x2224 <Keypad_getkey+0x232>
    2222:	f4 ce       	rjmp	.-536    	; 0x200c <Keypad_getkey+0x1a>
		}


	}

	return 'A';
    2224:	81 e4       	ldi	r24, 0x41	; 65
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	8d 81       	ldd	r24, Y+5	; 0x05

}
    222a:	27 96       	adiw	r28, 0x07	; 7
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_clear_screen>:
 *      Author: bassam
 */

#include "lcd.h"

void LCD_clear_screen(){
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <LCD_lcd_kick>:

void LCD_lcd_kick(){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	2e 97       	sbiw	r28, 0x0e	; 14
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    2264:	a2 e3       	ldi	r26, 0x32	; 50
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e2 e3       	ldi	r30, 0x32	; 50
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	88 60       	ori	r24, 0x08	; 8
    2270:	8c 93       	st	X, r24
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a8 e4       	ldi	r26, 0x48	; 72
    2278:	b2 e4       	ldi	r27, 0x42	; 66
    227a:	8b 87       	std	Y+11, r24	; 0x0b
    227c:	9c 87       	std	Y+12, r25	; 0x0c
    227e:	ad 87       	std	Y+13, r26	; 0x0d
    2280:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	4a ef       	ldi	r20, 0xFA	; 250
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8f 83       	std	Y+7, r24	; 0x07
    229c:	98 87       	std	Y+8, r25	; 0x08
    229e:	a9 87       	std	Y+9, r26	; 0x09
    22a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <LCD_lcd_kick+0x74>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
    22c2:	3f c0       	rjmp	.+126    	; 0x2342 <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	3f ef       	ldi	r19, 0xFF	; 255
    22d0:	4f e7       	ldi	r20, 0x7F	; 127
    22d2:	57 e4       	ldi	r21, 0x47	; 71
    22d4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    22d8:	18 16       	cp	r1, r24
    22da:	4c f5       	brge	.+82     	; 0x232e <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	0f c0       	rjmp	.+30     	; 0x2324 <LCD_lcd_kick+0xd4>
    2306:	88 ec       	ldi	r24, 0xC8	; 200
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_lcd_kick+0xc2>
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	69 f7       	brne	.-38     	; 0x2306 <LCD_lcd_kick+0xb6>
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_lcd_kick+0xfe>
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    2356:	a2 e3       	ldi	r26, 0x32	; 50
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e2 e3       	ldi	r30, 0x32	; 50
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	87 7f       	andi	r24, 0xF7	; 247
    2362:	8c 93       	st	X, r24
}
    2364:	2e 96       	adiw	r28, 0x0e	; 14
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <LCD_GOTO_XY+0x6>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	39 f4       	brne	.+14     	; 0x2398 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	80 31       	cpi	r24, 0x10	; 16
    238e:	20 f4       	brcc	.+8      	; 0x2398 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	80 58       	subi	r24, 0x80	; 128
    2394:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	39 f4       	brne	.+14     	; 0x23ac <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	80 31       	cpi	r24, 0x10	; 16
    23a2:	20 f4       	brcc	.+8      	; 0x23ac <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	80 54       	subi	r24, 0x40	; 64
    23a8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
		}
	}
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <LCD_INIT>:

void LCD_INIT(){
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	e4 97       	sbiw	r28, 0x34	; 52
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 ea       	ldi	r26, 0xA0	; 160
    23d0:	b1 e4       	ldi	r27, 0x41	; 65
    23d2:	89 ab       	std	Y+49, r24	; 0x31
    23d4:	9a ab       	std	Y+50, r25	; 0x32
    23d6:	ab ab       	std	Y+51, r26	; 0x33
    23d8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	69 a9       	ldd	r22, Y+49	; 0x31
    23dc:	7a a9       	ldd	r23, Y+50	; 0x32
    23de:	8b a9       	ldd	r24, Y+51	; 0x33
    23e0:	9c a9       	ldd	r25, Y+52	; 0x34
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8d a7       	std	Y+45, r24	; 0x2d
    23f4:	9e a7       	std	Y+46, r25	; 0x2e
    23f6:	af a7       	std	Y+47, r26	; 0x2f
    23f8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    23fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    23fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    23fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2400:	98 a9       	ldd	r25, Y+48	; 0x30
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <LCD_INIT+0x66>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c a7       	std	Y+44, r25	; 0x2c
    2418:	8b a7       	std	Y+43, r24	; 0x2b
    241a:	3f c0       	rjmp	.+126    	; 0x249a <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    241c:	6d a5       	ldd	r22, Y+45	; 0x2d
    241e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2420:	8f a5       	ldd	r24, Y+47	; 0x2f
    2422:	98 a9       	ldd	r25, Y+48	; 0x30
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	69 a9       	ldd	r22, Y+49	; 0x31
    2436:	7a a9       	ldd	r23, Y+50	; 0x32
    2438:	8b a9       	ldd	r24, Y+51	; 0x33
    243a:	9c a9       	ldd	r25, Y+52	; 0x34
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c a7       	std	Y+44, r25	; 0x2c
    245a:	8b a7       	std	Y+43, r24	; 0x2b
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_INIT+0xc6>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9a a7       	std	Y+42, r25	; 0x2a
    2464:	89 a7       	std	Y+41, r24	; 0x29
    2466:	89 a5       	ldd	r24, Y+41	; 0x29
    2468:	9a a5       	ldd	r25, Y+42	; 0x2a
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_INIT+0xb4>
    246e:	9a a7       	std	Y+42, r25	; 0x2a
    2470:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8b a5       	ldd	r24, Y+43	; 0x2b
    2474:	9c a5       	ldd	r25, Y+44	; 0x2c
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9c a7       	std	Y+44, r25	; 0x2c
    247a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8b a5       	ldd	r24, Y+43	; 0x2b
    247e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <LCD_INIT+0xa8>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6d a5       	ldd	r22, Y+45	; 0x2d
    2488:	7e a5       	ldd	r23, Y+46	; 0x2e
    248a:	8f a5       	ldd	r24, Y+47	; 0x2f
    248c:	98 a9       	ldd	r25, Y+48	; 0x30
    248e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c a7       	std	Y+44, r25	; 0x2c
    2498:	8b a7       	std	Y+43, r24	; 0x2b
    249a:	8b a5       	ldd	r24, Y+43	; 0x2b
    249c:	9c a5       	ldd	r25, Y+44	; 0x2c
    249e:	98 a7       	std	Y+40, r25	; 0x28
    24a0:	8f a3       	std	Y+39, r24	; 0x27
    24a2:	8f a1       	ldd	r24, Y+39	; 0x27
    24a4:	98 a5       	ldd	r25, Y+40	; 0x28
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_INIT+0xf0>
    24aa:	98 a7       	std	Y+40, r25	; 0x28
    24ac:	8f a3       	std	Y+39, r24	; 0x27
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
*/
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    24ae:	a1 e3       	ldi	r26, 0x31	; 49
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e1 e3       	ldi	r30, 0x31	; 49
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8e 60       	ori	r24, 0x0E	; 14
    24ba:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    24bc:	a2 e3       	ldi	r26, 0x32	; 50
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e2 e3       	ldi	r30, 0x32	; 50
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	81 7f       	andi	r24, 0xF1	; 241
    24c8:	8c 93       	st	X, r24
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e7       	ldi	r26, 0x70	; 112
    24d0:	b1 e4       	ldi	r27, 0x41	; 65
    24d2:	8b a3       	std	Y+35, r24	; 0x23
    24d4:	9c a3       	std	Y+36, r25	; 0x24
    24d6:	ad a3       	std	Y+37, r26	; 0x25
    24d8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	6b a1       	ldd	r22, Y+35	; 0x23
    24dc:	7c a1       	ldd	r23, Y+36	; 0x24
    24de:	8d a1       	ldd	r24, Y+37	; 0x25
    24e0:	9e a1       	ldd	r25, Y+38	; 0x26
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8f 8f       	std	Y+31, r24	; 0x1f
    24f4:	98 a3       	std	Y+32, r25	; 0x20
    24f6:	a9 a3       	std	Y+33, r26	; 0x21
    24f8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    24fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24fc:	78 a1       	ldd	r23, Y+32	; 0x20
    24fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2500:	9a a1       	ldd	r25, Y+34	; 0x22
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <LCD_INIT+0x166>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9e 8f       	std	Y+30, r25	; 0x1e
    2518:	8d 8f       	std	Y+29, r24	; 0x1d
    251a:	3f c0       	rjmp	.+126    	; 0x259a <LCD_INIT+0x1e4>
	else if (__tmp > 65535)
    251c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    251e:	78 a1       	ldd	r23, Y+32	; 0x20
    2520:	89 a1       	ldd	r24, Y+33	; 0x21
    2522:	9a a1       	ldd	r25, Y+34	; 0x22
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <LCD_INIT+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	6b a1       	ldd	r22, Y+35	; 0x23
    2536:	7c a1       	ldd	r23, Y+36	; 0x24
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	8d 8f       	std	Y+29, r24	; 0x1d
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_INIT+0x1c6>
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 8f       	std	Y+28, r25	; 0x1c
    2564:	8b 8f       	std	Y+27, r24	; 0x1b
    2566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_INIT+0x1b4>
    256e:	9c 8f       	std	Y+28, r25	; 0x1c
    2570:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2574:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9e 8f       	std	Y+30, r25	; 0x1e
    257a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    257e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <LCD_INIT+0x1a8>
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <LCD_INIT+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2588:	78 a1       	ldd	r23, Y+32	; 0x20
    258a:	89 a1       	ldd	r24, Y+33	; 0x21
    258c:	9a a1       	ldd	r25, Y+34	; 0x22
    258e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 8f       	std	Y+30, r25	; 0x1e
    2598:	8d 8f       	std	Y+29, r24	; 0x1d
    259a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    259c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    259e:	9a 8f       	std	Y+26, r25	; 0x1a
    25a0:	89 8f       	std	Y+25, r24	; 0x19
    25a2:	89 8d       	ldd	r24, Y+25	; 0x19
    25a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_INIT+0x1f0>
    25aa:	9a 8f       	std	Y+26, r25	; 0x1a
    25ac:	89 8f       	std	Y+25, r24	; 0x19
	//DataDir_LCD_PORT = 0xFF;
	_delay_ms(15);
	LCD_clear_screen();
    25ae:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_clear_screen>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	a8 ec       	ldi	r26, 0xC8	; 200
    25b8:	b2 e4       	ldi	r27, 0x42	; 66
    25ba:	8d 8b       	std	Y+21, r24	; 0x15
    25bc:	9e 8b       	std	Y+22, r25	; 0x16
    25be:	af 8b       	std	Y+23, r26	; 0x17
    25c0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25c2:	6d 89       	ldd	r22, Y+21	; 0x15
    25c4:	7e 89       	ldd	r23, Y+22	; 0x16
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	2b ea       	ldi	r18, 0xAB	; 171
    25cc:	3a ea       	ldi	r19, 0xAA	; 170
    25ce:	4a e2       	ldi	r20, 0x2A	; 42
    25d0:	50 e4       	ldi	r21, 0x40	; 64
    25d2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	89 8b       	std	Y+17, r24	; 0x11
    25dc:	9a 8b       	std	Y+18, r25	; 0x12
    25de:	ab 8b       	std	Y+19, r26	; 0x13
    25e0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25e2:	69 89       	ldd	r22, Y+17	; 0x11
    25e4:	7a 89       	ldd	r23, Y+18	; 0x12
    25e6:	8b 89       	ldd	r24, Y+19	; 0x13
    25e8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	1c f4       	brge	.+6      	; 0x2600 <LCD_INIT+0x24a>
		__ticks = 1;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	88 8b       	std	Y+16, r24	; 0x10
    25fe:	91 c0       	rjmp	.+290    	; 0x2722 <LCD_INIT+0x36c>
	else if (__tmp > 255)
    2600:	69 89       	ldd	r22, Y+17	; 0x11
    2602:	7a 89       	ldd	r23, Y+18	; 0x12
    2604:	8b 89       	ldd	r24, Y+19	; 0x13
    2606:	9c 89       	ldd	r25, Y+20	; 0x14
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	53 e4       	ldi	r21, 0x43	; 67
    2610:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	0c f0       	brlt	.+2      	; 0x261a <LCD_INIT+0x264>
    2618:	7b c0       	rjmp	.+246    	; 0x2710 <LCD_INIT+0x35a>
	{
		_delay_ms(__us / 1000.0);
    261a:	6d 89       	ldd	r22, Y+21	; 0x15
    261c:	7e 89       	ldd	r23, Y+22	; 0x16
    261e:	8f 89       	ldd	r24, Y+23	; 0x17
    2620:	98 8d       	ldd	r25, Y+24	; 0x18
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a e7       	ldi	r20, 0x7A	; 122
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8c 87       	std	Y+12, r24	; 0x0c
    2634:	9d 87       	std	Y+13, r25	; 0x0d
    2636:	ae 87       	std	Y+14, r26	; 0x0e
    2638:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	6c 85       	ldd	r22, Y+12	; 0x0c
    263c:	7d 85       	ldd	r23, Y+13	; 0x0d
    263e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2640:	9f 85       	ldd	r25, Y+15	; 0x0f
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a ef       	ldi	r20, 0xFA	; 250
    2648:	54 e4       	ldi	r21, 0x44	; 68
    264a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	88 87       	std	Y+8, r24	; 0x08
    2654:	99 87       	std	Y+9, r25	; 0x09
    2656:	aa 87       	std	Y+10, r26	; 0x0a
    2658:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    265a:	68 85       	ldd	r22, Y+8	; 0x08
    265c:	79 85       	ldd	r23, Y+9	; 0x09
    265e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2660:	9b 85       	ldd	r25, Y+11	; 0x0b
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <LCD_INIT+0x2c6>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9f 83       	std	Y+7, r25	; 0x07
    2678:	8e 83       	std	Y+6, r24	; 0x06
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <LCD_INIT+0x344>
	else if (__tmp > 65535)
    267c:	68 85       	ldd	r22, Y+8	; 0x08
    267e:	79 85       	ldd	r23, Y+9	; 0x09
    2680:	8a 85       	ldd	r24, Y+10	; 0x0a
    2682:	9b 85       	ldd	r25, Y+11	; 0x0b
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <LCD_INIT+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	6c 85       	ldd	r22, Y+12	; 0x0c
    2696:	7d 85       	ldd	r23, Y+13	; 0x0d
    2698:	8e 85       	ldd	r24, Y+14	; 0x0e
    269a:	9f 85       	ldd	r25, Y+15	; 0x0f
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <LCD_INIT+0x326>
    26be:	88 ec       	ldi	r24, 0xC8	; 200
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9d 83       	std	Y+5, r25	; 0x05
    26c4:	8c 83       	std	Y+4, r24	; 0x04
    26c6:	8c 81       	ldd	r24, Y+4	; 0x04
    26c8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_INIT+0x314>
    26ce:	9d 83       	std	Y+5, r25	; 0x05
    26d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8e 81       	ldd	r24, Y+6	; 0x06
    26d4:	9f 81       	ldd	r25, Y+7	; 0x07
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9f 83       	std	Y+7, r25	; 0x07
    26da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8e 81       	ldd	r24, Y+6	; 0x06
    26de:	9f 81       	ldd	r25, Y+7	; 0x07
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <LCD_INIT+0x308>
    26e4:	24 c0       	rjmp	.+72     	; 0x272e <LCD_INIT+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	68 85       	ldd	r22, Y+8	; 0x08
    26e8:	79 85       	ldd	r23, Y+9	; 0x09
    26ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    26ee:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9f 83       	std	Y+7, r25	; 0x07
    26f8:	8e 83       	std	Y+6, r24	; 0x06
    26fa:	8e 81       	ldd	r24, Y+6	; 0x06
    26fc:	9f 81       	ldd	r25, Y+7	; 0x07
    26fe:	9b 83       	std	Y+3, r25	; 0x03
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_INIT+0x350>
    270a:	9b 83       	std	Y+3, r25	; 0x03
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	0f c0       	rjmp	.+30     	; 0x272e <LCD_INIT+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2710:	69 89       	ldd	r22, Y+17	; 0x11
    2712:	7a 89       	ldd	r23, Y+18	; 0x12
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	88 8b       	std	Y+16, r24	; 0x10
    2722:	88 89       	ldd	r24, Y+16	; 0x10
    2724:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	8a 95       	dec	r24
    272a:	f1 f7       	brne	.-4      	; 0x2728 <LCD_INIT+0x372>
    272c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    272e:	88 e3       	ldi	r24, 0x38	; 56
    2730:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    2734:	86 e0       	ldi	r24, 0x06	; 6
    2736:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
    2740:	8f e0       	ldi	r24, 0x0F	; 15
    2742:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>

}
    2746:	e4 96       	adiw	r28, 0x34	; 52
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <LCD_check_lcd_isbusy+0x6>
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    2762:	e4 e3       	ldi	r30, 0x34	; 52
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	e4 e3       	ldi	r30, 0x34	; 52
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    276e:	a2 e3       	ldi	r26, 0x32	; 50
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e2 e3       	ldi	r30, 0x32	; 50
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	84 60       	ori	r24, 0x04	; 4
    277a:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    277c:	a2 e3       	ldi	r26, 0x32	; 50
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e2 e3       	ldi	r30, 0x32	; 50
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8d 7f       	andi	r24, 0xFD	; 253
    2788:	8c 93       	st	X, r24
	LCD_lcd_kick();
    278a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    278e:	e4 e3       	ldi	r30, 0x34	; 52
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	e4 e3       	ldi	r30, 0x34	; 52
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    279c:	a2 e3       	ldi	r26, 0x32	; 50
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e2 e3       	ldi	r30, 0x32	; 50
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8b 7f       	andi	r24, 0xFB	; 251
    27a8:	8c 93       	st	X, r24
	
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	2f 97       	sbiw	r28, 0x0f	; 15
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    27ca:	0e 94 ac 13 	call	0x2758	; 0x2758 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    27ce:	e5 e3       	ldi	r30, 0x35	; 53
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d4:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
    27d6:	a2 e3       	ldi	r26, 0x32	; 50
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e2 e3       	ldi	r30, 0x32	; 50
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	89 7f       	andi	r24, 0xF9	; 249
    27e2:	8c 93       	st	X, r24
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e8       	ldi	r26, 0x80	; 128
    27ea:	bf e3       	ldi	r27, 0x3F	; 63
    27ec:	8b 87       	std	Y+11, r24	; 0x0b
    27ee:	9c 87       	std	Y+12, r25	; 0x0c
    27f0:	ad 87       	std	Y+13, r26	; 0x0d
    27f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a ef       	ldi	r20, 0xFA	; 250
    2802:	54 e4       	ldi	r21, 0x44	; 68
    2804:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8f 83       	std	Y+7, r24	; 0x07
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	a9 87       	std	Y+9, r26	; 0x09
    2812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <LCD_WRITE_COMMAND+0xe2>
    2878:	88 ec       	ldi	r24, 0xC8	; 200
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_WRITE_COMMAND+0xd0>
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <LCD_WRITE_COMMAND+0xc4>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_WRITE_COMMAND+0x10c>
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    28c8:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    28cc:	2f 96       	adiw	r28, 0x0f	; 15
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	2f 97       	sbiw	r28, 0x0f	; 15
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    28f4:	0e 94 ac 13 	call	0x2758	; 0x2758 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    28f8:	e5 e3       	ldi	r30, 0x35	; 53
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fe:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    2900:	a2 e3       	ldi	r26, 0x32	; 50
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	e2 e3       	ldi	r30, 0x32	; 50
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8b 7f       	andi	r24, 0xFB	; 251
    290c:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    290e:	a2 e3       	ldi	r26, 0x32	; 50
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e2 e3       	ldi	r30, 0x32	; 50
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	82 60       	ori	r24, 0x02	; 2
    291a:	8c 93       	st	X, r24
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e8       	ldi	r26, 0x80	; 128
    2922:	bf e3       	ldi	r27, 0x3F	; 63
    2924:	8b 87       	std	Y+11, r24	; 0x0b
    2926:	9c 87       	std	Y+12, r25	; 0x0c
    2928:	ad 87       	std	Y+13, r26	; 0x0d
    292a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292c:	6b 85       	ldd	r22, Y+11	; 0x0b
    292e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4a ef       	ldi	r20, 0xFA	; 250
    293a:	54 e4       	ldi	r21, 0x44	; 68
    293c:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	8f 83       	std	Y+7, r24	; 0x07
    2946:	98 87       	std	Y+8, r25	; 0x08
    2948:	a9 87       	std	Y+9, r26	; 0x09
    294a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	2c f4       	brge	.+10     	; 0x296e <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	3f c0       	rjmp	.+126    	; 0x29ec <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	3f ef       	ldi	r19, 0xFF	; 255
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	57 e4       	ldi	r21, 0x47	; 71
    297e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2982:	18 16       	cp	r1, r24
    2984:	4c f5       	brge	.+82     	; 0x29d8 <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2986:	6b 85       	ldd	r22, Y+11	; 0x0b
    2988:	7c 85       	ldd	r23, Y+12	; 0x0c
    298a:	8d 85       	ldd	r24, Y+13	; 0x0d
    298c:	9e 85       	ldd	r25, Y+14	; 0x0e
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e2       	ldi	r20, 0x20	; 32
    2994:	51 e4       	ldi	r21, 0x41	; 65
    2996:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <LCD_WRITE_CHAR+0xf0>
    29b0:	88 ec       	ldi	r24, 0xC8	; 200
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9c 83       	std	Y+4, r25	; 0x04
    29b6:	8b 83       	std	Y+3, r24	; 0x03
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_WRITE_CHAR+0xde>
    29c0:	9c 83       	std	Y+4, r25	; 0x04
    29c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <LCD_WRITE_CHAR+0xd2>
    29d6:	14 c0       	rjmp	.+40     	; 0x2a00 <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_WRITE_CHAR+0x11a>
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    2a00:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    2a04:	2f 96       	adiw	r28, 0x0f	; 15
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <LCD_WRITE_STRING+0x6>
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <LCD_WRITE_STRING+0x8>
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    2a26:	1a 82       	std	Y+2, r1	; 0x02
    2a28:	19 82       	std	Y+1, r1	; 0x01
    2a2a:	27 c0       	rjmp	.+78     	; 0x2a7a <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	9a 83       	std	Y+2, r25	; 0x02
    2a34:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    2a36:	eb 81       	ldd	r30, Y+3	; 0x03
    2a38:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3a:	20 81       	ld	r18, Z
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	01 96       	adiw	r24, 0x01	; 1
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	82 2f       	mov	r24, r18
    2a48:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
		if (count == 16)
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	80 31       	cpi	r24, 0x10	; 16
    2a52:	91 05       	cpc	r25, r1
    2a54:	29 f4       	brne	.+10     	; 0x2a60 <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_GOTO_XY>
    2a5e:	0d c0       	rjmp	.+26     	; 0x2a7a <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	80 32       	cpi	r24, 0x20	; 32
    2a66:	91 05       	cpc	r25, r1
    2a68:	41 f4       	brne	.+16     	; 0x2a7a <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    2a6a:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_GOTO_XY>
			count = 0;
    2a76:	1a 82       	std	Y+2, r1	; 0x02
    2a78:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    2a7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 23       	and	r24, r24
    2a82:	a1 f6       	brne	.-88     	; 0x2a2c <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <LCD_custom_character>:


void LCD_custom_character(){
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	aa 97       	sbiw	r28, 0x2a	; 42
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITE_COMMAND(64);
    2aa6:	80 e4       	ldi	r24, 0x40	; 64
    2aa8:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(14);
    2ab2:	8e e0       	ldi	r24, 0x0E	; 14
    2ab4:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    2ab8:	81 e1       	ldi	r24, 0x11	; 17
    2aba:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(2);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2ac4:	84 e0       	ldi	r24, 0x04	; 4
    2ac6:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2aca:	84 e0       	ldi	r24, 0x04	; 4
    2acc:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2ad6:	84 e0       	ldi	r24, 0x04	; 4
    2ad8:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    2adc:	80 e8       	ldi	r24, 0x80	; 128
    2ade:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a0 e2       	ldi	r26, 0x20	; 32
    2aee:	b1 e4       	ldi	r27, 0x41	; 65
    2af0:	8f a3       	std	Y+39, r24	; 0x27
    2af2:	98 a7       	std	Y+40, r25	; 0x28
    2af4:	a9 a7       	std	Y+41, r26	; 0x29
    2af6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	6f a1       	ldd	r22, Y+39	; 0x27
    2afa:	78 a5       	ldd	r23, Y+40	; 0x28
    2afc:	89 a5       	ldd	r24, Y+41	; 0x29
    2afe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	8b a3       	std	Y+35, r24	; 0x23
    2b12:	9c a3       	std	Y+36, r25	; 0x24
    2b14:	ad a3       	std	Y+37, r26	; 0x25
    2b16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b18:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e8       	ldi	r20, 0x80	; 128
    2b26:	5f e3       	ldi	r21, 0x3F	; 63
    2b28:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2b2c:	88 23       	and	r24, r24
    2b2e:	2c f4       	brge	.+10     	; 0x2b3a <LCD_custom_character+0xa8>
		__ticks = 1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	9a a3       	std	Y+34, r25	; 0x22
    2b36:	89 a3       	std	Y+33, r24	; 0x21
    2b38:	3f c0       	rjmp	.+126    	; 0x2bb8 <LCD_custom_character+0x126>
	else if (__tmp > 65535)
    2b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b40:	9e a1       	ldd	r25, Y+38	; 0x26
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	3f ef       	ldi	r19, 0xFF	; 255
    2b46:	4f e7       	ldi	r20, 0x7F	; 127
    2b48:	57 e4       	ldi	r21, 0x47	; 71
    2b4a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2b4e:	18 16       	cp	r1, r24
    2b50:	4c f5       	brge	.+82     	; 0x2ba4 <LCD_custom_character+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	6f a1       	ldd	r22, Y+39	; 0x27
    2b54:	78 a5       	ldd	r23, Y+40	; 0x28
    2b56:	89 a5       	ldd	r24, Y+41	; 0x29
    2b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e2       	ldi	r20, 0x20	; 32
    2b60:	51 e4       	ldi	r21, 0x41	; 65
    2b62:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9a a3       	std	Y+34, r25	; 0x22
    2b78:	89 a3       	std	Y+33, r24	; 0x21
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <LCD_custom_character+0x108>
    2b7c:	88 ec       	ldi	r24, 0xC8	; 200
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	98 a3       	std	Y+32, r25	; 0x20
    2b82:	8f 8f       	std	Y+31, r24	; 0x1f
    2b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b86:	98 a1       	ldd	r25, Y+32	; 0x20
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_custom_character+0xf6>
    2b8c:	98 a3       	std	Y+32, r25	; 0x20
    2b8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	89 a1       	ldd	r24, Y+33	; 0x21
    2b92:	9a a1       	ldd	r25, Y+34	; 0x22
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	69 f7       	brne	.-38     	; 0x2b7c <LCD_custom_character+0xea>
    2ba2:	14 c0       	rjmp	.+40     	; 0x2bcc <LCD_custom_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	9a a3       	std	Y+34, r25	; 0x22
    2bb6:	89 a3       	std	Y+33, r24	; 0x21
    2bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bba:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_custom_character+0x132>
    2bc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


	LCD_WRITE_COMMAND(72);
    2bcc:	88 e4       	ldi	r24, 0x48	; 72
    2bce:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(10);
    2bd8:	8a e0       	ldi	r24, 0x0A	; 10
    2bda:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(21);
    2bde:	85 e1       	ldi	r24, 0x15	; 21
    2be0:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    2be4:	81 e1       	ldi	r24, 0x11	; 17
    2be6:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(18);
    2bea:	82 e1       	ldi	r24, 0x12	; 18
    2bec:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2bf0:	84 e0       	ldi	r24, 0x04	; 4
    2bf2:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,3);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	63 e0       	ldi	r22, 0x03	; 3
    2c06:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(1);
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 e2       	ldi	r26, 0x20	; 32
    2c16:	b1 e4       	ldi	r27, 0x41	; 65
    2c18:	89 8f       	std	Y+25, r24	; 0x19
    2c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	69 8d       	ldd	r22, Y+25	; 0x19
    2c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a ef       	ldi	r20, 0xFA	; 250
    2c2e:	54 e4       	ldi	r21, 0x44	; 68
    2c30:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	8d 8b       	std	Y+21, r24	; 0x15
    2c3a:	9e 8b       	std	Y+22, r25	; 0x16
    2c3c:	af 8b       	std	Y+23, r26	; 0x17
    2c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c40:	6d 89       	ldd	r22, Y+21	; 0x15
    2c42:	7e 89       	ldd	r23, Y+22	; 0x16
    2c44:	8f 89       	ldd	r24, Y+23	; 0x17
    2c46:	98 8d       	ldd	r25, Y+24	; 0x18
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <LCD_custom_character+0x1d0>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9c 8b       	std	Y+20, r25	; 0x14
    2c5e:	8b 8b       	std	Y+19, r24	; 0x13
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <LCD_custom_character+0x24e>
	else if (__tmp > 65535)
    2c62:	6d 89       	ldd	r22, Y+21	; 0x15
    2c64:	7e 89       	ldd	r23, Y+22	; 0x16
    2c66:	8f 89       	ldd	r24, Y+23	; 0x17
    2c68:	98 8d       	ldd	r25, Y+24	; 0x18
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <LCD_custom_character+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ca0:	8b 8b       	std	Y+19, r24	; 0x13
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <LCD_custom_character+0x230>
    2ca4:	88 ec       	ldi	r24, 0xC8	; 200
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9a 8b       	std	Y+18, r25	; 0x12
    2caa:	89 8b       	std	Y+17, r24	; 0x11
    2cac:	89 89       	ldd	r24, Y+17	; 0x11
    2cae:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <LCD_custom_character+0x21e>
    2cb4:	9a 8b       	std	Y+18, r25	; 0x12
    2cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cba:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9c 8b       	std	Y+20, r25	; 0x14
    2cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <LCD_custom_character+0x212>
    2cca:	14 c0       	rjmp	.+40     	; 0x2cf4 <LCD_custom_character+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9c 8b       	std	Y+20, r25	; 0x14
    2cde:	8b 8b       	std	Y+19, r24	; 0x13
    2ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce4:	98 8b       	std	Y+16, r25	; 0x10
    2ce6:	8f 87       	std	Y+15, r24	; 0x0f
    2ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cea:	98 89       	ldd	r25, Y+16	; 0x10
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_custom_character+0x25a>
    2cf0:	98 8b       	std	Y+16, r25	; 0x10
    2cf2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_WRITE_COMMAND(80);
    2cf4:	80 e5       	ldi	r24, 0x50	; 80
    2cf6:	0e 94 da 13 	call	0x27b4	; 0x27b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(20);
    2d00:	84 e1       	ldi	r24, 0x14	; 20
    2d02:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(11);
    2d06:	8b e0       	ldi	r24, 0x0B	; 11
    2d08:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(27);
    2d0c:	8b e1       	ldi	r24, 0x1B	; 27
    2d0e:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(28);
    2d12:	8c e1       	ldi	r24, 0x1C	; 28
    2d14:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(40);
    2d18:	88 e2       	ldi	r24, 0x28	; 40
    2d1a:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,5);
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	65 e0       	ldi	r22, 0x05	; 5
    2d2e:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(2);
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_WRITE_CHAR>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a0 e2       	ldi	r26, 0x20	; 32
    2d3e:	b1 e4       	ldi	r27, 0x41	; 65
    2d40:	8b 87       	std	Y+11, r24	; 0x0b
    2d42:	9c 87       	std	Y+12, r25	; 0x0c
    2d44:	ad 87       	std	Y+13, r26	; 0x0d
    2d46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	4a ef       	ldi	r20, 0xFA	; 250
    2d56:	54 e4       	ldi	r21, 0x44	; 68
    2d58:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	8f 83       	std	Y+7, r24	; 0x07
    2d62:	98 87       	std	Y+8, r25	; 0x08
    2d64:	a9 87       	std	Y+9, r26	; 0x09
    2d66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d68:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6a:	78 85       	ldd	r23, Y+8	; 0x08
    2d6c:	89 85       	ldd	r24, Y+9	; 0x09
    2d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e8       	ldi	r20, 0x80	; 128
    2d76:	5f e3       	ldi	r21, 0x3F	; 63
    2d78:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <LCD_custom_character+0x2f8>
		__ticks = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
    2d88:	3f c0       	rjmp	.+126    	; 0x2e08 <LCD_custom_character+0x376>
	else if (__tmp > 65535)
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	4f e7       	ldi	r20, 0x7F	; 127
    2d98:	57 e4       	ldi	r21, 0x47	; 71
    2d9a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2d9e:	18 16       	cp	r1, r24
    2da0:	4c f5       	brge	.+82     	; 0x2df4 <LCD_custom_character+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <LCD_custom_character+0x358>
    2dcc:	88 ec       	ldi	r24, 0xC8	; 200
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_custom_character+0x346>
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <LCD_custom_character+0x33a>
    2df2:	14 c0       	rjmp	.+40     	; 0x2e1c <LCD_custom_character+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_custom_character+0x382>
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    2e1c:	aa 96       	adiw	r28, 0x2a	; 42
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <itoa>:
//    if(  (u8_OVF_Value % 10)  ==  0 )
//	  PORTA = ~PORTA ;
//}


void itoa(int val, char buffer[] ){
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	2e 97       	sbiw	r28, 0x0e	; 14
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	9c 87       	std	Y+12, r25	; 0x0c
    2e44:	8b 87       	std	Y+11, r24	; 0x0b
    2e46:	7e 87       	std	Y+14, r23	; 0x0e
    2e48:	6d 87       	std	Y+13, r22	; 0x0d

	int reminder;
    int count=0;
    2e4a:	18 86       	std	Y+8, r1	; 0x08
    2e4c:	1f 82       	std	Y+7, r1	; 0x07
    int num = val;
    2e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    int Len =0 ;
    2e56:	1c 82       	std	Y+4, r1	; 0x04
    2e58:	1b 82       	std	Y+3, r1	; 0x03


    if( 0 == val)
    2e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	31 f5       	brne	.+76     	; 0x2eae <itoa+0x80>
    {
        buffer[count++] = '0';
    2e62:	2f 81       	ldd	r18, Y+7	; 0x07
    2e64:	38 85       	ldd	r19, Y+8	; 0x08
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	e2 0f       	add	r30, r18
    2e6e:	f3 1f       	adc	r31, r19
    2e70:	80 e3       	ldi	r24, 0x30	; 48
    2e72:	80 83       	st	Z, r24
    2e74:	8f 81       	ldd	r24, Y+7	; 0x07
    2e76:	98 85       	ldd	r25, Y+8	; 0x08
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	98 87       	std	Y+8, r25	; 0x08
    2e7c:	8f 83       	std	Y+7, r24	; 0x07
        buffer[count] ='\0';
    2e7e:	2f 81       	ldd	r18, Y+7	; 0x07
    2e80:	38 85       	ldd	r19, Y+8	; 0x08
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	fc 01       	movw	r30, r24
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	10 82       	st	Z, r1
    2e8e:	57 c0       	rjmp	.+174    	; 0x2f3e <itoa+0x110>
    else
    {

    	while(num > 0)
    	    {
                Len++;
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	9c 81       	ldd	r25, Y+4	; 0x04
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
    	        num = num / 10 ;
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	0e 94 13 19 	call	0x3226	; 0x3226 <__divmodhi4>
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9e 83       	std	Y+6, r25	; 0x06
    2eac:	8d 83       	std	Y+5, r24	; 0x05

    }
    else
    {

    	while(num > 0)
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb2:	18 16       	cp	r1, r24
    2eb4:	19 06       	cpc	r1, r25
    2eb6:	64 f3       	brlt	.-40     	; 0x2e90 <itoa+0x62>
    	    {
                Len++;
    	        num = num / 10 ;
    	    }

       for(int i=0; i<Len; i++)
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	19 82       	std	Y+1, r1	; 0x01
    2ebc:	31 c0       	rjmp	.+98     	; 0x2f20 <itoa+0xf2>
       {
        reminder = val % 10 ;
    2ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec2:	2a e0       	ldi	r18, 0x0A	; 10
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 13 19 	call	0x3226	; 0x3226 <__divmodhi4>
    2ecc:	9a 87       	std	Y+10, r25	; 0x0a
    2ece:	89 87       	std	Y+9, r24	; 0x09
        buffer[(Len -1) - (count++)] = reminder + '0' ;
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	9c 01       	movw	r18, r24
    2ed6:	21 50       	subi	r18, 0x01	; 1
    2ed8:	30 40       	sbci	r19, 0x00	; 0
    2eda:	8f 81       	ldd	r24, Y+7	; 0x07
    2edc:	98 85       	ldd	r25, Y+8	; 0x08
    2ede:	a9 01       	movw	r20, r18
    2ee0:	48 1b       	sub	r20, r24
    2ee2:	59 0b       	sbc	r21, r25
    2ee4:	ca 01       	movw	r24, r20
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	fc 01       	movw	r30, r24
    2eee:	e2 0f       	add	r30, r18
    2ef0:	f3 1f       	adc	r31, r19
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	80 5d       	subi	r24, 0xD0	; 208
    2ef6:	80 83       	st	Z, r24
    2ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    2efa:	98 85       	ldd	r25, Y+8	; 0x08
    2efc:	01 96       	adiw	r24, 0x01	; 1
    2efe:	98 87       	std	Y+8, r25	; 0x08
    2f00:	8f 83       	std	Y+7, r24	; 0x07
        val = val / 10 ;
    2f02:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f04:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f06:	2a e0       	ldi	r18, 0x0A	; 10
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	0e 94 13 19 	call	0x3226	; 0x3226 <__divmodhi4>
    2f10:	cb 01       	movw	r24, r22
    2f12:	9c 87       	std	Y+12, r25	; 0x0c
    2f14:	8b 87       	std	Y+11, r24	; 0x0b
    	    {
                Len++;
    	        num = num / 10 ;
    	    }

       for(int i=0; i<Len; i++)
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	29 81       	ldd	r18, Y+1	; 0x01
    2f22:	3a 81       	ldd	r19, Y+2	; 0x02
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	9c 81       	ldd	r25, Y+4	; 0x04
    2f28:	28 17       	cp	r18, r24
    2f2a:	39 07       	cpc	r19, r25
    2f2c:	44 f2       	brlt	.-112    	; 0x2ebe <itoa+0x90>
       {
        reminder = val % 10 ;
        buffer[(Len -1) - (count++)] = reminder + '0' ;
        val = val / 10 ;
       }
    buffer[Len] ='\0';
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f34:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f36:	f9 01       	movw	r30, r18
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	10 82       	st	Z, r1
    }
}
    2f3e:	2e 96       	adiw	r28, 0x0e	; 14
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <main>:
int main()
{
    2f50:	2f 92       	push	r2
    2f52:	3f 92       	push	r3
    2f54:	4f 92       	push	r4
    2f56:	5f 92       	push	r5
    2f58:	6f 92       	push	r6
    2f5a:	7f 92       	push	r7
    2f5c:	8f 92       	push	r8
    2f5e:	9f 92       	push	r9
    2f60:	af 92       	push	r10
    2f62:	bf 92       	push	r11
    2f64:	cf 92       	push	r12
    2f66:	df 92       	push	r13
    2f68:	ef 92       	push	r14
    2f6a:	ff 92       	push	r15
    2f6c:	0f 93       	push	r16
    2f6e:	1f 93       	push	r17
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	a6 97       	sbiw	r28, 0x26	; 38
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
    LCD_INIT();
    2f84:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LCD_INIT>
    MCAL_ADC_Init(VREF_AVCC,ADC_Prescaler64);
    2f88:	80 e4       	ldi	r24, 0x40	; 64
    2f8a:	66 e0       	ldi	r22, 0x06	; 6
    2f8c:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_ADC_Init>
   // LCD_GOTO_XY(1,0);
    LCD_WRITE_STRING("ADC Reading ");
    2f90:	80 e6       	ldi	r24, 0x60	; 96
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_WRITE_STRING>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f9e:	b1 e4       	ldi	r27, 0x41	; 65
    2fa0:	89 8f       	std	Y+25, r24	; 0x19
    2fa2:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa4:	ab 8f       	std	Y+27, r26	; 0x1b
    2fa6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	69 8d       	ldd	r22, Y+25	; 0x19
    2faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a ef       	ldi	r20, 0xFA	; 250
    2fb6:	54 e4       	ldi	r21, 0x44	; 68
    2fb8:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8d 8b       	std	Y+21, r24	; 0x15
    2fc2:	9e 8b       	std	Y+22, r25	; 0x16
    2fc4:	af 8b       	std	Y+23, r26	; 0x17
    2fc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fca:	7e 89       	ldd	r23, Y+22	; 0x16
    2fcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2fce:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <main+0x9a>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9c 8b       	std	Y+20, r25	; 0x14
    2fe6:	8b 8b       	std	Y+19, r24	; 0x13
    2fe8:	3f c0       	rjmp	.+126    	; 0x3068 <main+0x118>
	else if (__tmp > 65535)
    2fea:	6d 89       	ldd	r22, Y+21	; 0x15
    2fec:	7e 89       	ldd	r23, Y+22	; 0x16
    2fee:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	3f ef       	ldi	r19, 0xFF	; 255
    2ff6:	4f e7       	ldi	r20, 0x7F	; 127
    2ff8:	57 e4       	ldi	r21, 0x47	; 71
    2ffa:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    2ffe:	18 16       	cp	r1, r24
    3000:	4c f5       	brge	.+82     	; 0x3054 <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3002:	69 8d       	ldd	r22, Y+25	; 0x19
    3004:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3008:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9c 8b       	std	Y+20, r25	; 0x14
    3028:	8b 8b       	std	Y+19, r24	; 0x13
    302a:	0f c0       	rjmp	.+30     	; 0x304a <main+0xfa>
    302c:	88 ec       	ldi	r24, 0xC8	; 200
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9a 8b       	std	Y+18, r25	; 0x12
    3032:	89 8b       	std	Y+17, r24	; 0x11
    3034:	89 89       	ldd	r24, Y+17	; 0x11
    3036:	9a 89       	ldd	r25, Y+18	; 0x12
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <main+0xe8>
    303c:	9a 8b       	std	Y+18, r25	; 0x12
    303e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8b 89       	ldd	r24, Y+19	; 0x13
    3042:	9c 89       	ldd	r25, Y+20	; 0x14
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9c 8b       	std	Y+20, r25	; 0x14
    3048:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8b 89       	ldd	r24, Y+19	; 0x13
    304c:	9c 89       	ldd	r25, Y+20	; 0x14
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <main+0xdc>
    3052:	14 c0       	rjmp	.+40     	; 0x307c <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	6d 89       	ldd	r22, Y+21	; 0x15
    3056:	7e 89       	ldd	r23, Y+22	; 0x16
    3058:	8f 89       	ldd	r24, Y+23	; 0x17
    305a:	98 8d       	ldd	r25, Y+24	; 0x18
    305c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
    3068:	8b 89       	ldd	r24, Y+19	; 0x13
    306a:	9c 89       	ldd	r25, Y+20	; 0x14
    306c:	98 8b       	std	Y+16, r25	; 0x10
    306e:	8f 87       	std	Y+15, r24	; 0x0f
    3070:	8f 85       	ldd	r24, Y+15	; 0x0f
    3072:	98 89       	ldd	r25, Y+16	; 0x10
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <main+0x124>
    3078:	98 8b       	std	Y+16, r25	; 0x10
    307a:	8f 87       	std	Y+15, r24	; 0x0f
//        adc_val = MCAL_ADC_READ(ADC_CH0);
//        itoa(adc_val,buffer,4);
//        LCD_WRITE_STRING(buffer);
//       _delay_ms(200);

		        LCD_clear_screen();
    307c:	0e 94 1e 11 	call	0x223c	; 0x223c <LCD_clear_screen>
		        adc_VOLT = ( (u32)MCAL_ADC_READ(ADC_CH0)*5000 )/Res  ;
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <MCAL_ADC_READ>
    3086:	5c 01       	movw	r10, r24
    3088:	cc 24       	eor	r12, r12
    308a:	dd 24       	eor	r13, r13
    308c:	ee 24       	eor	r14, r14
    308e:	ff 24       	eor	r15, r15
    3090:	87 01       	movw	r16, r14
    3092:	2a 2d       	mov	r18, r10
    3094:	3b 2d       	mov	r19, r11
    3096:	4c 2d       	mov	r20, r12
    3098:	5d 2d       	mov	r21, r13
    309a:	6e 2d       	mov	r22, r14
    309c:	7f 2d       	mov	r23, r15
    309e:	80 2f       	mov	r24, r16
    30a0:	91 2f       	mov	r25, r17
    30a2:	0f 2e       	mov	r0, r31
    30a4:	f8 e8       	ldi	r31, 0x88	; 136
    30a6:	af 2e       	mov	r10, r31
    30a8:	f0 2d       	mov	r31, r0
    30aa:	0f 2e       	mov	r0, r31
    30ac:	f3 e1       	ldi	r31, 0x13	; 19
    30ae:	bf 2e       	mov	r11, r31
    30b0:	f0 2d       	mov	r31, r0
    30b2:	cc 24       	eor	r12, r12
    30b4:	dd 24       	eor	r13, r13
    30b6:	ee 24       	eor	r14, r14
    30b8:	ff 24       	eor	r15, r15
    30ba:	00 e0       	ldi	r16, 0x00	; 0
    30bc:	10 e0       	ldi	r17, 0x00	; 0
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    30c2:	22 2e       	mov	r2, r18
    30c4:	33 2e       	mov	r3, r19
    30c6:	44 2e       	mov	r4, r20
    30c8:	55 2e       	mov	r5, r21
    30ca:	66 2e       	mov	r6, r22
    30cc:	77 2e       	mov	r7, r23
    30ce:	88 2e       	mov	r8, r24
    30d0:	99 2e       	mov	r9, r25
    30d2:	a2 2c       	mov	r10, r2
    30d4:	b3 2c       	mov	r11, r3
    30d6:	c4 2c       	mov	r12, r4
    30d8:	d5 2c       	mov	r13, r5
    30da:	e6 2c       	mov	r14, r6
    30dc:	f7 2c       	mov	r15, r7
    30de:	08 2d       	mov	r16, r8
    30e0:	19 2d       	mov	r17, r9
    30e2:	2a 2d       	mov	r18, r10
    30e4:	3b 2d       	mov	r19, r11
    30e6:	4c 2d       	mov	r20, r12
    30e8:	5d 2d       	mov	r21, r13
    30ea:	6e 2d       	mov	r22, r14
    30ec:	7f 2d       	mov	r23, r15
    30ee:	80 2f       	mov	r24, r16
    30f0:	91 2f       	mov	r25, r17
    30f2:	0a e0       	ldi	r16, 0x0A	; 10
    30f4:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    30f8:	a2 2e       	mov	r10, r18
    30fa:	b3 2e       	mov	r11, r19
    30fc:	c4 2e       	mov	r12, r20
    30fe:	d5 2e       	mov	r13, r21
    3100:	e6 2e       	mov	r14, r22
    3102:	f7 2e       	mov	r15, r23
    3104:	08 2f       	mov	r16, r24
    3106:	19 2f       	mov	r17, r25
    3108:	2a 2d       	mov	r18, r10
    310a:	3b 2d       	mov	r19, r11
    310c:	4c 2d       	mov	r20, r12
    310e:	5d 2d       	mov	r21, r13
    3110:	6e 2d       	mov	r22, r14
    3112:	7f 2d       	mov	r23, r15
    3114:	80 2f       	mov	r24, r16
    3116:	91 2f       	mov	r25, r17
    3118:	2d 8f       	std	Y+29, r18	; 0x1d
    311a:	3e 8f       	std	Y+30, r19	; 0x1e
    311c:	4f 8f       	std	Y+31, r20	; 0x1f
    311e:	58 a3       	std	Y+32, r21	; 0x20
		        itoa(adc_VOLT,buffer);
    3120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3122:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3124:	9e 01       	movw	r18, r28
    3126:	2f 5d       	subi	r18, 0xDF	; 223
    3128:	3f 4f       	sbci	r19, 0xFF	; 255
    312a:	b9 01       	movw	r22, r18
    312c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <itoa>
		        LCD_WRITE_STRING(buffer);
    3130:	ce 01       	movw	r24, r28
    3132:	81 96       	adiw	r24, 0x21	; 33
    3134:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_WRITE_STRING>
		        LCD_WRITE_STRING(" mv");
    3138:	8d e6       	ldi	r24, 0x6D	; 109
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <LCD_WRITE_STRING>
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a8 ec       	ldi	r26, 0xC8	; 200
    3146:	b2 e4       	ldi	r27, 0x42	; 66
    3148:	8b 87       	std	Y+11, r24	; 0x0b
    314a:	9c 87       	std	Y+12, r25	; 0x0c
    314c:	ad 87       	std	Y+13, r26	; 0x0d
    314e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3150:	6b 85       	ldd	r22, Y+11	; 0x0b
    3152:	7c 85       	ldd	r23, Y+12	; 0x0c
    3154:	8d 85       	ldd	r24, Y+13	; 0x0d
    3156:	9e 85       	ldd	r25, Y+14	; 0x0e
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a ef       	ldi	r20, 0xFA	; 250
    315e:	54 e4       	ldi	r21, 0x44	; 68
    3160:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8f 83       	std	Y+7, r24	; 0x07
    316a:	98 87       	std	Y+8, r25	; 0x08
    316c:	a9 87       	std	Y+9, r26	; 0x09
    316e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	2c f4       	brge	.+10     	; 0x3192 <main+0x242>
		__ticks = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9e 83       	std	Y+6, r25	; 0x06
    318e:	8d 83       	std	Y+5, r24	; 0x05
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <main+0x2c0>
	else if (__tmp > 65535)
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	4c f5       	brge	.+82     	; 0x31fc <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <main+0x2a2>
    31d4:	88 ec       	ldi	r24, 0xC8	; 200
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	9c 83       	std	Y+4, r25	; 0x04
    31da:	8b 83       	std	Y+3, r24	; 0x03
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <main+0x290>
    31e4:	9c 83       	std	Y+4, r25	; 0x04
    31e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	9e 81       	ldd	r25, Y+6	; 0x06
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <main+0x284>
    31fa:	40 cf       	rjmp	.-384    	; 0x307c <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fc:	6f 81       	ldd	r22, Y+7	; 0x07
    31fe:	78 85       	ldd	r23, Y+8	; 0x08
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <main+0x2cc>
    3220:	9a 83       	std	Y+2, r25	; 0x02
    3222:	89 83       	std	Y+1, r24	; 0x01
    3224:	2b cf       	rjmp	.-426    	; 0x307c <main+0x12c>

00003226 <__divmodhi4>:
    3226:	97 fb       	bst	r25, 7
    3228:	09 2e       	mov	r0, r25
    322a:	07 26       	eor	r0, r23
    322c:	0a d0       	rcall	.+20     	; 0x3242 <__divmodhi4_neg1>
    322e:	77 fd       	sbrc	r23, 7
    3230:	04 d0       	rcall	.+8      	; 0x323a <__divmodhi4_neg2>
    3232:	4d d0       	rcall	.+154    	; 0x32ce <__udivmodhi4>
    3234:	06 d0       	rcall	.+12     	; 0x3242 <__divmodhi4_neg1>
    3236:	00 20       	and	r0, r0
    3238:	1a f4       	brpl	.+6      	; 0x3240 <__divmodhi4_exit>

0000323a <__divmodhi4_neg2>:
    323a:	70 95       	com	r23
    323c:	61 95       	neg	r22
    323e:	7f 4f       	sbci	r23, 0xFF	; 255

00003240 <__divmodhi4_exit>:
    3240:	08 95       	ret

00003242 <__divmodhi4_neg1>:
    3242:	f6 f7       	brtc	.-4      	; 0x3240 <__divmodhi4_exit>
    3244:	90 95       	com	r25
    3246:	81 95       	neg	r24
    3248:	9f 4f       	sbci	r25, 0xFF	; 255
    324a:	08 95       	ret

0000324c <__udivmodsi4>:
    324c:	a1 e2       	ldi	r26, 0x21	; 33
    324e:	1a 2e       	mov	r1, r26
    3250:	aa 1b       	sub	r26, r26
    3252:	bb 1b       	sub	r27, r27
    3254:	fd 01       	movw	r30, r26
    3256:	0d c0       	rjmp	.+26     	; 0x3272 <__udivmodsi4_ep>

00003258 <__udivmodsi4_loop>:
    3258:	aa 1f       	adc	r26, r26
    325a:	bb 1f       	adc	r27, r27
    325c:	ee 1f       	adc	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	a2 17       	cp	r26, r18
    3262:	b3 07       	cpc	r27, r19
    3264:	e4 07       	cpc	r30, r20
    3266:	f5 07       	cpc	r31, r21
    3268:	20 f0       	brcs	.+8      	; 0x3272 <__udivmodsi4_ep>
    326a:	a2 1b       	sub	r26, r18
    326c:	b3 0b       	sbc	r27, r19
    326e:	e4 0b       	sbc	r30, r20
    3270:	f5 0b       	sbc	r31, r21

00003272 <__udivmodsi4_ep>:
    3272:	66 1f       	adc	r22, r22
    3274:	77 1f       	adc	r23, r23
    3276:	88 1f       	adc	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	1a 94       	dec	r1
    327c:	69 f7       	brne	.-38     	; 0x3258 <__udivmodsi4_loop>
    327e:	60 95       	com	r22
    3280:	70 95       	com	r23
    3282:	80 95       	com	r24
    3284:	90 95       	com	r25
    3286:	9b 01       	movw	r18, r22
    3288:	ac 01       	movw	r20, r24
    328a:	bd 01       	movw	r22, r26
    328c:	cf 01       	movw	r24, r30
    328e:	08 95       	ret

00003290 <__mulsi3>:
    3290:	62 9f       	mul	r22, r18
    3292:	d0 01       	movw	r26, r0
    3294:	73 9f       	mul	r23, r19
    3296:	f0 01       	movw	r30, r0
    3298:	82 9f       	mul	r24, r18
    329a:	e0 0d       	add	r30, r0
    329c:	f1 1d       	adc	r31, r1
    329e:	64 9f       	mul	r22, r20
    32a0:	e0 0d       	add	r30, r0
    32a2:	f1 1d       	adc	r31, r1
    32a4:	92 9f       	mul	r25, r18
    32a6:	f0 0d       	add	r31, r0
    32a8:	83 9f       	mul	r24, r19
    32aa:	f0 0d       	add	r31, r0
    32ac:	74 9f       	mul	r23, r20
    32ae:	f0 0d       	add	r31, r0
    32b0:	65 9f       	mul	r22, r21
    32b2:	f0 0d       	add	r31, r0
    32b4:	99 27       	eor	r25, r25
    32b6:	72 9f       	mul	r23, r18
    32b8:	b0 0d       	add	r27, r0
    32ba:	e1 1d       	adc	r30, r1
    32bc:	f9 1f       	adc	r31, r25
    32be:	63 9f       	mul	r22, r19
    32c0:	b0 0d       	add	r27, r0
    32c2:	e1 1d       	adc	r30, r1
    32c4:	f9 1f       	adc	r31, r25
    32c6:	bd 01       	movw	r22, r26
    32c8:	cf 01       	movw	r24, r30
    32ca:	11 24       	eor	r1, r1
    32cc:	08 95       	ret

000032ce <__udivmodhi4>:
    32ce:	aa 1b       	sub	r26, r26
    32d0:	bb 1b       	sub	r27, r27
    32d2:	51 e1       	ldi	r21, 0x11	; 17
    32d4:	07 c0       	rjmp	.+14     	; 0x32e4 <__udivmodhi4_ep>

000032d6 <__udivmodhi4_loop>:
    32d6:	aa 1f       	adc	r26, r26
    32d8:	bb 1f       	adc	r27, r27
    32da:	a6 17       	cp	r26, r22
    32dc:	b7 07       	cpc	r27, r23
    32de:	10 f0       	brcs	.+4      	; 0x32e4 <__udivmodhi4_ep>
    32e0:	a6 1b       	sub	r26, r22
    32e2:	b7 0b       	sbc	r27, r23

000032e4 <__udivmodhi4_ep>:
    32e4:	88 1f       	adc	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	5a 95       	dec	r21
    32ea:	a9 f7       	brne	.-22     	; 0x32d6 <__udivmodhi4_loop>
    32ec:	80 95       	com	r24
    32ee:	90 95       	com	r25
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	08 95       	ret

000032f6 <__prologue_saves__>:
    32f6:	2f 92       	push	r2
    32f8:	3f 92       	push	r3
    32fa:	4f 92       	push	r4
    32fc:	5f 92       	push	r5
    32fe:	6f 92       	push	r6
    3300:	7f 92       	push	r7
    3302:	8f 92       	push	r8
    3304:	9f 92       	push	r9
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	0f 93       	push	r16
    3314:	1f 93       	push	r17
    3316:	cf 93       	push	r28
    3318:	df 93       	push	r29
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	ca 1b       	sub	r28, r26
    3320:	db 0b       	sbc	r29, r27
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	09 94       	ijmp

0000332e <__epilogue_restores__>:
    332e:	2a 88       	ldd	r2, Y+18	; 0x12
    3330:	39 88       	ldd	r3, Y+17	; 0x11
    3332:	48 88       	ldd	r4, Y+16	; 0x10
    3334:	5f 84       	ldd	r5, Y+15	; 0x0f
    3336:	6e 84       	ldd	r6, Y+14	; 0x0e
    3338:	7d 84       	ldd	r7, Y+13	; 0x0d
    333a:	8c 84       	ldd	r8, Y+12	; 0x0c
    333c:	9b 84       	ldd	r9, Y+11	; 0x0b
    333e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3340:	b9 84       	ldd	r11, Y+9	; 0x09
    3342:	c8 84       	ldd	r12, Y+8	; 0x08
    3344:	df 80       	ldd	r13, Y+7	; 0x07
    3346:	ee 80       	ldd	r14, Y+6	; 0x06
    3348:	fd 80       	ldd	r15, Y+5	; 0x05
    334a:	0c 81       	ldd	r16, Y+4	; 0x04
    334c:	1b 81       	ldd	r17, Y+3	; 0x03
    334e:	aa 81       	ldd	r26, Y+2	; 0x02
    3350:	b9 81       	ldd	r27, Y+1	; 0x01
    3352:	ce 0f       	add	r28, r30
    3354:	d1 1d       	adc	r29, r1
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	ed 01       	movw	r28, r26
    3362:	08 95       	ret

00003364 <_exit>:
    3364:	f8 94       	cli

00003366 <__stop_program>:
    3366:	ff cf       	rjmp	.-2      	; 0x3366 <__stop_program>
