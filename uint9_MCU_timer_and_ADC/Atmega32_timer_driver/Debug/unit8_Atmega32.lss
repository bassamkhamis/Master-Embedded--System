
unit8_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002b7a  00002c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800070  00800070  00002c1e  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c93  00000000  00000000  00006214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_10>
      2c:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_11>
      30:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_12>
      34:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <main>
      8a:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <PWM0_Init>:
//*************************************************************
//******************* APIs Implementation**********************
//*************************************************************

E_Status_t PWM0_Init(ST_PWM0Config_t *config)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <PWM0_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
	if( null == config)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	19 f4       	brne	.+6      	; 0xcc0 <PWM0_Init+0x22>
	{
		u8_retVal = E_NOK;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	77 c0       	rjmp	.+238    	; 0xdae <PWM0_Init+0x110>
	}
	else
	{
		PWM0config = config;
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	90 93 79 00 	sts	0x0079, r25
     cc8:	80 93 78 00 	sts	0x0078, r24
		if( PWM_FAST == PWM0config->Mode  ||  PWM_PHASE_CORRECT == PWM0config->Mode )
     ccc:	e0 91 78 00 	lds	r30, 0x0078
     cd0:	f0 91 79 00 	lds	r31, 0x0079
     cd4:	80 81       	ld	r24, Z
     cd6:	88 34       	cpi	r24, 0x48	; 72
     cd8:	39 f0       	breq	.+14     	; 0xce8 <PWM0_Init+0x4a>
     cda:	e0 91 78 00 	lds	r30, 0x0078
     cde:	f0 91 79 00 	lds	r31, 0x0079
     ce2:	80 81       	ld	r24, Z
     ce4:	80 34       	cpi	r24, 0x40	; 64
     ce6:	71 f4       	brne	.+28     	; 0xd04 <PWM0_Init+0x66>
		{
			TCCR0 |=  PWM0config->Mode;
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	90 81       	ld	r25, Z
     cf2:	e0 91 78 00 	lds	r30, 0x0078
     cf6:	f0 91 79 00 	lds	r31, 0x0079
     cfa:	80 81       	ld	r24, Z
     cfc:	89 2b       	or	r24, r25
     cfe:	8c 93       	st	X, r24
			u8_retVal = E_OK;
     d00:	19 82       	std	Y+1, r1	; 0x01
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <PWM0_Init+0x6a>
		}
		else
		{
			u8_retVal = E_NOK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_NO_CLCK <= PWM0config->Clok  &&  PWM_EXTERNAL_CLK_RISING >= PWM0config->Clok )
     d08:	e0 91 78 00 	lds	r30, 0x0078
     d0c:	f0 91 79 00 	lds	r31, 0x0079
     d10:	81 81       	ldd	r24, Z+1	; 0x01
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	70 f4       	brcc	.+28     	; 0xd32 <PWM0_Init+0x94>
		{
			TCCR0 |=  PWM0config->Clok;
     d16:	a3 e5       	ldi	r26, 0x53	; 83
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	90 81       	ld	r25, Z
     d20:	e0 91 78 00 	lds	r30, 0x0078
     d24:	f0 91 79 00 	lds	r31, 0x0079
     d28:	81 81       	ldd	r24, Z+1	; 0x01
     d2a:	89 2b       	or	r24, r25
     d2c:	8c 93       	st	X, r24
			u8_retVal = E_OK;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <PWM0_Init+0x98>
		}
		else
		{
			u8_retVal = E_NOK;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_TOF_ENABLE == PWM0config->TOFE_Interrupt  ||  PWM_TOF_DISABLE == PWM0config->TOFE_Interrupt )
     d36:	e0 91 78 00 	lds	r30, 0x0078
     d3a:	f0 91 79 00 	lds	r31, 0x0079
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	39 f0       	breq	.+14     	; 0xd52 <PWM0_Init+0xb4>
     d44:	e0 91 78 00 	lds	r30, 0x0078
     d48:	f0 91 79 00 	lds	r31, 0x0079
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	88 23       	and	r24, r24
     d50:	71 f4       	brne	.+28     	; 0xd6e <PWM0_Init+0xd0>
		{
			TIMSK |=  PWM0config->TOFE_Interrupt;
     d52:	a9 e5       	ldi	r26, 0x59	; 89
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e9 e5       	ldi	r30, 0x59	; 89
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	90 81       	ld	r25, Z
     d5c:	e0 91 78 00 	lds	r30, 0x0078
     d60:	f0 91 79 00 	lds	r31, 0x0079
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	89 2b       	or	r24, r25
     d68:	8c 93       	st	X, r24
			u8_retVal = E_OK;
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <PWM0_Init+0xd4>
		}
		else
		{
			u8_retVal = E_NOK;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	89 83       	std	Y+1, r24	; 0x01
		}


		if( PWM_Non_Inverted == PWM0config->Waveform ||  PWM_Inverted == PWM0config->Waveform )
     d72:	e0 91 78 00 	lds	r30, 0x0078
     d76:	f0 91 79 00 	lds	r31, 0x0079
     d7a:	83 81       	ldd	r24, Z+3	; 0x03
     d7c:	80 32       	cpi	r24, 0x20	; 32
     d7e:	39 f0       	breq	.+14     	; 0xd8e <PWM0_Init+0xf0>
     d80:	e0 91 78 00 	lds	r30, 0x0078
     d84:	f0 91 79 00 	lds	r31, 0x0079
     d88:	83 81       	ldd	r24, Z+3	; 0x03
     d8a:	80 33       	cpi	r24, 0x30	; 48
     d8c:	71 f4       	brne	.+28     	; 0xdaa <PWM0_Init+0x10c>
		{
			TCCR0 |=  PWM0config->Waveform;
     d8e:	a3 e5       	ldi	r26, 0x53	; 83
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e3 e5       	ldi	r30, 0x53	; 83
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	90 81       	ld	r25, Z
     d98:	e0 91 78 00 	lds	r30, 0x0078
     d9c:	f0 91 79 00 	lds	r31, 0x0079
     da0:	83 81       	ldd	r24, Z+3	; 0x03
     da2:	89 2b       	or	r24, r25
     da4:	8c 93       	st	X, r24
			u8_retVal = E_OK;
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	02 c0       	rjmp	.+4      	; 0xdae <PWM0_Init+0x110>
		}
		else
		{
			u8_retVal = E_NOK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01
		}


	}

	return u8_retVal;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <PWM0_STOP>:
E_Status_t PWM0_STOP(void)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	E_Status_t u8_retVal = E_NOK;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	89 83       	std	Y+1, r24	; 0x01
	// CLOCK No source
	// TCCR0 = NO_CLCK
	CLEAR_BIT(TCCR0,CS00);
     dca:	a3 e5       	ldi	r26, 0x53	; 83
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e3 e5       	ldi	r30, 0x53	; 83
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
     dd8:	a3 e5       	ldi	r26, 0x53	; 83
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e3 e5       	ldi	r30, 0x53	; 83
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
     de6:	a3 e5       	ldi	r26, 0x53	; 83
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e3 e5       	ldi	r30, 0x53	; 83
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8b 7f       	andi	r24, 0xFB	; 251
     df2:	8c 93       	st	X, r24

	return u8_retVal;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
}
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	08 95       	ret

00000dfe <PWM0_GetComapreValue>:


E_Status_t PWM0_GetComapreValue(ptr_uint8_t pu8_Ticks)
{
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	00 d0       	rcall	.+0      	; 0xe04 <PWM0_GetComapreValue+0x6>
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9b 83       	std	Y+3, r25	; 0x03
     e0c:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	89 83       	std	Y+1, r24	; 0x01
	*pu8_Ticks = OCR0 ;
     e12:	ec e5       	ldi	r30, 0x5C	; 92
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	ea 81       	ldd	r30, Y+2	; 0x02
     e1a:	fb 81       	ldd	r31, Y+3	; 0x03
     e1c:	80 83       	st	Z, r24
	return u8_retVal;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <PWM0_SetComapreValue>:
E_Status_t PWM0_SetComapreValue(u8 u8_Ticks)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <PWM0_SetComapreValue+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8_Ticks ;
     e3c:	ec e5       	ldi	r30, 0x5C	; 92
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	80 83       	st	Z, r24
	return u8_retVal;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <PWM0_SetCallBack_OVERFLOW>:

void PWM0_SetCallBack_OVERFLOW(Ptr_VoidFunVoid CallBack )
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <PWM0_SetCallBack_OVERFLOW+0x6>
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
	PWM0CallBack_OverFlow = CallBack ;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	90 93 71 00 	sts	0x0071, r25
     e66:	80 93 70 00 	sts	0x0070, r24
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <MCAL_SPI_Init>:



static void (*SPI_ISR)(void);

void MCAL_SPI_Init(SPI_ConfigType* config){
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <MCAL_SPI_Init+0x6>
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02

	u8 tempConfig = 0;
     e84:	19 82       	std	Y+1, r1	; 0x01
	//Set mode Master/Slave
	tempConfig |= (config->mode)<<MSTR;
     e86:	ea 81       	ldd	r30, Y+2	; 0x02
     e88:	fb 81       	ldd	r31, Y+3	; 0x03
     e8a:	80 81       	ld	r24, Z
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	82 95       	swap	r24
     e92:	92 95       	swap	r25
     e94:	90 7f       	andi	r25, 0xF0	; 240
     e96:	98 27       	eor	r25, r24
     e98:	80 7f       	andi	r24, 0xF0	; 240
     e9a:	98 27       	eor	r25, r24
     e9c:	98 2f       	mov	r25, r24
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	89 2b       	or	r24, r25
     ea2:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK_Polarity)<<CPOL ;// operate only IDEL low// its a bug in software (proteus)
     ea4:	ea 81       	ldd	r30, Y+2	; 0x02
     ea6:	fb 81       	ldd	r31, Y+3	; 0x03
     ea8:	83 81       	ldd	r24, Z+3	; 0x03
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	98 2f       	mov	r25, r24
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	89 2b       	or	r24, r25
     ec0:	89 83       	std	Y+1, r24	; 0x01


	//Set CLK Phase
	tempConfig |= (config->Sampling_EDG)<<CPHA ;
     ec2:	ea 81       	ldd	r30, Y+2	; 0x02
     ec4:	fb 81       	ldd	r31, Y+3	; 0x03
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	88 2f       	mov	r24, r24
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	98 2f       	mov	r25, r24
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	89 2b       	or	r24, r25
     eda:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->order)<<DORD ;
     edc:	ea 81       	ldd	r30, Y+2	; 0x02
     ede:	fb 81       	ldd	r31, Y+3	; 0x03
     ee0:	85 81       	ldd	r24, Z+5	; 0x05
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	82 95       	swap	r24
     eec:	92 95       	swap	r25
     eee:	90 7f       	andi	r25, 0xF0	; 240
     ef0:	98 27       	eor	r25, r24
     ef2:	80 7f       	andi	r24, 0xF0	; 240
     ef4:	98 27       	eor	r25, r24
     ef6:	98 2f       	mov	r25, r24
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	89 2b       	or	r24, r25
     efc:	89 83       	std	Y+1, r24	; 0x01

	//Set CLK polarity
	tempConfig |= (config->CLK)<<SPR0 ;
     efe:	ea 81       	ldd	r30, Y+2	; 0x02
     f00:	fb 81       	ldd	r31, Y+3	; 0x03
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	89 2b       	or	r24, r25
     f08:	89 83       	std	Y+1, r24	; 0x01

	//Set Double SPEED
	SPSR |= (config->DoubleSpedd)<<SPI2X;
     f0a:	ae e2       	ldi	r26, 0x2E	; 46
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ee e2       	ldi	r30, 0x2E	; 46
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	90 81       	ld	r25, Z
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	86 81       	ldd	r24, Z+6	; 0x06
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24

	//Set interrupt
	tempConfig |= (config->interrupt_state)<<SPIE ;
     f1e:	ea 81       	ldd	r30, Y+2	; 0x02
     f20:	fb 81       	ldd	r31, Y+3	; 0x03
     f22:	87 81       	ldd	r24, Z+7	; 0x07
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	96 95       	lsr	r25
     f2a:	98 2f       	mov	r25, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	97 95       	ror	r25
     f30:	87 95       	ror	r24
     f32:	98 2f       	mov	r25, r24
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	89 2b       	or	r24, r25
     f38:	89 83       	std	Y+1, r24	; 0x01


	//Enable SPI
	tempConfig |= (config->Enable)<<SPE;
     f3a:	ea 81       	ldd	r30, Y+2	; 0x02
     f3c:	fb 81       	ldd	r31, Y+3	; 0x03
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	00 24       	eor	r0, r0
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	07 94       	ror	r0
     f4c:	96 95       	lsr	r25
     f4e:	87 95       	ror	r24
     f50:	07 94       	ror	r0
     f52:	98 2f       	mov	r25, r24
     f54:	80 2d       	mov	r24, r0
     f56:	98 2f       	mov	r25, r24
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	89 2b       	or	r24, r25
     f5c:	89 83       	std	Y+1, r24	; 0x01

	SPCR |= tempConfig;
     f5e:	ad e2       	ldi	r26, 0x2D	; 45
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ed e2       	ldi	r30, 0x2D	; 45
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	90 81       	ld	r25, Z
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	89 2b       	or	r24, r25
     f6c:	8c 93       	st	X, r24

}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <MCAL_SPI_SendAndReceive>:

u8 MCAL_SPI_SendAndReceive(u8 Copy_Data){
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	89 83       	std	Y+1, r24	; 0x01

	//PORTC ^= 0xFF;
	SPDR = Copy_Data; //write dtat
     f86:	ef e2       	ldi	r30, 0x2F	; 47
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24

	while( !( SPSR&(1<<SPIF) ) );
     f8e:	ee e2       	ldi	r30, 0x2E	; 46
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 23       	and	r24, r24
     f96:	dc f7       	brge	.-10     	; 0xf8e <MCAL_SPI_SendAndReceive+0x14>

	return SPDR ;
     f98:	ef e2       	ldi	r30, 0x2F	; 47
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z

}
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <MCAL_SPI_Send>:
void MCAL_SPI_Send(u8 Copy_Data){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01

	   SPDR = Copy_Data; //write dtat
     fb2:	ef e2       	ldi	r30, 0x2F	; 47
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24

		while( !( SPSR&(1<<SPIF) ) );
     fba:	ee e2       	ldi	r30, 0x2E	; 46
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 23       	and	r24, r24
     fc2:	dc f7       	brge	.-10     	; 0xfba <MCAL_SPI_Send+0x14>
}
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <MCAL_SPI_CheckForCollsion>:
u8 MCAL_SPI_CheckForCollsion(void){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	0f 92       	push	r0
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62

  u8 localData = READ_BIT(SPSR, WCOL);
     fd6:	ee e2       	ldi	r30, 0x2E	; 46
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	82 95       	swap	r24
     fde:	86 95       	lsr	r24
     fe0:	86 95       	lsr	r24
     fe2:	83 70       	andi	r24, 0x03	; 3
     fe4:	81 70       	andi	r24, 0x01	; 1
     fe6:	89 83       	std	Y+1, r24	; 0x01

  return localData;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <MCAL_SPI_AssignCallBack>:
void MCAL_SPI_AssignCallBack(void (*PCallBack)(void)){
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <MCAL_SPI_AssignCallBack+0x6>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01

	SPI_ISR = PCallBack;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	90 93 73 00 	sts	0x0073, r25
    1008:	80 93 72 00 	sts	0x0072, r24

}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <__vector_12>:
ISR(SPI_STC_vect){
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62

	SPI_ISR();
    1040:	e0 91 72 00 	lds	r30, 0x0072
    1044:	f0 91 73 00 	lds	r31, 0x0073
    1048:	09 95       	icall

}
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <MCAL_TWI_Init>:
#define F_CPU 1000000UL

TWI_typedef *GTWIconfig ;

void MCAL_TWI_Init(TWI_typedef *TWIconfig)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <MCAL_TWI_Init+0xa>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	GTWIconfig = TWIconfig;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	90 93 7b 00 	sts	0x007B, r25
    108a:	80 93 7a 00 	sts	0x007A, r24

	// check master:
	if(TWIconfig->mode == MASTER_RECEIVE || TWIconfig->mode == MASTER_TRANSMIT )
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	80 81       	ld	r24, Z
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	29 f0       	breq	.+10     	; 0x10a2 <MCAL_TWI_Init+0x32>
    1098:	e9 81       	ldd	r30, Y+1	; 0x01
    109a:	fa 81       	ldd	r31, Y+2	; 0x02
    109c:	80 81       	ld	r24, Z
    109e:	88 23       	and	r24, r24
    10a0:	e9 f4       	brne	.+58     	; 0x10dc <MCAL_TWI_Init+0x6c>
	{
		TWBR =  ( (  (F_CPU/TWIconfig->SerialCLK) -16 ) / 2 )  ;  //Per scaler always 1
    10a2:	00 e2       	ldi	r16, 0x20	; 32
    10a4:	10 e0       	ldi	r17, 0x00	; 0
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	81 81       	ldd	r24, Z+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	80 e4       	ldi	r24, 0x40	; 64
    10b6:	92 e4       	ldi	r25, 0x42	; 66
    10b8:	af e0       	ldi	r26, 0x0F	; 15
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodsi4>
    10c4:	da 01       	movw	r26, r20
    10c6:	c9 01       	movw	r24, r18
    10c8:	40 97       	sbiw	r24, 0x10	; 16
    10ca:	a1 09       	sbc	r26, r1
    10cc:	b1 09       	sbc	r27, r1
    10ce:	b6 95       	lsr	r27
    10d0:	a7 95       	ror	r26
    10d2:	97 95       	ror	r25
    10d4:	87 95       	ror	r24
    10d6:	f8 01       	movw	r30, r16
    10d8:	80 83       	st	Z, r24
    10da:	12 c0       	rjmp	.+36     	; 0x1100 <MCAL_TWI_Init+0x90>
	}


	// check slave:
	else if(TWIconfig->mode == SLAVE_RECEIVE || TWIconfig->mode == SLAVE_TRANSMIT)
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	80 81       	ld	r24, Z
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	29 f0       	breq	.+10     	; 0x10f0 <MCAL_TWI_Init+0x80>
    10e6:	e9 81       	ldd	r30, Y+1	; 0x01
    10e8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ea:	80 81       	ld	r24, Z
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	41 f4       	brne	.+16     	; 0x1100 <MCAL_TWI_Init+0x90>
	{
		TWAR = TWIconfig->Address_Slave;
    10f0:	e2 e2       	ldi	r30, 0x22	; 34
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	a9 81       	ldd	r26, Y+1	; 0x01
    10f6:	ba 81       	ldd	r27, Y+2	; 0x02
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	8c 91       	ld	r24, X
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	80 83       	st	Z, r24
	}


}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <MCAL_TWI_Write>:


void MCAL_TWI_Write(u8 Ldata)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	89 83       	std	Y+1, r24	; 0x01
	if(GTWIconfig->mode == MASTER_TRANSMIT)
    111a:	e0 91 7a 00 	lds	r30, 0x007A
    111e:	f0 91 7b 00 	lds	r31, 0x007B
    1122:	80 81       	ld	r24, Z
    1124:	88 23       	and	r24, r24
    1126:	d9 f5       	brne	.+118    	; 0x119e <MCAL_TWI_Write+0x90>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);   // send Start Condition
    1128:	e6 e5       	ldi	r30, 0x56	; 86
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	84 ea       	ldi	r24, 0xA4	; 164
    112e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
    1130:	e6 e5       	ldi	r30, 0x56	; 86
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	88 23       	and	r24, r24
    1138:	dc f7       	brge	.-10     	; 0x1130 <MCAL_TWI_Write+0x22>
		while ( TWSR  != 0x08 );                      // wait status register to confirm
    113a:	e1 e2       	ldi	r30, 0x21	; 33
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	d9 f7       	brne	.-10     	; 0x113a <MCAL_TWI_Write+0x2c>

		TWDR = GTWIconfig->Address_Slave + 0 ;       // write address of slave + W =0 write
    1144:	a3 e2       	ldi	r26, 0x23	; 35
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e0 91 7a 00 	lds	r30, 0x007A
    114c:	f0 91 7b 00 	lds	r31, 0x007B
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	8c 93       	st	X, r24
		TWCR = (1<<TWINT) | (1<<TWEN);              // Reset flag of interrupt
    1154:	e6 e5       	ldi	r30, 0x56	; 86
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	84 e8       	ldi	r24, 0x84	; 132
    115a:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    115c:	e6 e5       	ldi	r30, 0x56	; 86
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	88 23       	and	r24, r24
    1164:	dc f7       	brge	.-10     	; 0x115c <MCAL_TWI_Write+0x4e>
		while ( TWSR  != 0x18 );                    // wait status register to confirm
    1166:	e1 e2       	ldi	r30, 0x21	; 33
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	88 31       	cpi	r24, 0x18	; 24
    116e:	d9 f7       	brne	.-10     	; 0x1166 <MCAL_TWI_Write+0x58>

		TWDR = Ldata;                             //write data
    1170:	e3 e2       	ldi	r30, 0x23	; 35
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	80 83       	st	Z, r24
		TWCR = (1<<TWINT) | (1<<TWEN);             // Reset flag of interrupt and Enable TWI
    1178:	e6 e5       	ldi	r30, 0x56	; 86
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	84 e8       	ldi	r24, 0x84	; 132
    117e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1180:	e6 e5       	ldi	r30, 0x56	; 86
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 23       	and	r24, r24
    1188:	dc f7       	brge	.-10     	; 0x1180 <MCAL_TWI_Write+0x72>
		while ( TWSR  != 0x28 );                   // wait status register to confirm
    118a:	e1 e2       	ldi	r30, 0x21	; 33
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	88 32       	cpi	r24, 0x28	; 40
    1192:	d9 f7       	brne	.-10     	; 0x118a <MCAL_TWI_Write+0x7c>

		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // stop condition
    1194:	e6 e5       	ldi	r30, 0x56	; 86
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	84 e9       	ldi	r24, 0x94	; 148
    119a:	80 83       	st	Z, r24
    119c:	27 c0       	rjmp	.+78     	; 0x11ec <MCAL_TWI_Write+0xde>


	}
	else if(GTWIconfig->mode == MASTER_RECEIVE)
    119e:	e0 91 7a 00 	lds	r30, 0x007A
    11a2:	f0 91 7b 00 	lds	r31, 0x007B
    11a6:	80 81       	ld	r24, Z
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	01 f5       	brne	.+64     	; 0x11ec <MCAL_TWI_Write+0xde>
	{
		TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);   // send Start Condition
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	84 ea       	ldi	r24, 0xA4	; 164
    11b2:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
    11b4:	e6 e5       	ldi	r30, 0x56	; 86
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	88 23       	and	r24, r24
    11bc:	dc f7       	brge	.-10     	; 0x11b4 <MCAL_TWI_Write+0xa6>
		while ( TWSR  != 0x08 );                      // wait status register to confirm
    11be:	e1 e2       	ldi	r30, 0x21	; 33
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	88 30       	cpi	r24, 0x08	; 8
    11c6:	d9 f7       	brne	.-10     	; 0x11be <MCAL_TWI_Write+0xb0>
       // _delay_ms(10);
		TWDR = GTWIconfig->Address_Slave + 0x01 ;       // write address of slave + W =0 write
    11c8:	a3 e2       	ldi	r26, 0x23	; 35
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e0 91 7a 00 	lds	r30, 0x007A
    11d0:	f0 91 7b 00 	lds	r31, 0x007B
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	8c 93       	st	X, r24
		TWCR = (1<<TWINT) | (1<<TWEN);              // Reset flag of interrupt
    11da:	e6 e5       	ldi	r30, 0x56	; 86
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	84 e8       	ldi	r24, 0x84	; 132
    11e0:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    11e2:	e6 e5       	ldi	r30, 0x56	; 86
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	88 23       	and	r24, r24
    11ea:	dc f7       	brge	.-10     	; 0x11e2 <MCAL_TWI_Write+0xd4>
		//while ( TWSR  != 0x40 );                    // wait status register to confirm
	}
	if(GTWIconfig->mode == SLAVE_TRANSMIT)
    11ec:	e0 91 7a 00 	lds	r30, 0x007A
    11f0:	f0 91 7b 00 	lds	r31, 0x007B
    11f4:	80 81       	ld	r24, Z
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	69 f4       	brne	.+26     	; 0x1214 <MCAL_TWI_Write+0x106>
	{
//		TWCR = (1<<TWINT) | (1<<TWEN);               // Enable TWI and Clear flag
//		while (!(TWCR & (1<<TWINT)));                 // wait until flag set
//		while ( TWSR  != 0xA8 );                      // wait status register to confirm

		TWDR = Ldata;                             //write data
    11fa:	e3 e2       	ldi	r30, 0x23	; 35
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	80 83       	st	Z, r24
		TWCR = (1<<TWINT) | (1<<TWEN);             // Reset flag of interrupt and Enable TWI
    1202:	e6 e5       	ldi	r30, 0x56	; 86
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	84 e8       	ldi	r24, 0x84	; 132
    1208:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    120a:	e6 e5       	ldi	r30, 0x56	; 86
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	dc f7       	brge	.-10     	; 0x120a <MCAL_TWI_Write+0xfc>
	//	if(GTWIconfig->mode == SLAVE_RECEIVE)  // N/A
	//	{
	//
	//	}

}
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <MCAL_TWI_Read>:


u8 MCAL_TWI_Read(void)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	u8 Ldata = 0;
    1226:	19 82       	std	Y+1, r1	; 0x01

	if(GTWIconfig->mode == MASTER_RECEIVE)
    1228:	e0 91 7a 00 	lds	r30, 0x007A
    122c:	f0 91 7b 00 	lds	r31, 0x007B
    1230:	80 81       	ld	r24, Z
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 f4       	brne	.+36     	; 0x125a <MCAL_TWI_Read+0x3e>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1236:	e6 e5       	ldi	r30, 0x56	; 86
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	84 ec       	ldi	r24, 0xC4	; 196
    123c:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    123e:	e6 e5       	ldi	r30, 0x56	; 86
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	dc f7       	brge	.-10     	; 0x123e <MCAL_TWI_Read+0x22>
		//while ( TWSR  != 0x50 );                   // wait status register to confirm
		Ldata = TWDR ;
    1248:	e3 e2       	ldi	r30, 0x23	; 35
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	89 83       	std	Y+1, r24	; 0x01

		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // stop condition
    1250:	e6 e5       	ldi	r30, 0x56	; 86
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	84 e9       	ldi	r24, 0x94	; 148
    1256:	80 83       	st	Z, r24
    1258:	38 c0       	rjmp	.+112    	; 0x12ca <MCAL_TWI_Read+0xae>
	}

	else if(GTWIconfig->mode == SLAVE_RECEIVE)
    125a:	e0 91 7a 00 	lds	r30, 0x007A
    125e:	f0 91 7b 00 	lds	r31, 0x007B
    1262:	80 81       	ld	r24, Z
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	c1 f4       	brne	.+48     	; 0x1298 <MCAL_TWI_Read+0x7c>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1268:	e6 e5       	ldi	r30, 0x56	; 86
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	84 ec       	ldi	r24, 0xC4	; 196
    126e:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    1270:	e6 e5       	ldi	r30, 0x56	; 86
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 23       	and	r24, r24
    1278:	dc f7       	brge	.-10     	; 0x1270 <MCAL_TWI_Read+0x54>
		while ( TWSR  != 0x60 );                   // wait status register to confirm
    127a:	e1 e2       	ldi	r30, 0x21	; 33
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 36       	cpi	r24, 0x60	; 96
    1282:	d9 f7       	brne	.-10     	; 0x127a <MCAL_TWI_Read+0x5e>

		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    1284:	e6 e5       	ldi	r30, 0x56	; 86
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	84 ec       	ldi	r24, 0xC4	; 196
    128a:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    128c:	e6 e5       	ldi	r30, 0x56	; 86
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	dc f7       	brge	.-10     	; 0x128c <MCAL_TWI_Read+0x70>
    1296:	19 c0       	rjmp	.+50     	; 0x12ca <MCAL_TWI_Read+0xae>
		//while ( TWSR  != 0x80 );                   // wait status register to confirm
		//Ldata = TWDR ;
	}


	else if(GTWIconfig->mode == SLAVE_TRANSMIT)
    1298:	e0 91 7a 00 	lds	r30, 0x007A
    129c:	f0 91 7b 00 	lds	r31, 0x007B
    12a0:	80 81       	ld	r24, Z
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	91 f4       	brne	.+36     	; 0x12ca <MCAL_TWI_Read+0xae>
	{
		TWCR = (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
    12a6:	e6 e5       	ldi	r30, 0x56	; 86
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	84 ec       	ldi	r24, 0xC4	; 196
    12ac:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));              // wait until flag set
    12ae:	e6 e5       	ldi	r30, 0x56	; 86
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	88 23       	and	r24, r24
    12b6:	dc f7       	brge	.-10     	; 0x12ae <MCAL_TWI_Read+0x92>
		while ( TWSR  != 0xA8 );                   // wait status register to confirm
    12b8:	e1 e2       	ldi	r30, 0x21	; 33
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 3a       	cpi	r24, 0xA8	; 168
    12c0:	d9 f7       	brne	.-10     	; 0x12b8 <MCAL_TWI_Read+0x9c>
		Ldata = TWDR ;
    12c2:	e3 e2       	ldi	r30, 0x23	; 35
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	89 83       	std	Y+1, r24	; 0x01


	}

	return Ldata;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <TIMER0_Init>:
//*************************************************************
//********************APIs Implementation**********************
//*************************************************************

E_Status_t TIMER0_Init(ST_TIMER0Config_t *config)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <TIMER0_Init+0x6>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	89 83       	std	Y+1, r24	; 0x01

	if( null == config )
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <TIMER0_Init+0x22>
	{
		u8_retVal = E_NOK;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	87 c0       	rjmp	.+270    	; 0x1404 <TIMER0_Init+0x130>
	}
	else
	{
		TIMER0config = config ;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	90 93 7e 00 	sts	0x007E, r25
    12fe:	80 93 7d 00 	sts	0x007D, r24

		if(NORMAL == config->Mode || CTC == config->Mode )
    1302:	ea 81       	ldd	r30, Y+2	; 0x02
    1304:	fb 81       	ldd	r31, Y+3	; 0x03
    1306:	80 81       	ld	r24, Z
    1308:	88 23       	and	r24, r24
    130a:	29 f0       	breq	.+10     	; 0x1316 <TIMER0_Init+0x42>
    130c:	ea 81       	ldd	r30, Y+2	; 0x02
    130e:	fb 81       	ldd	r31, Y+3	; 0x03
    1310:	80 81       	ld	r24, Z
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	c1 f4       	brne	.+48     	; 0x1346 <TIMER0_Init+0x72>
		{
			TCCR0 &= ~(config->Mode ) ;
    1316:	a3 e5       	ldi	r26, 0x53	; 83
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e3 e5       	ldi	r30, 0x53	; 83
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	98 2f       	mov	r25, r24
    1322:	ea 81       	ldd	r30, Y+2	; 0x02
    1324:	fb 81       	ldd	r31, Y+3	; 0x03
    1326:	80 81       	ld	r24, Z
    1328:	80 95       	com	r24
    132a:	89 23       	and	r24, r25
    132c:	8c 93       	st	X, r24
			TCCR0 |= config->Mode ;
    132e:	a3 e5       	ldi	r26, 0x53	; 83
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e3 e5       	ldi	r30, 0x53	; 83
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	90 81       	ld	r25, Z
    1338:	ea 81       	ldd	r30, Y+2	; 0x02
    133a:	fb 81       	ldd	r31, Y+3	; 0x03
    133c:	80 81       	ld	r24, Z
    133e:	89 2b       	or	r24, r25
    1340:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    1342:	19 82       	std	Y+1, r1	; 0x01
    1344:	02 c0       	rjmp	.+4      	; 0x134a <TIMER0_Init+0x76>
		}
		else
		{
			u8_retVal = E_NOK;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
		}

		if(NO_CLCK <= config->Clok && EXTERNAL_CLK_RISING >= config->Clok )
    134a:	ea 81       	ldd	r30, Y+2	; 0x02
    134c:	fb 81       	ldd	r31, Y+3	; 0x03
    134e:	81 81       	ldd	r24, Z+1	; 0x01
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	c0 f4       	brcc	.+48     	; 0x1384 <TIMER0_Init+0xb0>
		{
			TCCR0 &= ~(config->Clok) ;
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	98 2f       	mov	r25, r24
    1360:	ea 81       	ldd	r30, Y+2	; 0x02
    1362:	fb 81       	ldd	r31, Y+3	; 0x03
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	80 95       	com	r24
    1368:	89 23       	and	r24, r25
    136a:	8c 93       	st	X, r24
			TCCR0 |= config->Clok ;
    136c:	a3 e5       	ldi	r26, 0x53	; 83
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e5       	ldi	r30, 0x53	; 83
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	90 81       	ld	r25, Z
    1376:	ea 81       	ldd	r30, Y+2	; 0x02
    1378:	fb 81       	ldd	r31, Y+3	; 0x03
    137a:	81 81       	ldd	r24, Z+1	; 0x01
    137c:	89 2b       	or	r24, r25
    137e:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    1380:	19 82       	std	Y+1, r1	; 0x01
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <TIMER0_Init+0xb4>
		}
		else
		{
			u8_retVal = E_NOK;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
		}

		if( OCMI_ENABLE == config->OCME_Interrupt || OCMI_DISABLE == config->OCME_Interrupt )
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	29 f0       	breq	.+10     	; 0x139c <TIMER0_Init+0xc8>
    1392:	ea 81       	ldd	r30, Y+2	; 0x02
    1394:	fb 81       	ldd	r31, Y+3	; 0x03
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	88 23       	and	r24, r24
    139a:	99 f4       	brne	.+38     	; 0x13c2 <TIMER0_Init+0xee>
		{
			TIMSK &= ~(OCMI_ENABLE) ;
    139c:	a9 e5       	ldi	r26, 0x59	; 89
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 e5       	ldi	r30, 0x59	; 89
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8d 7f       	andi	r24, 0xFD	; 253
    13a8:	8c 93       	st	X, r24
			TIMSK |= config->OCME_Interrupt ;
    13aa:	a9 e5       	ldi	r26, 0x59	; 89
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e9 e5       	ldi	r30, 0x59	; 89
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	90 81       	ld	r25, Z
    13b4:	ea 81       	ldd	r30, Y+2	; 0x02
    13b6:	fb 81       	ldd	r31, Y+3	; 0x03
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	89 2b       	or	r24, r25
    13bc:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    13be:	19 82       	std	Y+1, r1	; 0x01
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <TIMER0_Init+0xf2>
		}
		else
		{
			u8_retVal = E_NOK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
		}

		if(TOF_ENABLE == config->TOFE_Interrupt || TOF_DISABLE == config->TOFE_Interrupt )
    13c6:	ea 81       	ldd	r30, Y+2	; 0x02
    13c8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	29 f0       	breq	.+10     	; 0x13da <TIMER0_Init+0x106>
    13d0:	ea 81       	ldd	r30, Y+2	; 0x02
    13d2:	fb 81       	ldd	r31, Y+3	; 0x03
    13d4:	83 81       	ldd	r24, Z+3	; 0x03
    13d6:	88 23       	and	r24, r24
    13d8:	99 f4       	brne	.+38     	; 0x1400 <TIMER0_Init+0x12c>
		{

			TIMSK &= ~(TOF_ENABLE) ;
    13da:	a9 e5       	ldi	r26, 0x59	; 89
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 e5       	ldi	r30, 0x59	; 89
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	8c 93       	st	X, r24
			TIMSK |= config->TOFE_Interrupt ;
    13e8:	a9 e5       	ldi	r26, 0x59	; 89
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e9 e5       	ldi	r30, 0x59	; 89
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	90 81       	ld	r25, Z
    13f2:	ea 81       	ldd	r30, Y+2	; 0x02
    13f4:	fb 81       	ldd	r31, Y+3	; 0x03
    13f6:	83 81       	ldd	r24, Z+3	; 0x03
    13f8:	89 2b       	or	r24, r25
    13fa:	8c 93       	st	X, r24
			u8_retVal = E_OK;
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <TIMER0_Init+0x130>
		}
		else
		{
			u8_retVal = E_NOK;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01



	}

return 	u8_retVal;
    1404:	89 81       	ldd	r24, Y+1	; 0x01

}
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <TIMER0_STOP>:
E_Status_t TIMER0_STOP(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	0f 92       	push	r0
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
	E_Status_t u8_retVal = E_OK;
    141c:	19 82       	std	Y+1, r1	; 0x01
	// CLOCK No source
	// TCCR0 = NO_CLCK
	CLEAR_BIT(TCCR0,CS00);
    141e:	a3 e5       	ldi	r26, 0x53	; 83
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e3 e5       	ldi	r30, 0x53	; 83
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8e 7f       	andi	r24, 0xFE	; 254
    142a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    142c:	a3 e5       	ldi	r26, 0x53	; 83
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e5       	ldi	r30, 0x53	; 83
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    143a:	a3 e5       	ldi	r26, 0x53	; 83
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e5       	ldi	r30, 0x53	; 83
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8b 7f       	andi	r24, 0xFB	; 251
    1446:	8c 93       	st	X, r24
	return 	u8_retVal;
    1448:	89 81       	ldd	r24, Y+1	; 0x01
}
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <TIMER0_GetComapreValue>:


E_Status_t TIMER0_GetComapreValue(ptr_uint8_t pu8_Ticks)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <TIMER0_GetComapreValue+0x6>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	9b 83       	std	Y+3, r25	; 0x03
    1460:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_NOK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
	*pu8_Ticks = OCR0 ;
    1466:	ec e5       	ldi	r30, 0x5C	; 92
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	ea 81       	ldd	r30, Y+2	; 0x02
    146e:	fb 81       	ldd	r31, Y+3	; 0x03
    1470:	80 83       	st	Z, r24
	return 	u8_retVal;
    1472:	89 81       	ldd	r24, Y+1	; 0x01

}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <TIMER0_SetComapreValue>:
E_Status_t TIMER0_SetComapreValue(u8 u8_Ticks)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <TIMER0_SetComapreValue+0x6>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    148c:	19 82       	std	Y+1, r1	; 0x01
    OCR0 = u8_Ticks ;
    148e:	ec e5       	ldi	r30, 0x5C	; 92
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
	return 	u8_retVal;
    1496:	89 81       	ldd	r24, Y+1	; 0x01
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <TIMER0_GetCounterValue>:

E_Status_t TIMER0_GetCounterValue(ptr_uint8_t pu8_Ticks)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <TIMER0_GetCounterValue+0x6>
    14a8:	0f 92       	push	r0
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	9b 83       	std	Y+3, r25	; 0x03
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
	*pu8_Ticks = TCNT0 ;
    14b4:	e2 e5       	ldi	r30, 0x52	; 82
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	ea 81       	ldd	r30, Y+2	; 0x02
    14bc:	fb 81       	ldd	r31, Y+3	; 0x03
    14be:	80 83       	st	Z, r24
	return 	u8_retVal;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <TIMER0_SetCounterValue>:
E_Status_t TIMER0_SetCounterValue(u8 u8_Ticks)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <TIMER0_SetCounterValue+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    14da:	19 82       	std	Y+1, r1	; 0x01
	TCNT0 = u8_Ticks ;
    14dc:	e2 e5       	ldi	r30, 0x52	; 82
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
	return 	u8_retVal;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <TIMER0_GetOverflowValue>:

E_Status_t TIMER0_GetOverflowValue(ptr_uint8_t pu8_Ticks)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <TIMER0_GetOverflowValue+0x6>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	9b 83       	std	Y+3, r25	; 0x03
    14fe:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    1500:	19 82       	std	Y+1, r1	; 0x01
   *pu8_Ticks = u8_TOFNUMBER ;
    1502:	80 91 7c 00 	lds	r24, 0x007C
    1506:	ea 81       	ldd	r30, Y+2	; 0x02
    1508:	fb 81       	ldd	r31, Y+3	; 0x03
    150a:	80 83       	st	Z, r24
	return 	u8_retVal;
    150c:	89 81       	ldd	r24, Y+1	; 0x01

}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <TIMER0_SetOverflowValue>:
E_Status_t TIMER0_SetOverflowValue(u8 u8_Ticks)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <TIMER0_SetOverflowValue+0x6>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    1526:	19 82       	std	Y+1, r1	; 0x01
	u8_TOFNUMBER = u8_Ticks;
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	80 93 7c 00 	sts	0x007C, r24
	return 	u8_retVal;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <TIMER0_SetCallBack_OVERFLOW>:

E_Status_t TIMER0_SetCallBack_OVERFLOW(Ptr_VoidFunVoid CallBack )
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <TIMER0_SetCallBack_OVERFLOW+0x6>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	9b 83       	std	Y+3, r25	; 0x03
    1548:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    154a:	19 82       	std	Y+1, r1	; 0x01
    CallBack_OverFlow = CallBack ;
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	90 93 75 00 	sts	0x0075, r25
    1554:	80 93 74 00 	sts	0x0074, r24
	return 	u8_retVal;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <TIMER0_SetCallBack_CompareMatch>:
E_Status_t TIMER0_SetCallBack_CompareMatch(Ptr_VoidFunVoid CallBack )
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	00 d0       	rcall	.+0      	; 0x156c <TIMER0_SetCallBack_CompareMatch+0x6>
    156c:	0f 92       	push	r0
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	9b 83       	std	Y+3, r25	; 0x03
    1574:	8a 83       	std	Y+2, r24	; 0x02
	E_Status_t u8_retVal = E_OK;
    1576:	19 82       	std	Y+1, r1	; 0x01
    CallBack_Cmpare_Match = CallBack;
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	90 93 77 00 	sts	0x0077, r25
    1580:	80 93 76 00 	sts	0x0076, r24
	return 	u8_retVal;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <__vector_10>:


// ISR

ISR(TIMER0_COMP_vect)
{   u8_TOFNUMBER++;
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	80 91 7c 00 	lds	r24, 0x007C
    15c0:	8f 5f       	subi	r24, 0xFF	; 255
    15c2:	80 93 7c 00 	sts	0x007C, r24
	CallBack_Cmpare_Match();
    15c6:	e0 91 76 00 	lds	r30, 0x0076
    15ca:	f0 91 77 00 	lds	r31, 0x0077
    15ce:	09 95       	icall
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	u8_TOFNUMBER++;
    1620:	80 91 7c 00 	lds	r24, 0x007C
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 7c 00 	sts	0x007C, r24
	CallBack_OverFlow();
    162a:	e0 91 74 00 	lds	r30, 0x0074
    162e:	f0 91 75 00 	lds	r31, 0x0075
    1632:	09 95       	icall


}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	ff 91       	pop	r31
    163a:	ef 91       	pop	r30
    163c:	bf 91       	pop	r27
    163e:	af 91       	pop	r26
    1640:	9f 91       	pop	r25
    1642:	8f 91       	pop	r24
    1644:	7f 91       	pop	r23
    1646:	6f 91       	pop	r22
    1648:	5f 91       	pop	r21
    164a:	4f 91       	pop	r20
    164c:	3f 91       	pop	r19
    164e:	2f 91       	pop	r18
    1650:	0f 90       	pop	r0
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	0f 90       	pop	r0
    1656:	1f 90       	pop	r1
    1658:	18 95       	reti

0000165a <UART_Init>:
 */
#include "UART.h"
void (*GP_IRQ_CallBack)(void);

void UART_Init(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62

	UBRRL = 51;    // 9600 buad rate
    1662:	e9 e2       	ldi	r30, 0x29	; 41
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	83 e3       	ldi	r24, 0x33	; 51
    1668:	80 83       	st	Z, r24

   CLEAR_BIT(UCSRA, U2X);
    166a:	ab e2       	ldi	r26, 0x2B	; 43
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e2       	ldi	r30, 0x2B	; 43
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8d 7f       	andi	r24, 0xFD	; 253
    1676:	8c 93       	st	X, r24
   * all by default we wantn't  to config it
   *
   * */

	//Enable UART Receive and Transmit
	SET_BIT(UCSRB,TXEN);
    1678:	aa e2       	ldi	r26, 0x2A	; 42
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ea e2       	ldi	r30, 0x2A	; 42
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    1686:	aa e2       	ldi	r26, 0x2A	; 42
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ea e2       	ldi	r30, 0x2A	; 42
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	8c 93       	st	X, r24


}
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <UART_SendChar>:
void UART_SendChar(u8 Data)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
	while (!READ_BIT(UCSRA,UDRE));
    16a6:	eb e2       	ldi	r30, 0x2B	; 43
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	82 95       	swap	r24
    16ae:	86 95       	lsr	r24
    16b0:	87 70       	andi	r24, 0x07	; 7
    16b2:	88 2f       	mov	r24, r24
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	90 70       	andi	r25, 0x00	; 0
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	a1 f3       	breq	.-24     	; 0x16a6 <UART_SendChar+0xc>
	UDR = Data;
    16be:	ec e2       	ldi	r30, 0x2C	; 44
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 83       	st	Z, r24


}
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <UART_ReceiveChar>:
u8 UART_ReceiveChar(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62

	while (!READ_BIT(UCSRA,RXC));
    16d8:	eb e2       	ldi	r30, 0x2B	; 43
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 23       	and	r24, r24
    16e0:	dc f7       	brge	.-10     	; 0x16d8 <UART_ReceiveChar+0xa>
	u8 temp = UDR;
    16e2:	ec e2       	ldi	r30, 0x2C	; 44
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <UART_SendString>:

void UART_SendString(u8 *ptr){
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <UART_SendString+0x6>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	0a c0       	rjmp	.+20     	; 0x1718 <UART_SendString+0x24>


	while(*ptr){
		UART_SendChar(*ptr);
    1704:	e9 81       	ldd	r30, Y+1	; 0x01
    1706:	fa 81       	ldd	r31, Y+2	; 0x02
    1708:	80 81       	ld	r24, Z
    170a:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
		ptr++;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
}

void UART_SendString(u8 *ptr){


	while(*ptr){
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	89 f7       	brne	.-30     	; 0x1704 <UART_SendString+0x10>
		UART_SendChar(*ptr);
		ptr++;
	}
	UART_SendChar(STOPCHAR);
    1722:	8d e0       	ldi	r24, 0x0D	; 13
    1724:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <UART_Send32>:

void UART_Send32(u32 data){
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	2a 97       	sbiw	r28, 0x0a	; 10
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	2b 83       	std	Y+3, r18	; 0x03
    1748:	3c 83       	std	Y+4, r19	; 0x04
    174a:	4d 83       	std	Y+5, r20	; 0x05
    174c:	5e 83       	std	Y+6, r21	; 0x06
    174e:	6f 83       	std	Y+7, r22	; 0x07
    1750:	78 87       	std	Y+8, r23	; 0x08
    1752:	89 87       	std	Y+9, r24	; 0x09
    1754:	9a 87       	std	Y+10, r25	; 0x0a
	u32 *ptr = &data;
    1756:	ce 01       	movw	r24, r28
    1758:	03 96       	adiw	r24, 0x03	; 3
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
	UART_SendChar(ptr[0]);
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	20 81       	ld	r18, Z
    1764:	31 81       	ldd	r19, Z+1	; 0x01
    1766:	42 81       	ldd	r20, Z+2	; 0x02
    1768:	53 81       	ldd	r21, Z+3	; 0x03
    176a:	64 81       	ldd	r22, Z+4	; 0x04
    176c:	75 81       	ldd	r23, Z+5	; 0x05
    176e:	86 81       	ldd	r24, Z+6	; 0x06
    1770:	97 81       	ldd	r25, Z+7	; 0x07
    1772:	82 2f       	mov	r24, r18
    1774:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
	UART_SendChar(ptr[1]);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	fc 01       	movw	r30, r24
    177e:	38 96       	adiw	r30, 0x08	; 8
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	42 81       	ldd	r20, Z+2	; 0x02
    1786:	53 81       	ldd	r21, Z+3	; 0x03
    1788:	64 81       	ldd	r22, Z+4	; 0x04
    178a:	75 81       	ldd	r23, Z+5	; 0x05
    178c:	86 81       	ldd	r24, Z+6	; 0x06
    178e:	97 81       	ldd	r25, Z+7	; 0x07
    1790:	82 2f       	mov	r24, r18
    1792:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
	UART_SendChar(ptr[2]);
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	fc 01       	movw	r30, r24
    179c:	70 96       	adiw	r30, 0x10	; 16
    179e:	20 81       	ld	r18, Z
    17a0:	31 81       	ldd	r19, Z+1	; 0x01
    17a2:	42 81       	ldd	r20, Z+2	; 0x02
    17a4:	53 81       	ldd	r21, Z+3	; 0x03
    17a6:	64 81       	ldd	r22, Z+4	; 0x04
    17a8:	75 81       	ldd	r23, Z+5	; 0x05
    17aa:	86 81       	ldd	r24, Z+6	; 0x06
    17ac:	97 81       	ldd	r25, Z+7	; 0x07
    17ae:	82 2f       	mov	r24, r18
    17b0:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
	UART_SendChar(ptr[3]);
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	fc 01       	movw	r30, r24
    17ba:	78 96       	adiw	r30, 0x18	; 24
    17bc:	20 81       	ld	r18, Z
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	42 81       	ldd	r20, Z+2	; 0x02
    17c2:	53 81       	ldd	r21, Z+3	; 0x03
    17c4:	64 81       	ldd	r22, Z+4	; 0x04
    17c6:	75 81       	ldd	r23, Z+5	; 0x05
    17c8:	86 81       	ldd	r24, Z+6	; 0x06
    17ca:	97 81       	ldd	r25, Z+7	; 0x07
    17cc:	82 2f       	mov	r24, r18
    17ce:	0e 94 4d 0b 	call	0x169a	; 0x169a <UART_SendChar>
}
    17d2:	2a 96       	adiw	r28, 0x0a	; 10
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <UART_Receive32>:

u32 UART_Receive32(void){
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	2a 97       	sbiw	r28, 0x0a	; 10
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
   u32 *ptr, data;
   ptr = &data;
    1808:	ce 01       	movw	r24, r28
    180a:	03 96       	adiw	r24, 0x03	; 3
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
   ptr[0] = UART_ReceiveChar();
    1810:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	50 e0       	ldi	r21, 0x00	; 0
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	e9 81       	ldd	r30, Y+1	; 0x01
    1826:	fa 81       	ldd	r31, Y+2	; 0x02
    1828:	20 83       	st	Z, r18
    182a:	31 83       	std	Z+1, r19	; 0x01
    182c:	42 83       	std	Z+2, r20	; 0x02
    182e:	53 83       	std	Z+3, r21	; 0x03
    1830:	64 83       	std	Z+4, r22	; 0x04
    1832:	75 83       	std	Z+5, r23	; 0x05
    1834:	86 83       	std	Z+6, r24	; 0x06
    1836:	97 83       	std	Z+7, r25	; 0x07
   ptr[1] = UART_ReceiveChar();
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	8c 01       	movw	r16, r24
    183e:	08 5f       	subi	r16, 0xF8	; 248
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	f8 01       	movw	r30, r16
    1858:	20 83       	st	Z, r18
    185a:	f8 01       	movw	r30, r16
    185c:	31 83       	std	Z+1, r19	; 0x01
    185e:	f8 01       	movw	r30, r16
    1860:	42 83       	std	Z+2, r20	; 0x02
    1862:	f8 01       	movw	r30, r16
    1864:	53 83       	std	Z+3, r21	; 0x03
    1866:	f8 01       	movw	r30, r16
    1868:	64 83       	std	Z+4, r22	; 0x04
    186a:	f8 01       	movw	r30, r16
    186c:	75 83       	std	Z+5, r23	; 0x05
    186e:	f8 01       	movw	r30, r16
    1870:	86 83       	std	Z+6, r24	; 0x06
    1872:	f8 01       	movw	r30, r16
    1874:	97 83       	std	Z+7, r25	; 0x07
   ptr[2] = UART_ReceiveChar();
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	8c 01       	movw	r16, r24
    187c:	00 5f       	subi	r16, 0xF0	; 240
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	f8 01       	movw	r30, r16
    1896:	20 83       	st	Z, r18
    1898:	f8 01       	movw	r30, r16
    189a:	31 83       	std	Z+1, r19	; 0x01
    189c:	f8 01       	movw	r30, r16
    189e:	42 83       	std	Z+2, r20	; 0x02
    18a0:	f8 01       	movw	r30, r16
    18a2:	53 83       	std	Z+3, r21	; 0x03
    18a4:	f8 01       	movw	r30, r16
    18a6:	64 83       	std	Z+4, r22	; 0x04
    18a8:	f8 01       	movw	r30, r16
    18aa:	75 83       	std	Z+5, r23	; 0x05
    18ac:	f8 01       	movw	r30, r16
    18ae:	86 83       	std	Z+6, r24	; 0x06
    18b0:	f8 01       	movw	r30, r16
    18b2:	97 83       	std	Z+7, r25	; 0x07
   ptr[3] = UART_ReceiveChar();
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	8c 01       	movw	r16, r24
    18ba:	08 5e       	subi	r16, 0xE8	; 232
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	f8 01       	movw	r30, r16
    18d4:	20 83       	st	Z, r18
    18d6:	f8 01       	movw	r30, r16
    18d8:	31 83       	std	Z+1, r19	; 0x01
    18da:	f8 01       	movw	r30, r16
    18dc:	42 83       	std	Z+2, r20	; 0x02
    18de:	f8 01       	movw	r30, r16
    18e0:	53 83       	std	Z+3, r21	; 0x03
    18e2:	f8 01       	movw	r30, r16
    18e4:	64 83       	std	Z+4, r22	; 0x04
    18e6:	f8 01       	movw	r30, r16
    18e8:	75 83       	std	Z+5, r23	; 0x05
    18ea:	f8 01       	movw	r30, r16
    18ec:	86 83       	std	Z+6, r24	; 0x06
    18ee:	f8 01       	movw	r30, r16
    18f0:	97 83       	std	Z+7, r25	; 0x07

   return data;
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	4d 81       	ldd	r20, Y+5	; 0x05
    18f8:	5e 81       	ldd	r21, Y+6	; 0x06
    18fa:	6f 81       	ldd	r22, Y+7	; 0x07
    18fc:	78 85       	ldd	r23, Y+8	; 0x08
    18fe:	89 85       	ldd	r24, Y+9	; 0x09
    1900:	9a 85       	ldd	r25, Y+10	; 0x0a
    1902:	a2 2e       	mov	r10, r18
    1904:	b3 2e       	mov	r11, r19
    1906:	c4 2e       	mov	r12, r20
    1908:	d5 2e       	mov	r13, r21
    190a:	e6 2e       	mov	r14, r22
    190c:	f7 2e       	mov	r15, r23
    190e:	08 2f       	mov	r16, r24
    1910:	19 2f       	mov	r17, r25
}
    1912:	2a 2d       	mov	r18, r10
    1914:	3b 2d       	mov	r19, r11
    1916:	4c 2d       	mov	r20, r12
    1918:	5d 2d       	mov	r21, r13
    191a:	6e 2d       	mov	r22, r14
    191c:	7f 2d       	mov	r23, r15
    191e:	80 2f       	mov	r24, r16
    1920:	91 2f       	mov	r25, r17
    1922:	2a 96       	adiw	r28, 0x0a	; 10
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	08 95       	ret

00001944 <UART_ReceiveString>:

void UART_ReceiveString(u8 *ptr, u8 MAX){
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <UART_ReceiveString+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <UART_ReceiveString+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
    1956:	6d 83       	std	Y+5, r22	; 0x05
	u8 i = 0, temp;
    1958:	1a 82       	std	Y+2, r1	; 0x02
	temp = UART_ReceiveChar();
    195a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	10 c0       	rjmp	.+32     	; 0x1982 <UART_ReceiveString+0x3e>
	while( i<MAX && temp != STOPCHAR ){
		ptr[i] = temp;
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	fc 01       	movw	r30, r24
    196e:	e2 0f       	add	r30, r18
    1970:	f3 1f       	adc	r31, r19
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	80 83       	st	Z, r24
		temp = UART_ReceiveChar();
    1976:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_ReceiveChar>
    197a:	89 83       	std	Y+1, r24	; 0x01
		i++;
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	8a 83       	std	Y+2, r24	; 0x02
}

void UART_ReceiveString(u8 *ptr, u8 MAX){
	u8 i = 0, temp;
	temp = UART_ReceiveChar();
	while( i<MAX && temp != STOPCHAR ){
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	98 17       	cp	r25, r24
    1988:	18 f4       	brcc	.+6      	; 0x1990 <UART_ReceiveString+0x4c>
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	8d 30       	cpi	r24, 0x0D	; 13
    198e:	49 f7       	brne	.-46     	; 0x1962 <UART_ReceiveString+0x1e>
		ptr[i] = temp;
		temp = UART_ReceiveChar();
		i++;
	}
	ptr[i] = '\0';
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	fc 01       	movw	r30, r24
    199c:	e2 0f       	add	r30, r18
    199e:	f3 1f       	adc	r31, r19
    19a0:	10 82       	st	Z, r1
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <UART_Receive_periodChech>:

u8 UART_Receive_periodChech(u8 *ptr){
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <UART_Receive_periodChech+0x6>
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01

	if(READ_BIT(UCSRA,RXC))
    19c2:	eb e2       	ldi	r30, 0x2B	; 43
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	88 23       	and	r24, r24
    19ca:	4c f4       	brge	.+18     	; 0x19de <UART_Receive_periodChech+0x2c>
	{
		*ptr = UDR;
    19cc:	ec e2       	ldi	r30, 0x2C	; 44
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	e9 81       	ldd	r30, Y+1	; 0x01
    19d4:	fa 81       	ldd	r31, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
		return 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <UART_Receive_periodChech+0x2e>

	}
	else
	{
		return 0;
    19de:	1b 82       	std	Y+3, r1	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <UART_RX_Interrupt_Enable>:

void UART_RX_Interrupt_Enable(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,RXCIE);
    19f6:	ab e2       	ldi	r26, 0x2B	; 43
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	eb e2       	ldi	r30, 0x2B	; 43
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	80 68       	ori	r24, 0x80	; 128
    1a02:	8c 93       	st	X, r24
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <UART_RX_Interrupt_Disable>:
void UART_RX_Interrupt_Disable(void)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,RXCIE);
    1a12:	ab e2       	ldi	r26, 0x2B	; 43
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e2       	ldi	r30, 0x2B	; 43
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 77       	andi	r24, 0x7F	; 127
    1a1e:	8c 93       	st	X, r24
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <UART_TX_Interrupt_Enable>:
void UART_TX_Interrupt_Enable(void)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,TXCIE);
    1a2e:	ab e2       	ldi	r26, 0x2B	; 43
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	eb e2       	ldi	r30, 0x2B	; 43
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 64       	ori	r24, 0x40	; 64
    1a3a:	8c 93       	st	X, r24
}
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <UART_TX_Interrupt_Disable>:
void UART_TX_Interrupt_Disable(void)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,TXCIE);
    1a4a:	ab e2       	ldi	r26, 0x2B	; 43
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e2       	ldi	r30, 0x2B	; 43
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	8f 7b       	andi	r24, 0xBF	; 191
    1a56:	8c 93       	st	X, r24
}
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <UART_SendNoblock>:


void UART_SendNoblock(u8 data){
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	0f 92       	push	r0
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    1a6a:	ec e2       	ldi	r30, 0x2C	; 44
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	80 83       	st	Z, r24
}
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <UART_ReceiveNoblock>:
u8 UART_ReceiveNoblock(void){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62


	return UDR;
    1a82:	ec e2       	ldi	r30, 0x2C	; 44
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <__vector_13>:


ISR(USART_RXC_vect)
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    1ab8:	e0 91 7f 00 	lds	r30, 0x007F
    1abc:	f0 91 80 00 	lds	r31, 0x0080
    1ac0:	09 95       	icall
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	ff 91       	pop	r31
    1ac8:	ef 91       	pop	r30
    1aca:	bf 91       	pop	r27
    1acc:	af 91       	pop	r26
    1ace:	9f 91       	pop	r25
    1ad0:	8f 91       	pop	r24
    1ad2:	7f 91       	pop	r23
    1ad4:	6f 91       	pop	r22
    1ad6:	5f 91       	pop	r21
    1ad8:	4f 91       	pop	r20
    1ada:	3f 91       	pop	r19
    1adc:	2f 91       	pop	r18
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <__vector_15>:

ISR(USART_TXC_vect)
{
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_CallBack();
    1b12:	e0 91 7f 00 	lds	r30, 0x007F
    1b16:	f0 91 80 00 	lds	r31, 0x0080
    1b1a:	09 95       	icall
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	ff 91       	pop	r31
    1b22:	ef 91       	pop	r30
    1b24:	bf 91       	pop	r27
    1b26:	af 91       	pop	r26
    1b28:	9f 91       	pop	r25
    1b2a:	8f 91       	pop	r24
    1b2c:	7f 91       	pop	r23
    1b2e:	6f 91       	pop	r22
    1b30:	5f 91       	pop	r21
    1b32:	4f 91       	pop	r20
    1b34:	3f 91       	pop	r19
    1b36:	2f 91       	pop	r18
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti

00001b42 <MCAL_WDT_ON>:




void MCAL_WDT_ON(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ( 1 << WDE | 1 << WDP1 | 1<<WDP2);    // Time out 1sec
    1b4a:	a1 e4       	ldi	r26, 0x41	; 65
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e1 e4       	ldi	r30, 0x41	; 65
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8e 60       	ori	r24, 0x0E	; 14
    1b56:	8c 93       	st	X, r24
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <MCAL_WDT_OFF>:

void MCAL_WDT_OFF(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDE | 1<<WDTOE);
    1b66:	a1 e4       	ldi	r26, 0x41	; 65
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e1 e4       	ldi	r30, 0x41	; 65
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 61       	ori	r24, 0x18	; 24
    1b72:	8c 93       	st	X, r24
	WDTCR = 0x00;
    1b74:	e1 e4       	ldi	r30, 0x41	; 65
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	10 82       	st	Z, r1
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <HAL_MAX7221Init>:
#include "../MCAL/SPI.h"
#include "MAX7221.h"
#include <avr/io.h>


void HAL_MAX7221Init(){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	28 97       	sbiw	r28, 0x08	; 8
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigType config;
		config.CLK = SPI_Fosc4;
    1b94:	1a 82       	std	Y+2, r1	; 0x02
		config.DoubleSpedd = SPI_DOUBLE_SPEDD_DISABLE;
    1b96:	1f 82       	std	Y+7, r1	; 0x07
		config.CLK_Polarity = SPI_IDL_CLK_LOW;
    1b98:	1c 82       	std	Y+4, r1	; 0x04
		config.Sampling_EDG = SPI_First_EDG;
    1b9a:	1d 82       	std	Y+5, r1	; 0x05
		config.Enable= SPI_Enable_ON;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
		config.interrupt_state = SPI_interruptDisable;
    1ba0:	18 86       	std	Y+8, r1	; 0x08
		config.order = SPI_MSB;
    1ba2:	1e 82       	std	Y+6, r1	; 0x06
		config.mode = SPI_MODE_Master;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01


		DDRB |=  1<<MOSI  | 1<<SS   | 1<<SCK;
    1ba8:	a7 e3       	ldi	r26, 0x37	; 55
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e7 e3       	ldi	r30, 0x37	; 55
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 6b       	ori	r24, 0xB0	; 176
    1bb4:	8c 93       	st	X, r24
		/* Set MISO input */
		DDRB &= ~(1<<MISO);
    1bb6:	a7 e3       	ldi	r26, 0x37	; 55
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e7 e3       	ldi	r30, 0x37	; 55
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8f 7b       	andi	r24, 0xBF	; 191
    1bc2:	8c 93       	st	X, r24

		 MCAL_SPI_Init(&config);
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_SPI_Init>
}
    1bcc:	28 96       	adiw	r28, 0x08	; 8
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <HAL_MAX7221_Send>:

void HAL_MAX7221_Send(u8 cmd, u8 data){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <HAL_MAX7221_Send+0x6>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02



	PORTB &= ~(1<<SS);  //drive low
    1bec:	a8 e3       	ldi	r26, 0x38	; 56
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e8 e3       	ldi	r30, 0x38	; 56
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8f 7e       	andi	r24, 0xEF	; 239
    1bf8:	8c 93       	st	X, r24
	MCAL_SPI_Send(cmd);  //write CMD
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <MCAL_SPI_Send>
	MCAL_SPI_Send(data); //Write Data
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <MCAL_SPI_Send>
	PORTB |= (1<<SS);   // drive High
    1c06:	a8 e3       	ldi	r26, 0x38	; 56
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e8 e3       	ldi	r30, 0x38	; 56
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 61       	ori	r24, 0x10	; 16
    1c12:	8c 93       	st	X, r24




}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <Keypad_init>:
char key_row[]={R0, R1, R2, R3};
char key_column[]={C0, C1, C2, C3};


void Keypad_init()
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~(1<<R0 | 1<<R1 | 1<<R2 | 1<<R3);
    1c26:	a1 e3       	ldi	r26, 0x31	; 49
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e1 e3       	ldi	r30, 0x31	; 49
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 7f       	andi	r24, 0xF0	; 240
    1c32:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= (1<<C0 | 1<<C1 | 1<<C2 | 1<<C3);
    1c34:	a1 e3       	ldi	r26, 0x31	; 49
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 6f       	ori	r24, 0xF0	; 240
    1c40:	8c 93       	st	X, r24
	KEYPAD_PORT =0xff; //active PUR for input pins
    1c42:	e2 e3       	ldi	r30, 0x32	; 50
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	80 83       	st	Z, r24



}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <Keypad_getkey>:
char Keypad_getkey()
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	27 97       	sbiw	r28, 0x07	; 7
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for(i=0; i<4; i++){
    1c64:	1c 82       	std	Y+4, r1	; 0x04
    1c66:	1b 82       	std	Y+3, r1	; 0x03
    1c68:	06 c1       	rjmp	.+524    	; 0x1e76 <Keypad_getkey+0x226>

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
    1c6a:	a2 e3       	ldi	r26, 0x32	; 50
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e2 e3       	ldi	r30, 0x32	; 50
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 6f       	ori	r24, 0xF0	; 240
    1c76:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<key_column[i]);
    1c78:	a2 e3       	ldi	r26, 0x32	; 50
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e2 e3       	ldi	r30, 0x32	; 50
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	fc 01       	movw	r30, r24
    1c8a:	e4 59       	subi	r30, 0x94	; 148
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <Keypad_getkey+0x50>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <Keypad_getkey+0x4c>
    1ca4:	80 95       	com	r24
    1ca6:	84 23       	and	r24, r20
    1ca8:	8c 93       	st	X, r24

		for(j=0; j<4; j++){
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	19 82       	std	Y+1, r1	; 0x01
    1cae:	d8 c0       	rjmp	.+432    	; 0x1e60 <Keypad_getkey+0x210>

			if(!(keypadPIN & (1<<key_row[j]))){
    1cb0:	e0 e3       	ldi	r30, 0x30	; 48
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	e8 59       	subi	r30, 0x98	; 152
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a9 01       	movw	r20, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <Keypad_getkey+0x82>
    1cce:	55 95       	asr	r21
    1cd0:	47 95       	ror	r20
    1cd2:	8a 95       	dec	r24
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <Keypad_getkey+0x7e>
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <Keypad_getkey+0x92>
    1ce0:	ba c0       	rjmp	.+372    	; 0x1e56 <Keypad_getkey+0x206>

				while(!(keypadPIN & (1<<key_row[j])));
    1ce2:	e0 e3       	ldi	r30, 0x30	; 48
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	e8 59       	subi	r30, 0x98	; 152
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <Keypad_getkey+0xb4>
    1d00:	55 95       	asr	r21
    1d02:	47 95       	ror	r20
    1d04:	8a 95       	dec	r24
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <Keypad_getkey+0xb0>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	90 70       	andi	r25, 0x00	; 0
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	41 f3       	breq	.-48     	; 0x1ce2 <Keypad_getkey+0x92>

				switch(i){
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	9f 83       	std	Y+7, r25	; 0x07
    1d18:	8e 83       	std	Y+6, r24	; 0x06
    1d1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d1e:	41 30       	cpi	r20, 0x01	; 1
    1d20:	51 05       	cpc	r21, r1
    1d22:	c1 f1       	breq	.+112    	; 0x1d94 <Keypad_getkey+0x144>
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	9f 81       	ldd	r25, Y+7	; 0x07
    1d28:	82 30       	cpi	r24, 0x02	; 2
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	34 f4       	brge	.+12     	; 0x1d3a <Keypad_getkey+0xea>
    1d2e:	4e 81       	ldd	r20, Y+6	; 0x06
    1d30:	5f 81       	ldd	r21, Y+7	; 0x07
    1d32:	41 15       	cp	r20, r1
    1d34:	51 05       	cpc	r21, r1
    1d36:	71 f0       	breq	.+28     	; 0x1d54 <Keypad_getkey+0x104>
    1d38:	8b c0       	rjmp	.+278    	; 0x1e50 <Keypad_getkey+0x200>
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <Keypad_getkey+0xf6>
    1d44:	47 c0       	rjmp	.+142    	; 0x1dd4 <Keypad_getkey+0x184>
    1d46:	4e 81       	ldd	r20, Y+6	; 0x06
    1d48:	5f 81       	ldd	r21, Y+7	; 0x07
    1d4a:	43 30       	cpi	r20, 0x03	; 3
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <Keypad_getkey+0x102>
    1d50:	60 c0       	rjmp	.+192    	; 0x1e12 <Keypad_getkey+0x1c2>
    1d52:	7e c0       	rjmp	.+252    	; 0x1e50 <Keypad_getkey+0x200>

				case 0:
					if(0 == j) return '7';
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <Keypad_getkey+0x112>
    1d5c:	57 e3       	ldi	r21, 0x37	; 55
    1d5e:	5d 83       	std	Y+5, r21	; 0x05
    1d60:	92 c0       	rjmp	.+292    	; 0x1e86 <Keypad_getkey+0x236>
					else if(1 == j) return '4';
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	91 05       	cpc	r25, r1
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <Keypad_getkey+0x122>
    1d6c:	84 e3       	ldi	r24, 0x34	; 52
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	8a c0       	rjmp	.+276    	; 0x1e86 <Keypad_getkey+0x236>
					else if(2 == j) return '1';
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	91 05       	cpc	r25, r1
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <Keypad_getkey+0x132>
    1d7c:	91 e3       	ldi	r25, 0x31	; 49
    1d7e:	9d 83       	std	Y+5, r25	; 0x05
    1d80:	82 c0       	rjmp	.+260    	; 0x1e86 <Keypad_getkey+0x236>
					else if(3 == j) return '@';
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	83 30       	cpi	r24, 0x03	; 3
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <Keypad_getkey+0x13e>
    1d8c:	64 c0       	rjmp	.+200    	; 0x1e56 <Keypad_getkey+0x206>
    1d8e:	40 e4       	ldi	r20, 0x40	; 64
    1d90:	4d 83       	std	Y+5, r20	; 0x05
    1d92:	79 c0       	rjmp	.+242    	; 0x1e86 <Keypad_getkey+0x236>
					break;
				case 1:
					if(0 == j) return '8';
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <Keypad_getkey+0x152>
    1d9c:	58 e3       	ldi	r21, 0x38	; 56
    1d9e:	5d 83       	std	Y+5, r21	; 0x05
    1da0:	72 c0       	rjmp	.+228    	; 0x1e86 <Keypad_getkey+0x236>
					else if(1 == j) return '5';
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <Keypad_getkey+0x162>
    1dac:	85 e3       	ldi	r24, 0x35	; 53
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	6a c0       	rjmp	.+212    	; 0x1e86 <Keypad_getkey+0x236>
					else if(2 == j) return '2';
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	91 05       	cpc	r25, r1
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <Keypad_getkey+0x172>
    1dbc:	92 e3       	ldi	r25, 0x32	; 50
    1dbe:	9d 83       	std	Y+5, r25	; 0x05
    1dc0:	62 c0       	rjmp	.+196    	; 0x1e86 <Keypad_getkey+0x236>
					else if(3 == j) return '0';
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	91 05       	cpc	r25, r1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <Keypad_getkey+0x17e>
    1dcc:	44 c0       	rjmp	.+136    	; 0x1e56 <Keypad_getkey+0x206>
    1dce:	40 e3       	ldi	r20, 0x30	; 48
    1dd0:	4d 83       	std	Y+5, r20	; 0x05
    1dd2:	59 c0       	rjmp	.+178    	; 0x1e86 <Keypad_getkey+0x236>
					break;
				case 2:
					if(0 == j) return '9';
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	19 f4       	brne	.+6      	; 0x1de2 <Keypad_getkey+0x192>
    1ddc:	59 e3       	ldi	r21, 0x39	; 57
    1dde:	5d 83       	std	Y+5, r21	; 0x05
    1de0:	52 c0       	rjmp	.+164    	; 0x1e86 <Keypad_getkey+0x236>
					else if(1 == j) return '6';
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	19 f4       	brne	.+6      	; 0x1df2 <Keypad_getkey+0x1a2>
    1dec:	86 e3       	ldi	r24, 0x36	; 54
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	4a c0       	rjmp	.+148    	; 0x1e86 <Keypad_getkey+0x236>
					else if(2 == j) return '3';
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	91 05       	cpc	r25, r1
    1dfa:	19 f4       	brne	.+6      	; 0x1e02 <Keypad_getkey+0x1b2>
    1dfc:	93 e3       	ldi	r25, 0x33	; 51
    1dfe:	9d 83       	std	Y+5, r25	; 0x05
    1e00:	42 c0       	rjmp	.+132    	; 0x1e86 <Keypad_getkey+0x236>
					else if(3 == j) return '=';
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	29 f5       	brne	.+74     	; 0x1e56 <Keypad_getkey+0x206>
    1e0c:	4d e3       	ldi	r20, 0x3D	; 61
    1e0e:	4d 83       	std	Y+5, r20	; 0x05
    1e10:	3a c0       	rjmp	.+116    	; 0x1e86 <Keypad_getkey+0x236>
					break;
				case 3:
					if(0 == j) return '/';
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	9a 81       	ldd	r25, Y+2	; 0x02
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <Keypad_getkey+0x1d0>
    1e1a:	5f e2       	ldi	r21, 0x2F	; 47
    1e1c:	5d 83       	std	Y+5, r21	; 0x05
    1e1e:	33 c0       	rjmp	.+102    	; 0x1e86 <Keypad_getkey+0x236>
					else if(1 == j) return '*';
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	91 05       	cpc	r25, r1
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <Keypad_getkey+0x1e0>
    1e2a:	8a e2       	ldi	r24, 0x2A	; 42
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	2b c0       	rjmp	.+86     	; 0x1e86 <Keypad_getkey+0x236>
					else if(2 == j) return '-';
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	91 05       	cpc	r25, r1
    1e38:	19 f4       	brne	.+6      	; 0x1e40 <Keypad_getkey+0x1f0>
    1e3a:	9d e2       	ldi	r25, 0x2D	; 45
    1e3c:	9d 83       	std	Y+5, r25	; 0x05
    1e3e:	23 c0       	rjmp	.+70     	; 0x1e86 <Keypad_getkey+0x236>
					else if(3 == j) return '+';
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	83 30       	cpi	r24, 0x03	; 3
    1e46:	91 05       	cpc	r25, r1
    1e48:	31 f4       	brne	.+12     	; 0x1e56 <Keypad_getkey+0x206>
    1e4a:	4b e2       	ldi	r20, 0x2B	; 43
    1e4c:	4d 83       	std	Y+5, r20	; 0x05
    1e4e:	1b c0       	rjmp	.+54     	; 0x1e86 <Keypad_getkey+0x236>
					break;
				default:
					return 'A';
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	5d 83       	std	Y+5, r21	; 0x05
    1e54:	18 c0       	rjmp	.+48     	; 0x1e86 <Keypad_getkey+0x236>
	for(i=0; i<4; i++){

		KEYPAD_PORT |=  ((1<<C0 | 1<<C1 | 1<<C2 | 1<<C3));
		KEYPAD_PORT &= ~(1<<key_column[i]);

		for(j=0; j<4; j++){
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	91 05       	cpc	r25, r1
    1e68:	0c f4       	brge	.+2      	; 0x1e6c <Keypad_getkey+0x21c>
    1e6a:	22 cf       	rjmp	.-444    	; 0x1cb0 <Keypad_getkey+0x60>

}
char Keypad_getkey()
{
	int i,j;
	for(i=0; i<4; i++){
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	0c f4       	brge	.+2      	; 0x1e82 <Keypad_getkey+0x232>
    1e80:	f4 ce       	rjmp	.-536    	; 0x1c6a <Keypad_getkey+0x1a>
		}


	}

	return 'A';
    1e82:	81 e4       	ldi	r24, 0x41	; 65
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1e88:	27 96       	adiw	r28, 0x07	; 7
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_clear_screen>:
 *      Author: bassam
 */

#include "lcd.h"

void LCD_clear_screen(){
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
}
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_lcd_kick>:

void LCD_lcd_kick(){
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	2e 97       	sbiw	r28, 0x0e	; 14
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    1ec2:	a8 e3       	ldi	r26, 0x38	; 56
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e8 e3       	ldi	r30, 0x38	; 56
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	88 60       	ori	r24, 0x08	; 8
    1ece:	8c 93       	st	X, r24
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a8 e4       	ldi	r26, 0x48	; 72
    1ed6:	b2 e4       	ldi	r27, 0x42	; 66
    1ed8:	8b 87       	std	Y+11, r24	; 0x0b
    1eda:	9c 87       	std	Y+12, r25	; 0x0c
    1edc:	ad 87       	std	Y+13, r26	; 0x0d
    1ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a ef       	ldi	r20, 0xFA	; 250
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	8f 83       	std	Y+7, r24	; 0x07
    1efa:	98 87       	std	Y+8, r25	; 0x08
    1efc:	a9 87       	std	Y+9, r26	; 0x09
    1efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <LCD_lcd_kick+0x74>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	4c f5       	brge	.+82     	; 0x1f8c <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <LCD_lcd_kick+0xd4>
    1f64:	88 ec       	ldi	r24, 0xC8	; 200
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 83       	std	Y+4, r25	; 0x04
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_lcd_kick+0xc2>
    1f74:	9c 83       	std	Y+4, r25	; 0x04
    1f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <LCD_lcd_kick+0xb6>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <LCD_lcd_kick+0xfe>
    1fb0:	9a 83       	std	Y+2, r25	; 0x02
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    1fb4:	a8 e3       	ldi	r26, 0x38	; 56
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e8 e3       	ldi	r30, 0x38	; 56
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	87 7f       	andi	r24, 0xF7	; 247
    1fc0:	8c 93       	st	X, r24
}
    1fc2:	2e 96       	adiw	r28, 0x0e	; 14
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <LCD_GOTO_XY+0x6>
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	39 f4       	brne	.+14     	; 0x1ff6 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	80 31       	cpi	r24, 0x10	; 16
    1fec:	20 f4       	brcc	.+8      	; 0x1ff6 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 58       	subi	r24, 0x80	; 128
    1ff2:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	39 f4       	brne	.+14     	; 0x200a <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 31       	cpi	r24, 0x10	; 16
    2000:	20 f4       	brcc	.+8      	; 0x200a <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	80 54       	subi	r24, 0x40	; 64
    2006:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
		}
	}
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_INIT>:

void LCD_INIT(){
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	e4 97       	sbiw	r28, 0x34	; 52
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 ea       	ldi	r26, 0xA0	; 160
    202e:	b1 e4       	ldi	r27, 0x41	; 65
    2030:	89 ab       	std	Y+49, r24	; 0x31
    2032:	9a ab       	std	Y+50, r25	; 0x32
    2034:	ab ab       	std	Y+51, r26	; 0x33
    2036:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a ef       	ldi	r20, 0xFA	; 250
    2046:	54 e4       	ldi	r21, 0x44	; 68
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8d a7       	std	Y+45, r24	; 0x2d
    2052:	9e a7       	std	Y+46, r25	; 0x2e
    2054:	af a7       	std	Y+47, r26	; 0x2f
    2056:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2058:	6d a5       	ldd	r22, Y+45	; 0x2d
    205a:	7e a5       	ldd	r23, Y+46	; 0x2e
    205c:	8f a5       	ldd	r24, Y+47	; 0x2f
    205e:	98 a9       	ldd	r25, Y+48	; 0x30
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_INIT+0x66>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c a7       	std	Y+44, r25	; 0x2c
    2076:	8b a7       	std	Y+43, r24	; 0x2b
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    207a:	6d a5       	ldd	r22, Y+45	; 0x2d
    207c:	7e a5       	ldd	r23, Y+46	; 0x2e
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	69 a9       	ldd	r22, Y+49	; 0x31
    2094:	7a a9       	ldd	r23, Y+50	; 0x32
    2096:	8b a9       	ldd	r24, Y+51	; 0x33
    2098:	9c a9       	ldd	r25, Y+52	; 0x34
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9c a7       	std	Y+44, r25	; 0x2c
    20b8:	8b a7       	std	Y+43, r24	; 0x2b
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_INIT+0xc6>
    20bc:	88 ec       	ldi	r24, 0xC8	; 200
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9a a7       	std	Y+42, r25	; 0x2a
    20c2:	89 a7       	std	Y+41, r24	; 0x29
    20c4:	89 a5       	ldd	r24, Y+41	; 0x29
    20c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_INIT+0xb4>
    20cc:	9a a7       	std	Y+42, r25	; 0x2a
    20ce:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9c a7       	std	Y+44, r25	; 0x2c
    20d8:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8b a5       	ldd	r24, Y+43	; 0x2b
    20dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_INIT+0xa8>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    20e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    20e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ea:	98 a9       	ldd	r25, Y+48	; 0x30
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9c a7       	std	Y+44, r25	; 0x2c
    20f6:	8b a7       	std	Y+43, r24	; 0x2b
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	98 a7       	std	Y+40, r25	; 0x28
    20fe:	8f a3       	std	Y+39, r24	; 0x27
    2100:	8f a1       	ldd	r24, Y+39	; 0x27
    2102:	98 a5       	ldd	r25, Y+40	; 0x28
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_INIT+0xf0>
    2108:	98 a7       	std	Y+40, r25	; 0x28
    210a:	8f a3       	std	Y+39, r24	; 0x27
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
*/
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    210c:	a7 e3       	ldi	r26, 0x37	; 55
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e7 e3       	ldi	r30, 0x37	; 55
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8e 60       	ori	r24, 0x0E	; 14
    2118:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    211a:	a8 e3       	ldi	r26, 0x38	; 56
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e8 e3       	ldi	r30, 0x38	; 56
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	81 7f       	andi	r24, 0xF1	; 241
    2126:	8c 93       	st	X, r24
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e7       	ldi	r26, 0x70	; 112
    212e:	b1 e4       	ldi	r27, 0x41	; 65
    2130:	8b a3       	std	Y+35, r24	; 0x23
    2132:	9c a3       	std	Y+36, r25	; 0x24
    2134:	ad a3       	std	Y+37, r26	; 0x25
    2136:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6b a1       	ldd	r22, Y+35	; 0x23
    213a:	7c a1       	ldd	r23, Y+36	; 0x24
    213c:	8d a1       	ldd	r24, Y+37	; 0x25
    213e:	9e a1       	ldd	r25, Y+38	; 0x26
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8f 8f       	std	Y+31, r24	; 0x1f
    2152:	98 a3       	std	Y+32, r25	; 0x20
    2154:	a9 a3       	std	Y+33, r26	; 0x21
    2156:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2158:	6f 8d       	ldd	r22, Y+31	; 0x1f
    215a:	78 a1       	ldd	r23, Y+32	; 0x20
    215c:	89 a1       	ldd	r24, Y+33	; 0x21
    215e:	9a a1       	ldd	r25, Y+34	; 0x22
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <LCD_INIT+0x166>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e 8f       	std	Y+30, r25	; 0x1e
    2176:	8d 8f       	std	Y+29, r24	; 0x1d
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <LCD_INIT+0x1e4>
	else if (__tmp > 65535)
    217a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    217c:	78 a1       	ldd	r23, Y+32	; 0x20
    217e:	89 a1       	ldd	r24, Y+33	; 0x21
    2180:	9a a1       	ldd	r25, Y+34	; 0x22
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <LCD_INIT+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6b a1       	ldd	r22, Y+35	; 0x23
    2194:	7c a1       	ldd	r23, Y+36	; 0x24
    2196:	8d a1       	ldd	r24, Y+37	; 0x25
    2198:	9e a1       	ldd	r25, Y+38	; 0x26
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 8f       	std	Y+30, r25	; 0x1e
    21b8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <LCD_INIT+0x1c6>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 8f       	std	Y+28, r25	; 0x1c
    21c2:	8b 8f       	std	Y+27, r24	; 0x1b
    21c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <LCD_INIT+0x1b4>
    21cc:	9c 8f       	std	Y+28, r25	; 0x1c
    21ce:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e 8f       	std	Y+30, r25	; 0x1e
    21d8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <LCD_INIT+0x1a8>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <LCD_INIT+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21e6:	78 a1       	ldd	r23, Y+32	; 0x20
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 8f       	std	Y+30, r25	; 0x1e
    21f6:	8d 8f       	std	Y+29, r24	; 0x1d
    21f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21fc:	9a 8f       	std	Y+26, r25	; 0x1a
    21fe:	89 8f       	std	Y+25, r24	; 0x19
    2200:	89 8d       	ldd	r24, Y+25	; 0x19
    2202:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_INIT+0x1f0>
    2208:	9a 8f       	std	Y+26, r25	; 0x1a
    220a:	89 8f       	std	Y+25, r24	; 0x19
	//DataDir_LCD_PORT = 0xFF;
	_delay_ms(15);
	LCD_clear_screen();
    220c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clear_screen>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a8 ec       	ldi	r26, 0xC8	; 200
    2216:	b2 e4       	ldi	r27, 0x42	; 66
    2218:	8d 8b       	std	Y+21, r24	; 0x15
    221a:	9e 8b       	std	Y+22, r25	; 0x16
    221c:	af 8b       	std	Y+23, r26	; 0x17
    221e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	2b ea       	ldi	r18, 0xAB	; 171
    222a:	3a ea       	ldi	r19, 0xAA	; 170
    222c:	4a e2       	ldi	r20, 0x2A	; 42
    222e:	50 e4       	ldi	r21, 0x40	; 64
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	89 8b       	std	Y+17, r24	; 0x11
    223a:	9a 8b       	std	Y+18, r25	; 0x12
    223c:	ab 8b       	std	Y+19, r26	; 0x13
    223e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2240:	69 89       	ldd	r22, Y+17	; 0x11
    2242:	7a 89       	ldd	r23, Y+18	; 0x12
    2244:	8b 89       	ldd	r24, Y+19	; 0x13
    2246:	9c 89       	ldd	r25, Y+20	; 0x14
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	1c f4       	brge	.+6      	; 0x225e <LCD_INIT+0x24a>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	88 8b       	std	Y+16, r24	; 0x10
    225c:	91 c0       	rjmp	.+290    	; 0x2380 <LCD_INIT+0x36c>
	else if (__tmp > 255)
    225e:	69 89       	ldd	r22, Y+17	; 0x11
    2260:	7a 89       	ldd	r23, Y+18	; 0x12
    2262:	8b 89       	ldd	r24, Y+19	; 0x13
    2264:	9c 89       	ldd	r25, Y+20	; 0x14
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	53 e4       	ldi	r21, 0x43	; 67
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <LCD_INIT+0x264>
    2276:	7b c0       	rjmp	.+246    	; 0x236e <LCD_INIT+0x35a>
	{
		_delay_ms(__us / 1000.0);
    2278:	6d 89       	ldd	r22, Y+21	; 0x15
    227a:	7e 89       	ldd	r23, Y+22	; 0x16
    227c:	8f 89       	ldd	r24, Y+23	; 0x17
    227e:	98 8d       	ldd	r25, Y+24	; 0x18
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8c 87       	std	Y+12, r24	; 0x0c
    2292:	9d 87       	std	Y+13, r25	; 0x0d
    2294:	ae 87       	std	Y+14, r26	; 0x0e
    2296:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6c 85       	ldd	r22, Y+12	; 0x0c
    229a:	7d 85       	ldd	r23, Y+13	; 0x0d
    229c:	8e 85       	ldd	r24, Y+14	; 0x0e
    229e:	9f 85       	ldd	r25, Y+15	; 0x0f
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	88 87       	std	Y+8, r24	; 0x08
    22b2:	99 87       	std	Y+9, r25	; 0x09
    22b4:	aa 87       	std	Y+10, r26	; 0x0a
    22b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22b8:	68 85       	ldd	r22, Y+8	; 0x08
    22ba:	79 85       	ldd	r23, Y+9	; 0x09
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_INIT+0x2c6>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9f 83       	std	Y+7, r25	; 0x07
    22d6:	8e 83       	std	Y+6, r24	; 0x06
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_INIT+0x344>
	else if (__tmp > 65535)
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_INIT+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9f 83       	std	Y+7, r25	; 0x07
    2318:	8e 83       	std	Y+6, r24	; 0x06
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_INIT+0x326>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9d 83       	std	Y+5, r25	; 0x05
    2322:	8c 83       	std	Y+4, r24	; 0x04
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	9d 81       	ldd	r25, Y+5	; 0x05
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_INIT+0x314>
    232c:	9d 83       	std	Y+5, r25	; 0x05
    232e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8e 81       	ldd	r24, Y+6	; 0x06
    2332:	9f 81       	ldd	r25, Y+7	; 0x07
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9f 83       	std	Y+7, r25	; 0x07
    2338:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8e 81       	ldd	r24, Y+6	; 0x06
    233c:	9f 81       	ldd	r25, Y+7	; 0x07
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_INIT+0x308>
    2342:	24 c0       	rjmp	.+72     	; 0x238c <LCD_INIT+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	68 85       	ldd	r22, Y+8	; 0x08
    2346:	79 85       	ldd	r23, Y+9	; 0x09
    2348:	8a 85       	ldd	r24, Y+10	; 0x0a
    234a:	9b 85       	ldd	r25, Y+11	; 0x0b
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9f 83       	std	Y+7, r25	; 0x07
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_INIT+0x350>
    2368:	9b 83       	std	Y+3, r25	; 0x03
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	0f c0       	rjmp	.+30     	; 0x238c <LCD_INIT+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    236e:	69 89       	ldd	r22, Y+17	; 0x11
    2370:	7a 89       	ldd	r23, Y+18	; 0x12
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	88 8b       	std	Y+16, r24	; 0x10
    2380:	88 89       	ldd	r24, Y+16	; 0x10
    2382:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	8a 95       	dec	r24
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_INIT+0x372>
    238a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    238c:	88 e3       	ldi	r24, 0x38	; 56
    238e:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x33);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	//LCD_WRITE_COMMAND(0x0E);
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    2392:	86 e0       	ldi	r24, 0x06	; 6
    2394:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    2398:	80 e8       	ldi	r24, 0x80	; 128
    239a:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
    239e:	8f e0       	ldi	r24, 0x0F	; 15
    23a0:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>

}
    23a4:	e4 96       	adiw	r28, 0x34	; 52
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <LCD_check_lcd_isbusy+0x6>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    23c0:	ea e3       	ldi	r30, 0x3A	; 58
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	ea e3       	ldi	r30, 0x3A	; 58
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    23cc:	a8 e3       	ldi	r26, 0x38	; 56
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e8 e3       	ldi	r30, 0x38	; 56
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	84 60       	ori	r24, 0x04	; 4
    23d8:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    23da:	a8 e3       	ldi	r26, 0x38	; 56
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e8 e3       	ldi	r30, 0x38	; 56
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8d 7f       	andi	r24, 0xFD	; 253
    23e6:	8c 93       	st	X, r24
	LCD_lcd_kick();
    23e8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    23ec:	ea e3       	ldi	r30, 0x3A	; 58
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	ea e3       	ldi	r30, 0x3A	; 58
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    23fa:	a8 e3       	ldi	r26, 0x38	; 56
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e8 e3       	ldi	r30, 0x38	; 56
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8b 7f       	andi	r24, 0xFB	; 251
    2406:	8c 93       	st	X, r24
	
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	2f 97       	sbiw	r28, 0x0f	; 15
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    2428:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    242c:	eb e3       	ldi	r30, 0x3B	; 59
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
    2434:	a8 e3       	ldi	r26, 0x38	; 56
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e8 e3       	ldi	r30, 0x38	; 56
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	89 7f       	andi	r24, 0xF9	; 249
    2440:	8c 93       	st	X, r24
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e8       	ldi	r26, 0x80	; 128
    2448:	bf e3       	ldi	r27, 0x3F	; 63
    244a:	8b 87       	std	Y+11, r24	; 0x0b
    244c:	9c 87       	std	Y+12, r25	; 0x0c
    244e:	ad 87       	std	Y+13, r26	; 0x0d
    2450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a ef       	ldi	r20, 0xFA	; 250
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8f 83       	std	Y+7, r24	; 0x07
    246c:	98 87       	std	Y+8, r25	; 0x08
    246e:	a9 87       	std	Y+9, r26	; 0x09
    2470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <LCD_WRITE_COMMAND+0xe2>
    24d6:	88 ec       	ldi	r24, 0xC8	; 200
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_WRITE_COMMAND+0xd0>
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <LCD_WRITE_COMMAND+0xc4>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_WRITE_COMMAND+0x10c>
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    2526:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    252a:	2f 96       	adiw	r28, 0x0f	; 15
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	2f 97       	sbiw	r28, 0x0f	; 15
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    2552:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    2556:	eb e3       	ldi	r30, 0x3B	; 59
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    255e:	a8 e3       	ldi	r26, 0x38	; 56
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e8 e3       	ldi	r30, 0x38	; 56
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8b 7f       	andi	r24, 0xFB	; 251
    256a:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    256c:	a8 e3       	ldi	r26, 0x38	; 56
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e8 e3       	ldi	r30, 0x38	; 56
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	82 60       	ori	r24, 0x02	; 2
    2578:	8c 93       	st	X, r24
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	a0 e8       	ldi	r26, 0x80	; 128
    2580:	bf e3       	ldi	r27, 0x3F	; 63
    2582:	8b 87       	std	Y+11, r24	; 0x0b
    2584:	9c 87       	std	Y+12, r25	; 0x0c
    2586:	ad 87       	std	Y+13, r26	; 0x0d
    2588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258a:	6b 85       	ldd	r22, Y+11	; 0x0b
    258c:	7c 85       	ldd	r23, Y+12	; 0x0c
    258e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2590:	9e 85       	ldd	r25, Y+14	; 0x0e
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a ef       	ldi	r20, 0xFA	; 250
    2598:	54 e4       	ldi	r21, 0x44	; 68
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8f 83       	std	Y+7, r24	; 0x07
    25a4:	98 87       	std	Y+8, r25	; 0x08
    25a6:	a9 87       	std	Y+9, r26	; 0x09
    25a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	2c f4       	brge	.+10     	; 0x25cc <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
    25ca:	3f c0       	rjmp	.+126    	; 0x264a <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	4c f5       	brge	.+82     	; 0x2636 <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	0f c0       	rjmp	.+30     	; 0x262c <LCD_WRITE_CHAR+0xf0>
    260e:	88 ec       	ldi	r24, 0xC8	; 200
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_WRITE_CHAR+0xde>
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <LCD_WRITE_CHAR+0xd2>
    2634:	14 c0       	rjmp	.+40     	; 0x265e <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	6f 81       	ldd	r22, Y+7	; 0x07
    2638:	78 85       	ldd	r23, Y+8	; 0x08
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	9a 85       	ldd	r25, Y+10	; 0x0a
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	8d 81       	ldd	r24, Y+5	; 0x05
    264c:	9e 81       	ldd	r25, Y+6	; 0x06
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_WRITE_CHAR+0x11a>
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    265e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    2662:	2f 96       	adiw	r28, 0x0f	; 15
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	00 d0       	rcall	.+0      	; 0x267a <LCD_WRITE_STRING+0x6>
    267a:	00 d0       	rcall	.+0      	; 0x267c <LCD_WRITE_STRING+0x8>
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    2684:	1a 82       	std	Y+2, r1	; 0x02
    2686:	19 82       	std	Y+1, r1	; 0x01
    2688:	27 c0       	rjmp	.+78     	; 0x26d8 <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    2694:	eb 81       	ldd	r30, Y+3	; 0x03
    2696:	fc 81       	ldd	r31, Y+4	; 0x04
    2698:	20 81       	ld	r18, Z
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	9c 83       	std	Y+4, r25	; 0x04
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    26a4:	82 2f       	mov	r24, r18
    26a6:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
		if (count == 16)
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	80 31       	cpi	r24, 0x10	; 16
    26b0:	91 05       	cpc	r25, r1
    26b2:	29 f4       	brne	.+10     	; 0x26be <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_GOTO_XY>
    26bc:	0d c0       	rjmp	.+26     	; 0x26d8 <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	80 32       	cpi	r24, 0x20	; 32
    26c4:	91 05       	cpc	r25, r1
    26c6:	41 f4       	brne	.+16     	; 0x26d8 <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    26c8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_GOTO_XY>
			count = 0;
    26d4:	1a 82       	std	Y+2, r1	; 0x02
    26d6:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    26d8:	eb 81       	ldd	r30, Y+3	; 0x03
    26da:	fc 81       	ldd	r31, Y+4	; 0x04
    26dc:	80 81       	ld	r24, Z
    26de:	88 23       	and	r24, r24
    26e0:	a1 f6       	brne	.-88     	; 0x268a <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <LCD_custom_character>:


void LCD_custom_character(){
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	aa 97       	sbiw	r28, 0x2a	; 42
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITE_COMMAND(64);
    2704:	80 e4       	ldi	r24, 0x40	; 64
    2706:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(14);
    2710:	8e e0       	ldi	r24, 0x0E	; 14
    2712:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    2716:	81 e1       	ldi	r24, 0x11	; 17
    2718:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(2);
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2722:	84 e0       	ldi	r24, 0x04	; 4
    2724:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2728:	84 e0       	ldi	r24, 0x04	; 4
    272a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    2734:	84 e0       	ldi	r24, 0x04	; 4
    2736:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e2       	ldi	r26, 0x20	; 32
    274c:	b1 e4       	ldi	r27, 0x41	; 65
    274e:	8f a3       	std	Y+39, r24	; 0x27
    2750:	98 a7       	std	Y+40, r25	; 0x28
    2752:	a9 a7       	std	Y+41, r26	; 0x29
    2754:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	6f a1       	ldd	r22, Y+39	; 0x27
    2758:	78 a5       	ldd	r23, Y+40	; 0x28
    275a:	89 a5       	ldd	r24, Y+41	; 0x29
    275c:	9a a5       	ldd	r25, Y+42	; 0x2a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8b a3       	std	Y+35, r24	; 0x23
    2770:	9c a3       	std	Y+36, r25	; 0x24
    2772:	ad a3       	std	Y+37, r26	; 0x25
    2774:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2776:	6b a1       	ldd	r22, Y+35	; 0x23
    2778:	7c a1       	ldd	r23, Y+36	; 0x24
    277a:	8d a1       	ldd	r24, Y+37	; 0x25
    277c:	9e a1       	ldd	r25, Y+38	; 0x26
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_custom_character+0xa8>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9a a3       	std	Y+34, r25	; 0x22
    2794:	89 a3       	std	Y+33, r24	; 0x21
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_custom_character+0x126>
	else if (__tmp > 65535)
    2798:	6b a1       	ldd	r22, Y+35	; 0x23
    279a:	7c a1       	ldd	r23, Y+36	; 0x24
    279c:	8d a1       	ldd	r24, Y+37	; 0x25
    279e:	9e a1       	ldd	r25, Y+38	; 0x26
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_custom_character+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	6f a1       	ldd	r22, Y+39	; 0x27
    27b2:	78 a5       	ldd	r23, Y+40	; 0x28
    27b4:	89 a5       	ldd	r24, Y+41	; 0x29
    27b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9a a3       	std	Y+34, r25	; 0x22
    27d6:	89 a3       	std	Y+33, r24	; 0x21
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_custom_character+0x108>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	98 a3       	std	Y+32, r25	; 0x20
    27e0:	8f 8f       	std	Y+31, r24	; 0x1f
    27e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e4:	98 a1       	ldd	r25, Y+32	; 0x20
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_custom_character+0xf6>
    27ea:	98 a3       	std	Y+32, r25	; 0x20
    27ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	89 a1       	ldd	r24, Y+33	; 0x21
    27f0:	9a a1       	ldd	r25, Y+34	; 0x22
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9a a3       	std	Y+34, r25	; 0x22
    27f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	89 a1       	ldd	r24, Y+33	; 0x21
    27fa:	9a a1       	ldd	r25, Y+34	; 0x22
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_custom_character+0xea>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_custom_character+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6b a1       	ldd	r22, Y+35	; 0x23
    2804:	7c a1       	ldd	r23, Y+36	; 0x24
    2806:	8d a1       	ldd	r24, Y+37	; 0x25
    2808:	9e a1       	ldd	r25, Y+38	; 0x26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
    2816:	89 a1       	ldd	r24, Y+33	; 0x21
    2818:	9a a1       	ldd	r25, Y+34	; 0x22
    281a:	9e 8f       	std	Y+30, r25	; 0x1e
    281c:	8d 8f       	std	Y+29, r24	; 0x1d
    281e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_custom_character+0x132>
    2826:	9e 8f       	std	Y+30, r25	; 0x1e
    2828:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);


	LCD_WRITE_COMMAND(72);
    282a:	88 e4       	ldi	r24, 0x48	; 72
    282c:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(10);
    2836:	8a e0       	ldi	r24, 0x0A	; 10
    2838:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(21);
    283c:	85 e1       	ldi	r24, 0x15	; 21
    283e:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(17);
    2842:	81 e1       	ldi	r24, 0x11	; 17
    2844:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(18);
    2848:	82 e1       	ldi	r24, 0x12	; 18
    284a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(4);
    284e:	84 e0       	ldi	r24, 0x04	; 4
    2850:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,3);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	63 e0       	ldi	r22, 0x03	; 3
    2864:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(1);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 e2       	ldi	r26, 0x20	; 32
    2874:	b1 e4       	ldi	r27, 0x41	; 65
    2876:	89 8f       	std	Y+25, r24	; 0x19
    2878:	9a 8f       	std	Y+26, r25	; 0x1a
    287a:	ab 8f       	std	Y+27, r26	; 0x1b
    287c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a ef       	ldi	r20, 0xFA	; 250
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8d 8b       	std	Y+21, r24	; 0x15
    2898:	9e 8b       	std	Y+22, r25	; 0x16
    289a:	af 8b       	std	Y+23, r26	; 0x17
    289c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <LCD_custom_character+0x1d0>
		__ticks = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	3f c0       	rjmp	.+126    	; 0x293e <LCD_custom_character+0x24e>
	else if (__tmp > 65535)
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	4c f5       	brge	.+82     	; 0x292a <LCD_custom_character+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	69 8d       	ldd	r22, Y+25	; 0x19
    28da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <LCD_custom_character+0x230>
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9a 8b       	std	Y+18, r25	; 0x12
    2908:	89 8b       	std	Y+17, r24	; 0x11
    290a:	89 89       	ldd	r24, Y+17	; 0x11
    290c:	9a 89       	ldd	r25, Y+18	; 0x12
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_custom_character+0x21e>
    2912:	9a 8b       	std	Y+18, r25	; 0x12
    2914:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	9c 8b       	std	Y+20, r25	; 0x14
    291e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	8b 89       	ldd	r24, Y+19	; 0x13
    2922:	9c 89       	ldd	r25, Y+20	; 0x14
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	69 f7       	brne	.-38     	; 0x2902 <LCD_custom_character+0x212>
    2928:	14 c0       	rjmp	.+40     	; 0x2952 <LCD_custom_character+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	6d 89       	ldd	r22, Y+21	; 0x15
    292c:	7e 89       	ldd	r23, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
    293e:	8b 89       	ldd	r24, Y+19	; 0x13
    2940:	9c 89       	ldd	r25, Y+20	; 0x14
    2942:	98 8b       	std	Y+16, r25	; 0x10
    2944:	8f 87       	std	Y+15, r24	; 0x0f
    2946:	8f 85       	ldd	r24, Y+15	; 0x0f
    2948:	98 89       	ldd	r25, Y+16	; 0x10
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_custom_character+0x25a>
    294e:	98 8b       	std	Y+16, r25	; 0x10
    2950:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	LCD_WRITE_COMMAND(80);
    2952:	80 e5       	ldi	r24, 0x50	; 80
    2954:	0e 94 09 12 	call	0x2412	; 0x2412 <LCD_WRITE_COMMAND>
	LCD_WRITE_CHAR(0);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(20);
    295e:	84 e1       	ldi	r24, 0x14	; 20
    2960:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(11);
    2964:	8b e0       	ldi	r24, 0x0B	; 11
    2966:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(27);
    296a:	8b e1       	ldi	r24, 0x1B	; 27
    296c:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(28);
    2970:	8c e1       	ldi	r24, 0x1C	; 28
    2972:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(40);
    2976:	88 e2       	ldi	r24, 0x28	; 40
    2978:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_WRITE_CHAR(0);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
	LCD_GOTO_XY(1,5);
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	65 e0       	ldi	r22, 0x05	; 5
    298c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(2);
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_WRITE_CHAR>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a0 e2       	ldi	r26, 0x20	; 32
    299c:	b1 e4       	ldi	r27, 0x41	; 65
    299e:	8b 87       	std	Y+11, r24	; 0x0b
    29a0:	9c 87       	std	Y+12, r25	; 0x0c
    29a2:	ad 87       	std	Y+13, r26	; 0x0d
    29a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a ef       	ldi	r20, 0xFA	; 250
    29b4:	54 e4       	ldi	r21, 0x44	; 68
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8f 83       	std	Y+7, r24	; 0x07
    29c0:	98 87       	std	Y+8, r25	; 0x08
    29c2:	a9 87       	std	Y+9, r26	; 0x09
    29c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e8       	ldi	r20, 0x80	; 128
    29d4:	5f e3       	ldi	r21, 0x3F	; 63
    29d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29da:	88 23       	and	r24, r24
    29dc:	2c f4       	brge	.+10     	; 0x29e8 <LCD_custom_character+0x2f8>
		__ticks = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	3f c0       	rjmp	.+126    	; 0x2a66 <LCD_custom_character+0x376>
	else if (__tmp > 65535)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	3f ef       	ldi	r19, 0xFF	; 255
    29f4:	4f e7       	ldi	r20, 0x7F	; 127
    29f6:	57 e4       	ldi	r21, 0x47	; 71
    29f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fc:	18 16       	cp	r1, r24
    29fe:	4c f5       	brge	.+82     	; 0x2a52 <LCD_custom_character+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e2       	ldi	r20, 0x20	; 32
    2a0e:	51 e4       	ldi	r21, 0x41	; 65
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <LCD_custom_character+0x358>
    2a2a:	88 ec       	ldi	r24, 0xC8	; 200
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <LCD_custom_character+0x346>
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <LCD_custom_character+0x33a>
    2a50:	14 c0       	rjmp	.+40     	; 0x2a7a <LCD_custom_character+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a52:	6f 81       	ldd	r22, Y+7	; 0x07
    2a54:	78 85       	ldd	r23, Y+8	; 0x08
    2a56:	89 85       	ldd	r24, Y+9	; 0x09
    2a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_custom_character+0x382>
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);



}
    2a7a:	aa 96       	adiw	r28, 0x2a	; 42
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <main>:
//    if(  (u8_OVF_Value % 10)  ==  0 )
//	  PORTA = ~PORTA ;
//}

int main()
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <main+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <main+0x8>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62


	 DDRB |= 1<<3; //CO0
    2a98:	a7 e3       	ldi	r26, 0x37	; 55
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e7 e3       	ldi	r30, 0x37	; 55
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	88 60       	ori	r24, 0x08	; 8
    2aa4:	8c 93       	st	X, r24
	 ST_PWM0Config_t configPWM = {PWM_FAST,PWM_PRESCALING_CLK64,PWM_TOF_DISABLE,PWM_Non_Inverted};
    2aa6:	88 e4       	ldi	r24, 0x48	; 72
    2aa8:	89 83       	std	Y+1, r24	; 0x01
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	1b 82       	std	Y+3, r1	; 0x03
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	8c 83       	std	Y+4, r24	; 0x04
	 PWM0_SetComapreValue(128);
    2ab4:	80 e8       	ldi	r24, 0x80	; 128
    2ab6:	0e 94 16 07 	call	0xe2c	; 0xe2c <PWM0_SetComapreValue>
	 PWM0_Init(&configPWM);
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <PWM0_Init>
    2ac2:	ff cf       	rjmp	.-2      	; 0x2ac2 <main+0x36>

00002ac4 <__udivmodsi4>:
    2ac4:	a1 e2       	ldi	r26, 0x21	; 33
    2ac6:	1a 2e       	mov	r1, r26
    2ac8:	aa 1b       	sub	r26, r26
    2aca:	bb 1b       	sub	r27, r27
    2acc:	fd 01       	movw	r30, r26
    2ace:	0d c0       	rjmp	.+26     	; 0x2aea <__udivmodsi4_ep>

00002ad0 <__udivmodsi4_loop>:
    2ad0:	aa 1f       	adc	r26, r26
    2ad2:	bb 1f       	adc	r27, r27
    2ad4:	ee 1f       	adc	r30, r30
    2ad6:	ff 1f       	adc	r31, r31
    2ad8:	a2 17       	cp	r26, r18
    2ada:	b3 07       	cpc	r27, r19
    2adc:	e4 07       	cpc	r30, r20
    2ade:	f5 07       	cpc	r31, r21
    2ae0:	20 f0       	brcs	.+8      	; 0x2aea <__udivmodsi4_ep>
    2ae2:	a2 1b       	sub	r26, r18
    2ae4:	b3 0b       	sbc	r27, r19
    2ae6:	e4 0b       	sbc	r30, r20
    2ae8:	f5 0b       	sbc	r31, r21

00002aea <__udivmodsi4_ep>:
    2aea:	66 1f       	adc	r22, r22
    2aec:	77 1f       	adc	r23, r23
    2aee:	88 1f       	adc	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	1a 94       	dec	r1
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <__udivmodsi4_loop>
    2af6:	60 95       	com	r22
    2af8:	70 95       	com	r23
    2afa:	80 95       	com	r24
    2afc:	90 95       	com	r25
    2afe:	9b 01       	movw	r18, r22
    2b00:	ac 01       	movw	r20, r24
    2b02:	bd 01       	movw	r22, r26
    2b04:	cf 01       	movw	r24, r30
    2b06:	08 95       	ret

00002b08 <__prologue_saves__>:
    2b08:	2f 92       	push	r2
    2b0a:	3f 92       	push	r3
    2b0c:	4f 92       	push	r4
    2b0e:	5f 92       	push	r5
    2b10:	6f 92       	push	r6
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	ca 1b       	sub	r28, r26
    2b32:	db 0b       	sbc	r29, r27
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	09 94       	ijmp

00002b40 <__epilogue_restores__>:
    2b40:	2a 88       	ldd	r2, Y+18	; 0x12
    2b42:	39 88       	ldd	r3, Y+17	; 0x11
    2b44:	48 88       	ldd	r4, Y+16	; 0x10
    2b46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b52:	b9 84       	ldd	r11, Y+9	; 0x09
    2b54:	c8 84       	ldd	r12, Y+8	; 0x08
    2b56:	df 80       	ldd	r13, Y+7	; 0x07
    2b58:	ee 80       	ldd	r14, Y+6	; 0x06
    2b5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b60:	aa 81       	ldd	r26, Y+2	; 0x02
    2b62:	b9 81       	ldd	r27, Y+1	; 0x01
    2b64:	ce 0f       	add	r28, r30
    2b66:	d1 1d       	adc	r29, r1
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	ed 01       	movw	r28, r26
    2b74:	08 95       	ret

00002b76 <_exit>:
    2b76:	f8 94       	cli

00002b78 <__stop_program>:
    2b78:	ff cf       	rjmp	.-2      	; 0x2b78 <__stop_program>
